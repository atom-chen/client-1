/*
** Lua binding: LuaFramework
** Generated automatically by tolua++-1.0.92 on 08/08/14 11:12:00.
*/

/****************************************************************************
 Copyright (c) 2011 cocos2d-x.org

 http://www.cocos2d-x.org

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/



#include "LuaFramework.h"

/* function to release collected object via destructor */
#ifdef __cplusplus

static int tolua_collect_SFControlFactory (lua_State* tolua_S)
{
 SFControlFactory* self = (SFControlFactory*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_iStreamReader (lua_State* tolua_S)
{
 iStreamReader* self = (iStreamReader*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCScrollViewDelegate (lua_State* tolua_S)
{
 CCScrollViewDelegate* self = (CCScrollViewDelegate*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFGameSceneMgr (lua_State* tolua_S)
{
 SFGameSceneMgr* self = (SFGameSceneMgr*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFTableViewDataSource (lua_State* tolua_S)
{
 SFTableViewDataSource* self = (SFTableViewDataSource*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFGameAnalyzer (lua_State* tolua_S)
{
 SFGameAnalyzer* self = (SFGameAnalyzer*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_iBinaryReader (lua_State* tolua_S)
{
 iBinaryReader* self = (iBinaryReader*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_RenderSprite (lua_State* tolua_S)
{
 RenderSprite* self = (RenderSprite*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFDownload (lua_State* tolua_S)
{
 SFDownload* self = (SFDownload*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFLoginManager (lua_State* tolua_S)
{
 SFLoginManager* self = (SFLoginManager*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCEditBox (lua_State* tolua_S)
{
 CCEditBox* self = (CCEditBox*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_ccColor3B (lua_State* tolua_S)
{
 ccColor3B* self = (ccColor3B*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCDrawNode (lua_State* tolua_S)
{
 CCDrawNode* self = (CCDrawNode*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFTouchLayer (lua_State* tolua_S)
{
 SFTouchLayer* self = (SFTouchLayer*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFDownLoadDelegateLua (lua_State* tolua_S)
{
 SFDownLoadDelegateLua* self = (SFDownLoadDelegateLua*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFPriorityNotificationCenter (lua_State* tolua_S)
{
 SFPriorityNotificationCenter* self = (SFPriorityNotificationCenter*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFSpriteMovementEvent (lua_State* tolua_S)
{
 SFSpriteMovementEvent* self = (SFSpriteMovementEvent*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFControlFactoryManager (lua_State* tolua_S)
{
 SFControlFactoryManager* self = (SFControlFactoryManager*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SEL_CallFuncO (lua_State* tolua_S)
{
 SEL_CallFuncO* self = (SEL_CallFuncO*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFGridBox (lua_State* tolua_S)
{
 SFGridBox* self = (SFGridBox*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFPriorityNotificationObserver (lua_State* tolua_S)
{
 SFPriorityNotificationObserver* self = (SFPriorityNotificationObserver*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCScale9Sprite (lua_State* tolua_S)
{
 CCScale9Sprite* self = (CCScale9Sprite*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFScrollView (lua_State* tolua_S)
{
 SFScrollView* self = (SFScrollView*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCPoint (lua_State* tolua_S)
{
 CCPoint* self = (CCPoint*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_RenderScene (lua_State* tolua_S)
{
 RenderScene* self = (RenderScene*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFBaseControl (lua_State* tolua_S)
{
 SFBaseControl* self = (SFBaseControl*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_iStreamWriter (lua_State* tolua_S)
{
 iStreamWriter* self = (iStreamWriter*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFPackgePatchLuaDelegate (lua_State* tolua_S)
{
 SFPackgePatchLuaDelegate* self = (SFPackgePatchLuaDelegate*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_RTLayer (lua_State* tolua_S)
{
 RTLayer* self = (RTLayer*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFTableView (lua_State* tolua_S)
{
 SFTableView* self = (SFTableView*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCScrollView (lua_State* tolua_S)
{
 CCScrollView* self = (CCScrollView*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFSpriteAnimNotifyEvent (lua_State* tolua_S)
{
 SFSpriteAnimNotifyEvent* self = (SFSpriteAnimNotifyEvent*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFMapService (lua_State* tolua_S)
{
 SFMapService* self = (SFMapService*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCTableViewCell (lua_State* tolua_S)
{
 CCTableViewCell* self = (CCTableViewCell*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SpriteMove (lua_State* tolua_S)
{
 SpriteMove* self = (SpriteMove*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFGamePresenter (lua_State* tolua_S)
{
 SFGamePresenter* self = (SFGamePresenter*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFPoint (lua_State* tolua_S)
{
 SFPoint* self = (SFPoint*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFGameSimulator (lua_State* tolua_S)
{
 SFGameSimulator* self = (SFGameSimulator*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCShaderCache (lua_State* tolua_S)
{
 CCShaderCache* self = (CCShaderCache*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFRect (lua_State* tolua_S)
{
 SFRect* self = (SFRect*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFEasyMail (lua_State* tolua_S)
{
 SFEasyMail* self = (SFEasyMail*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCRect (lua_State* tolua_S)
{
 CCRect* self = (CCRect*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_ccBlendFunc (lua_State* tolua_S)
{
 ccBlendFunc* self = (ccBlendFunc*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFScrollViewDelegate (lua_State* tolua_S)
{
 SFScrollViewDelegate* self = (SFScrollViewDelegate*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCClippingNode (lua_State* tolua_S)
{
 CCClippingNode* self = (CCClippingNode*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_GLfloat (lua_State* tolua_S)
{
 GLfloat* self = (GLfloat*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFLabelTex (lua_State* tolua_S)
{
 SFLabelTex* self = (SFLabelTex*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFTouchEvent (lua_State* tolua_S)
{
 SFTouchEvent* self = (SFTouchEvent*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFPackageManager (lua_State* tolua_S)
{
 SFPackageManager* self = (SFPackageManager*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCEditBoxDelegate (lua_State* tolua_S)
{
 CCEditBoxDelegate* self = (CCEditBoxDelegate*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_RpgSprite (lua_State* tolua_S)
{
 RpgSprite* self = (RpgSprite*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_GameResource (lua_State* tolua_S)
{
 GameResource* self = (GameResource*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_LogicFinder (lua_State* tolua_S)
{
 LogicFinder* self = (LogicFinder*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFPackageVersion (lua_State* tolua_S)
{
 SFPackageVersion* self = (SFPackageVersion*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCSize (lua_State* tolua_S)
{
 CCSize* self = (CCSize*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCControlSlider (lua_State* tolua_S)
{
 CCControlSlider* self = (CCControlSlider*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_iBinaryWriter (lua_State* tolua_S)
{
 iBinaryWriter* self = (iBinaryWriter*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFTabView (lua_State* tolua_S)
{
 SFTabView* self = (SFTabView*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_HttpTools (lua_State* tolua_S)
{
 HttpTools* self = (HttpTools*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCTextAlignment (lua_State* tolua_S)
{
 CCTextAlignment* self = (CCTextAlignment*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_iStream (lua_State* tolua_S)
{
 iStream* self = (iStream*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_pathPoint (lua_State* tolua_S)
{
 pathPoint* self = (pathPoint*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFMap (lua_State* tolua_S)
{
 SFMap* self = (SFMap*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFTouchDelegate (lua_State* tolua_S)
{
 SFTouchDelegate* self = (SFTouchDelegate*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFGameScene (lua_State* tolua_S)
{
 SFGameScene* self = (SFGameScene*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCControl (lua_State* tolua_S)
{
 CCControl* self = (CCControl*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFTimeAxis (lua_State* tolua_S)
{
 SFTimeAxis* self = (SFTimeAxis*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCControlButton (lua_State* tolua_S)
{
 CCControlButton* self = (CCControlButton*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCNodeRGBA (lua_State* tolua_S)
{
 CCNodeRGBA* self = (CCNodeRGBA*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_iMemoryStream (lua_State* tolua_S)
{
 iMemoryStream* self = (iMemoryStream*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCVerticalTextAlignment (lua_State* tolua_S)
{
 CCVerticalTextAlignment* self = (CCVerticalTextAlignment*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_CCGLProgram (lua_State* tolua_S)
{
 CCGLProgram* self = (CCGLProgram*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFSize (lua_State* tolua_S)
{
 SFSize* self = (SFSize*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFCheckBox (lua_State* tolua_S)
{
 SFCheckBox* self = (SFCheckBox*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFLabel (lua_State* tolua_S)
{
 SFLabel* self = (SFLabel*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}

static int tolua_collect_SFControlSlider (lua_State* tolua_S)
{
 SFControlSlider* self = (SFControlSlider*) tolua_tousertype(tolua_S,1,0);
    Mtolua_delete(self);
    return 0;
}
#endif


/* function to register type */
static void tolua_reg_types (lua_State* tolua_S)
{
 tolua_usertype(tolua_S,"iStreamReader");
 tolua_usertype(tolua_S,"CCScrollViewDelegate");
 tolua_usertype(tolua_S,"SFTableViewDataSource");
 tolua_usertype(tolua_S,"cocos2d::EventArgs");
 tolua_usertype(tolua_S,"CCSpriteBatchNode");
 tolua_usertype(tolua_S,"ActionEventBase");
 tolua_usertype(tolua_S,"CCEditBox");
 tolua_usertype(tolua_S,"CCDrawNode");
 tolua_usertype(tolua_S,"SFProgressBar");
 tolua_usertype(tolua_S,"CCString");
 tolua_usertype(tolua_S,"LogicBlock");
 tolua_usertype(tolua_S,"SFPriorityNotificationCenter");
 tolua_usertype(tolua_S,"ccColor4F");
 tolua_usertype(tolua_S,"SFSpriteMovementEvent");
 tolua_usertype(tolua_S,"PathPoint");
 tolua_usertype(tolua_S,"SFControlFactoryManager");
 tolua_usertype(tolua_S,"SEL_CallFuncO");
 tolua_usertype(tolua_S,"SFGridBox");
 tolua_usertype(tolua_S,"SFPriorityNotificationObserver");
 tolua_usertype(tolua_S,"StreamDataAdapter");
 tolua_usertype(tolua_S,"CCShaderColorFadeIn");
 tolua_usertype(tolua_S,"CCSprite");
 tolua_usertype(tolua_S,"SFTabView");
 tolua_usertype(tolua_S,"CCTouch");
 tolua_usertype(tolua_S,"iStreamWriter");
 tolua_usertype(tolua_S,"SFPackgePatchLuaDelegate");
 tolua_usertype(tolua_S,"CCIMEDelegate");
 tolua_usertype(tolua_S,"SFSpriteAnimNotifyEvent");
 tolua_usertype(tolua_S,"pathPoint");
 tolua_usertype(tolua_S,"CCTableViewCell");
 tolua_usertype(tolua_S,"SpriteMove");
 tolua_usertype(tolua_S,"SFGamePresenter");
 tolua_usertype(tolua_S,"SFPackgePatchDelegate");
 tolua_usertype(tolua_S,"SFPoint");
 tolua_usertype(tolua_S,"MemoryStream");
 tolua_usertype(tolua_S,"SFJoyRocker");
 tolua_usertype(tolua_S,"CCRect");
 tolua_usertype(tolua_S,"SFPackageVersion");
 tolua_usertype(tolua_S,"SFGridBoxDataSource");
 tolua_usertype(tolua_S,"SFRenderSprite");
 tolua_usertype(tolua_S,"SFDownloadDelegateProtocl");
 tolua_usertype(tolua_S,"CCEditBoxDelegate");
 tolua_usertype(tolua_S,"SFTouchProtocol");
 tolua_usertype(tolua_S,"LogicFinder");
 tolua_usertype(tolua_S,"HttpTools");
 tolua_usertype(tolua_S,"iStream");
 tolua_usertype(tolua_S,"CCControlButton");
 tolua_usertype(tolua_S,"iMemoryStream");
 tolua_usertype(tolua_S,"CCVerticalTextAlignment");
 tolua_usertype(tolua_S,"SFSize");
 tolua_usertype(tolua_S,"SFTimeAxis");
 tolua_usertype(tolua_S,"SFGameSceneMgr");
 tolua_usertype(tolua_S,"CCNode");
 tolua_usertype(tolua_S,"SFGameAnalyzer");
 tolua_usertype(tolua_S,"iBinaryReader");
 tolua_usertype(tolua_S,"SFLoginManager");
 tolua_usertype(tolua_S,"CCPointArray");
 tolua_usertype(tolua_S,"ccColor3B");
 tolua_usertype(tolua_S,"SFTouchLayer");
 tolua_usertype(tolua_S,"SFGridBoxDelegate");
 tolua_usertype(tolua_S,"SFDownLoadDelegateLua");
 tolua_usertype(tolua_S,"CCControlSlider");
 tolua_usertype(tolua_S,"Map");
 tolua_usertype(tolua_S,"SFTabViewDelegate");
 tolua_usertype(tolua_S,"ccBlendFunc");
 tolua_usertype(tolua_S,"SFJoyRockerDelegate");
 tolua_usertype(tolua_S,"SFRichLabel");
 tolua_usertype(tolua_S,"Base64Code");
 tolua_usertype(tolua_S,"SFEasyMail");
 tolua_usertype(tolua_S,"SFControlFactory");
 tolua_usertype(tolua_S,"CCClippingNode");
 tolua_usertype(tolua_S,"SFControlSlider");
 tolua_usertype(tolua_S,"SFDownload");
 tolua_usertype(tolua_S,"CCPoint");
 tolua_usertype(tolua_S,"SFSharedFontManager");
 tolua_usertype(tolua_S,"RenderScene");
 tolua_usertype(tolua_S,"SFBaseControl");
 tolua_usertype(tolua_S,"CCIMEKeyboardNotificationInfo");
 tolua_usertype(tolua_S,"SFHttpResponseListener");
 tolua_usertype(tolua_S,"GLfloat");
 tolua_usertype(tolua_S,"CCFileUtils");
 tolua_usertype(tolua_S,"RTLayer");
 tolua_usertype(tolua_S,"CCLayerRGBA");
 tolua_usertype(tolua_S,"SFTouchEvent");
 tolua_usertype(tolua_S,"CCScrollView");
 tolua_usertype(tolua_S,"CCFileLoader");
 tolua_usertype(tolua_S,"SFMapService");
 tolua_usertype(tolua_S,"CCDictionary");
 tolua_usertype(tolua_S,"IntPoint");
 tolua_usertype(tolua_S,"SFPackageManager");
 tolua_usertype(tolua_S,"SFTableViewCell");
 tolua_usertype(tolua_S,"CCEvent");
 tolua_usertype(tolua_S,"RenderSprite");
 tolua_usertype(tolua_S,"CCTexture2D");
 tolua_usertype(tolua_S,"SFGameScene");
 tolua_usertype(tolua_S,"SFGameHelper");
 tolua_usertype(tolua_S,"CCScale9Sprite");
 tolua_usertype(tolua_S,"SFGameSimulator");
 tolua_usertype(tolua_S,"CCShaderCache");
 tolua_usertype(tolua_S,"CCActionInterval");
 tolua_usertype(tolua_S,"SFRect");
 
 tolua_usertype(tolua_S,"CCObject");
 tolua_usertype(tolua_S,"ISqlReadStreamCallBack");
 tolua_usertype(tolua_S,"SFScrollViewDelegate");
 tolua_usertype(tolua_S,"SFLabelTex");
 tolua_usertype(tolua_S,"SFTcpConnectionListener");
 tolua_usertype(tolua_S,"SFMapLoadInterface");
 tolua_usertype(tolua_S,"VisibleRect");
 tolua_usertype(tolua_S,"SEL_CCControlHandler");
 tolua_usertype(tolua_S,"CCLayer");
 tolua_usertype(tolua_S,"RpgSprite");
 tolua_usertype(tolua_S,"SFCommunicationListener");
 tolua_usertype(tolua_S,"CCScene");
 tolua_usertype(tolua_S,"SFCheckBox");
 tolua_usertype(tolua_S,"CCSize");
 tolua_usertype(tolua_S,"SFGraySprite");
 tolua_usertype(tolua_S,"iBinaryWriter");
 tolua_usertype(tolua_S,"CCTouchDelegate");
 tolua_usertype(tolua_S,"cocos2d::MemoryStream");
 tolua_usertype(tolua_S,"CCArray");
 tolua_usertype(tolua_S,"SFScrollView");
 tolua_usertype(tolua_S,"SFTableView");
 tolua_usertype(tolua_S,"SFMap");
 tolua_usertype(tolua_S,"SFTableData");
 tolua_usertype(tolua_S,"SFTableViewDelegate");
 tolua_usertype(tolua_S,"CCControl");
 tolua_usertype(tolua_S,"SFScriptManager");
 tolua_usertype(tolua_S,"CCGLProgram");
 tolua_usertype(tolua_S,"CCTextAlignment");
 tolua_usertype(tolua_S,"SFTouchDelegate");
 tolua_usertype(tolua_S,"CCNodeRGBA");
 tolua_usertype(tolua_S,"GameResource");
 tolua_usertype(tolua_S,"CCRGBAProtocol");
 tolua_usertype(tolua_S,"CCSpriteFrame");
 tolua_usertype(tolua_S,"SFLabel");
 tolua_usertype(tolua_S,"CCShaderColorFadeOut");
}

/* method: getName of class  CCTexture2D */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCTexture2D_getName00
static int tolua_LuaFramework_CCTexture2D_getName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCTexture2D",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCTexture2D* self = (CCTexture2D*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getName'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getName();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: sharedSFSharedFontManager of class  SFSharedFontManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSharedFontManager_sharedSFSharedFontManager00
static int tolua_LuaFramework_SFSharedFontManager_sharedSFSharedFontManager00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFSharedFontManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFSharedFontManager* tolua_ret = (SFSharedFontManager*)  SFSharedFontManager::sharedSFSharedFontManager();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFSharedFontManager");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'sharedSFSharedFontManager'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSpriteList of class  SFSharedFontManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSharedFontManager_getSpriteList00
static int tolua_LuaFramework_SFSharedFontManager_getSpriteList00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFSharedFontManager",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isstring(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFSharedFontManager* self = (SFSharedFontManager*)  tolua_tousertype(tolua_S,1,0);
  std::string font = ((std::string)  tolua_tocppstring(tolua_S,2,0));
  int size = ((int)  tolua_tonumber(tolua_S,3,0));
  const char* str = ((const char*)  tolua_tostring(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSpriteList'", NULL);
#endif
  {
   CCArray* tolua_ret = (CCArray*)  self->getSpriteList(font,size,str);
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCArray");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSpriteList'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_delete00
static int tolua_LuaFramework_iStream_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStream* self = (iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: CanRead of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_CanRead00
static int tolua_LuaFramework_iStream_CanRead00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iStream* self = (const iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CanRead'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->CanRead();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CanRead'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: CanWrite of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_CanWrite00
static int tolua_LuaFramework_iStream_CanWrite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iStream* self = (const iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CanWrite'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->CanWrite();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CanWrite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: CanSeek of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_CanSeek00
static int tolua_LuaFramework_iStream_CanSeek00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iStream* self = (const iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CanSeek'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->CanSeek();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CanSeek'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: CanBeMapped of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_CanBeMapped00
static int tolua_LuaFramework_iStream_CanBeMapped00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iStream* self = (const iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CanBeMapped'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->CanBeMapped();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CanBeMapped'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSize of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_SetSize00
static int tolua_LuaFramework_iStream_SetSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStream",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStream* self = (iStream*)  tolua_tousertype(tolua_S,1,0);
  int s = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSize'", NULL);
#endif
  {
   self->SetSize(s);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSize of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_GetSize00
static int tolua_LuaFramework_iStream_GetSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iStream* self = (const iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSize'", NULL);
#endif
  {
   int tolua_ret = (int)  self->GetSize();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetPosition of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_GetPosition00
static int tolua_LuaFramework_iStream_GetPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iStream* self = (const iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetPosition'", NULL);
#endif
  {
   int tolua_ret = (int)  self->GetPosition();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAccessMode of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_SetAccessMode00
static int tolua_LuaFramework_iStream_SetAccessMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStream",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStream* self = (iStream*)  tolua_tousertype(tolua_S,1,0);
  iStream::AccessMode m = ((iStream::AccessMode) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAccessMode'", NULL);
#endif
  {
   self->SetAccessMode(m);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAccessMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAccessMode of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_GetAccessMode00
static int tolua_LuaFramework_iStream_GetAccessMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iStream* self = (const iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAccessMode'", NULL);
#endif
  {
   iStream::AccessMode tolua_ret = (iStream::AccessMode)  self->GetAccessMode();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAccessMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAccessPattern of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_SetAccessPattern00
static int tolua_LuaFramework_iStream_SetAccessPattern00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStream",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStream* self = (iStream*)  tolua_tousertype(tolua_S,1,0);
  iStream::AccessPattern p = ((iStream::AccessPattern) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAccessPattern'", NULL);
#endif
  {
   self->SetAccessPattern(p);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAccessPattern'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAccessPattern of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_GetAccessPattern00
static int tolua_LuaFramework_iStream_GetAccessPattern00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iStream* self = (const iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAccessPattern'", NULL);
#endif
  {
   iStream::AccessPattern tolua_ret = (iStream::AccessPattern)  self->GetAccessPattern();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAccessPattern'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Open of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_Open00
static int tolua_LuaFramework_iStream_Open00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStream* self = (iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Open'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Open();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Open'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Close of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_Close00
static int tolua_LuaFramework_iStream_Close00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStream* self = (iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Close'", NULL);
#endif
  {
   self->Close();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Close'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsOpen of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_IsOpen00
static int tolua_LuaFramework_iStream_IsOpen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iStream* self = (const iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsOpen'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->IsOpen();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsOpen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Write of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_Write00
static int tolua_LuaFramework_iStream_Write00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStream",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStream* self = (iStream*)  tolua_tousertype(tolua_S,1,0);
  const void* ptr = ((const void*)  tolua_touserdata(tolua_S,2,0));
  int numBytes = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Write'", NULL);
#endif
  {
   self->Write(ptr,numBytes);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Write'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Read of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_Read00
static int tolua_LuaFramework_iStream_Read00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStream",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStream* self = (iStream*)  tolua_tousertype(tolua_S,1,0);
  void* ptr = ((void*)  tolua_touserdata(tolua_S,2,0));
  int numBytes = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Read'", NULL);
#endif
  {
   int tolua_ret = (int)  self->Read(ptr,numBytes);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Read'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Seek of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_Seek00
static int tolua_LuaFramework_iStream_Seek00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStream",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStream* self = (iStream*)  tolua_tousertype(tolua_S,1,0);
  int offset = ((int)  tolua_tonumber(tolua_S,2,0));
  iStream::SeekOrigin origin = ((iStream::SeekOrigin) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Seek'", NULL);
#endif
  {
   self->Seek(offset,origin);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Seek'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Flush of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_Flush00
static int tolua_LuaFramework_iStream_Flush00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStream* self = (iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Flush'", NULL);
#endif
  {
   self->Flush();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Flush'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Eof of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_Eof00
static int tolua_LuaFramework_iStream_Eof00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iStream* self = (const iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Eof'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Eof();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Eof'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Map of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_Map00
static int tolua_LuaFramework_iStream_Map00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStream* self = (iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Map'", NULL);
#endif
  {
   void* tolua_ret = (void*)  self->Map();
   tolua_pushuserdata(tolua_S,(void*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Map'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Unmap of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_Unmap00
static int tolua_LuaFramework_iStream_Unmap00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStream* self = (iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Unmap'", NULL);
#endif
  {
   self->Unmap();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Unmap'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsMapped of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_IsMapped00
static int tolua_LuaFramework_iStream_IsMapped00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iStream* self = (const iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsMapped'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->IsMapped();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsMapped'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Dump of class  iStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStream_Dump00
static int tolua_LuaFramework_iStream_Dump00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStream* self = (iStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Dump'", NULL);
#endif
  {
   self->Dump();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Dump'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  iMemoryStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iMemoryStream_delete00
static int tolua_LuaFramework_iMemoryStream_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iMemoryStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iMemoryStream* self = (iMemoryStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRawPointer of class  iMemoryStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iMemoryStream_GetRawPointer00
static int tolua_LuaFramework_iMemoryStream_GetRawPointer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iMemoryStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iMemoryStream* self = (const iMemoryStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetRawPointer'", NULL);
#endif
  {
   void* tolua_ret = (void*)  self->GetRawPointer();
   tolua_pushuserdata(tolua_S,(void*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRawPointer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: InitRawPointer of class  iMemoryStream */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iMemoryStream_InitRawPointer00
static int tolua_LuaFramework_iMemoryStream_InitRawPointer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iMemoryStream",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iMemoryStream* self = (iMemoryStream*)  tolua_tousertype(tolua_S,1,0);
  unsigned char* buffer = ((unsigned char*)  tolua_tostring(tolua_S,2,0));
  int size = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'InitRawPointer'", NULL);
#endif
  {
   self->InitRawPointer(buffer,size);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'InitRawPointer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  iStreamReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStreamReader_delete00
static int tolua_LuaFramework_iStreamReader_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStreamReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStreamReader* self = (iStreamReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetStream of class  iStreamReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStreamReader_SetStream00
static int tolua_LuaFramework_iStreamReader_SetStream00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStreamReader",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iStream",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStreamReader* self = (iStreamReader*)  tolua_tousertype(tolua_S,1,0);
  iStream* s = ((iStream*)  tolua_tousertype(tolua_S,2,0));
  bool delStream = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetStream'", NULL);
#endif
  {
   self->SetStream(s,delStream);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetStream'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetStream of class  iStreamReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStreamReader_GetStream00
static int tolua_LuaFramework_iStreamReader_GetStream00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStreamReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStreamReader* self = (iStreamReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetStream'", NULL);
#endif
  {
   iStream* tolua_ret = (iStream*)  self->GetStream();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"iStream");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetStream'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: HasStream of class  iStreamReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStreamReader_HasStream00
static int tolua_LuaFramework_iStreamReader_HasStream00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iStreamReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iStreamReader* self = (const iStreamReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'HasStream'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->HasStream();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'HasStream'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Eof of class  iStreamReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStreamReader_Eof00
static int tolua_LuaFramework_iStreamReader_Eof00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iStreamReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iStreamReader* self = (const iStreamReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Eof'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Eof();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Eof'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Open of class  iStreamReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStreamReader_Open00
static int tolua_LuaFramework_iStreamReader_Open00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStreamReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStreamReader* self = (iStreamReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Open'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Open();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Open'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Close of class  iStreamReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStreamReader_Close00
static int tolua_LuaFramework_iStreamReader_Close00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStreamReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStreamReader* self = (iStreamReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Close'", NULL);
#endif
  {
   self->Close();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Close'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsOpen of class  iStreamReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStreamReader_IsOpen00
static int tolua_LuaFramework_iStreamReader_IsOpen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iStreamReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iStreamReader* self = (const iStreamReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsOpen'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->IsOpen();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsOpen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  iBinaryReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryReader_delete00
static int tolua_LuaFramework_iBinaryReader_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* self = (iBinaryReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMemoryMappingEnabled of class  iBinaryReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryReader_SetMemoryMappingEnabled00
static int tolua_LuaFramework_iBinaryReader_SetMemoryMappingEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryReader",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* self = (iBinaryReader*)  tolua_tousertype(tolua_S,1,0);
  bool b = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMemoryMappingEnabled'", NULL);
#endif
  {
   self->SetMemoryMappingEnabled(b);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMemoryMappingEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsMemoryMappingEnabled of class  iBinaryReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryReader_IsMemoryMappingEnabled00
static int tolua_LuaFramework_iBinaryReader_IsMemoryMappingEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iBinaryReader* self = (const iBinaryReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsMemoryMappingEnabled'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->IsMemoryMappingEnabled();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsMemoryMappingEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadChar of class  iBinaryReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryReader_ReadChar00
static int tolua_LuaFramework_iBinaryReader_ReadChar00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* self = (iBinaryReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadChar'", NULL);
#endif
  {
   signed char tolua_ret = (signed char)  self->ReadChar();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadChar'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadUChar of class  iBinaryReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryReader_ReadUChar00
static int tolua_LuaFramework_iBinaryReader_ReadUChar00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* self = (iBinaryReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadUChar'", NULL);
#endif
  {
   unsigned char tolua_ret = (unsigned char)  self->ReadUChar();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadUChar'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadShort of class  iBinaryReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryReader_ReadShort00
static int tolua_LuaFramework_iBinaryReader_ReadShort00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* self = (iBinaryReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadShort'", NULL);
#endif
  {
   signed short tolua_ret = (signed short)  self->ReadShort();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadShort'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadUShort of class  iBinaryReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryReader_ReadUShort00
static int tolua_LuaFramework_iBinaryReader_ReadUShort00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* self = (iBinaryReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadUShort'", NULL);
#endif
  {
   unsigned short tolua_ret = (unsigned short)  self->ReadUShort();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadUShort'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadInt of class  iBinaryReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryReader_ReadInt00
static int tolua_LuaFramework_iBinaryReader_ReadInt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* self = (iBinaryReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadInt'", NULL);
#endif
  {
   signed int tolua_ret = (signed int)  self->ReadInt();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadInt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadUInt of class  iBinaryReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryReader_ReadUInt00
static int tolua_LuaFramework_iBinaryReader_ReadUInt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* self = (iBinaryReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadUInt'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->ReadUInt();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadUInt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadFloat of class  iBinaryReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryReader_ReadFloat00
static int tolua_LuaFramework_iBinaryReader_ReadFloat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* self = (iBinaryReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadFloat'", NULL);
#endif
  {
   float tolua_ret = (float)  self->ReadFloat();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadFloat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadDouble of class  iBinaryReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryReader_ReadDouble00
static int tolua_LuaFramework_iBinaryReader_ReadDouble00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* self = (iBinaryReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadDouble'", NULL);
#endif
  {
   double tolua_ret = (double)  self->ReadDouble();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadDouble'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadBool of class  iBinaryReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryReader_ReadBool00
static int tolua_LuaFramework_iBinaryReader_ReadBool00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* self = (iBinaryReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadBool'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->ReadBool();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadBool'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadString of class  iBinaryReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryReader_ReadString00
static int tolua_LuaFramework_iBinaryReader_ReadString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryReader",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* self = (iBinaryReader*)  tolua_tousertype(tolua_S,1,0);
  char* tempBuf = ((char*)  tolua_tostring(tolua_S,2,0));
  unsigned long len = ((unsigned long)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadString'", NULL);
#endif
  {
   char* tolua_ret = (char*)  self->ReadString(tempBuf,len);
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadStringNoLen of class  iBinaryReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryReader_ReadStringNoLen00
static int tolua_LuaFramework_iBinaryReader_ReadStringNoLen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryReader",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* self = (iBinaryReader*)  tolua_tousertype(tolua_S,1,0);
  char* tempBuf = ((char*)  tolua_tostring(tolua_S,2,0));
  unsigned long len = ((unsigned long)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadStringNoLen'", NULL);
#endif
  {
   char* tolua_ret = (char*)  self->ReadStringNoLen(tempBuf,len);
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadStringNoLen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadRawData of class  iBinaryReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryReader_ReadRawData00
static int tolua_LuaFramework_iBinaryReader_ReadRawData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryReader",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* self = (iBinaryReader*)  tolua_tousertype(tolua_S,1,0);
  void* ptr = ((void*)  tolua_touserdata(tolua_S,2,0));
  unsigned long numBytes = ((unsigned long)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadRawData'", NULL);
#endif
  {
   self->ReadRawData(ptr,numBytes);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadRawData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadLLong of class  iBinaryReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryReader_ReadLLong00
static int tolua_LuaFramework_iBinaryReader_ReadLLong00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* self = (iBinaryReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadLLong'", NULL);
#endif
  {
   signed long long tolua_ret = (signed long long)  self->ReadLLong();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadLLong'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadULLong of class  iBinaryReader */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryReader_ReadULLong00
static int tolua_LuaFramework_iBinaryReader_ReadULLong00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* self = (iBinaryReader*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadULLong'", NULL);
#endif
  {
   unsigned long long tolua_ret = (unsigned long long)  self->ReadULLong();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadULLong'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  iStreamWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStreamWriter_delete00
static int tolua_LuaFramework_iStreamWriter_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStreamWriter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStreamWriter* self = (iStreamWriter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetStream of class  iStreamWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStreamWriter_SetStream00
static int tolua_LuaFramework_iStreamWriter_SetStream00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStreamWriter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iStream",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStreamWriter* self = (iStreamWriter*)  tolua_tousertype(tolua_S,1,0);
  iStream* s = ((iStream*)  tolua_tousertype(tolua_S,2,0));
  bool delStream = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetStream'", NULL);
#endif
  {
   self->SetStream(s,delStream);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetStream'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetStream of class  iStreamWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStreamWriter_GetStream00
static int tolua_LuaFramework_iStreamWriter_GetStream00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStreamWriter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStreamWriter* self = (iStreamWriter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetStream'", NULL);
#endif
  {
   iStream* tolua_ret = (iStream*)  self->GetStream();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"iStream");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetStream'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: HasStream of class  iStreamWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStreamWriter_HasStream00
static int tolua_LuaFramework_iStreamWriter_HasStream00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iStreamWriter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iStreamWriter* self = (const iStreamWriter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'HasStream'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->HasStream();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'HasStream'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Open of class  iStreamWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStreamWriter_Open00
static int tolua_LuaFramework_iStreamWriter_Open00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStreamWriter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStreamWriter* self = (iStreamWriter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Open'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Open();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Open'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Close of class  iStreamWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStreamWriter_Close00
static int tolua_LuaFramework_iStreamWriter_Close00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iStreamWriter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iStreamWriter* self = (iStreamWriter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Close'", NULL);
#endif
  {
   self->Close();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Close'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsOpen of class  iStreamWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iStreamWriter_IsOpen00
static int tolua_LuaFramework_iStreamWriter_IsOpen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iStreamWriter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iStreamWriter* self = (const iStreamWriter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsOpen'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->IsOpen();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsOpen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  iBinaryWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryWriter_delete00
static int tolua_LuaFramework_iBinaryWriter_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* self = (iBinaryWriter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMemoryMappingEnabled of class  iBinaryWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryWriter_SetMemoryMappingEnabled00
static int tolua_LuaFramework_iBinaryWriter_SetMemoryMappingEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* self = (iBinaryWriter*)  tolua_tousertype(tolua_S,1,0);
  bool b = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMemoryMappingEnabled'", NULL);
#endif
  {
   self->SetMemoryMappingEnabled(b);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMemoryMappingEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsMemoryMappingEnabled of class  iBinaryWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryWriter_IsMemoryMappingEnabled00
static int tolua_LuaFramework_iBinaryWriter_IsMemoryMappingEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const iBinaryWriter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const iBinaryWriter* self = (const iBinaryWriter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsMemoryMappingEnabled'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->IsMemoryMappingEnabled();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsMemoryMappingEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteChar of class  iBinaryWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryWriter_WriteChar00
static int tolua_LuaFramework_iBinaryWriter_WriteChar00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* self = (iBinaryWriter*)  tolua_tousertype(tolua_S,1,0);
  char c = ((char)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteChar'", NULL);
#endif
  {
   self->WriteChar(c);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteChar'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteUChar of class  iBinaryWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryWriter_WriteUChar00
static int tolua_LuaFramework_iBinaryWriter_WriteUChar00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* self = (iBinaryWriter*)  tolua_tousertype(tolua_S,1,0);
  unsigned char c = ((unsigned char)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteUChar'", NULL);
#endif
  {
   self->WriteUChar(c);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteUChar'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteShort of class  iBinaryWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryWriter_WriteShort00
static int tolua_LuaFramework_iBinaryWriter_WriteShort00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* self = (iBinaryWriter*)  tolua_tousertype(tolua_S,1,0);
  short s = ((short)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteShort'", NULL);
#endif
  {
   self->WriteShort(s);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteShort'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteUShort of class  iBinaryWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryWriter_WriteUShort00
static int tolua_LuaFramework_iBinaryWriter_WriteUShort00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* self = (iBinaryWriter*)  tolua_tousertype(tolua_S,1,0);
  unsigned short s = ((unsigned short)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteUShort'", NULL);
#endif
  {
   self->WriteUShort(s);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteUShort'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteInt of class  iBinaryWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryWriter_WriteInt00
static int tolua_LuaFramework_iBinaryWriter_WriteInt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* self = (iBinaryWriter*)  tolua_tousertype(tolua_S,1,0);
  int i = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteInt'", NULL);
#endif
  {
   self->WriteInt(i);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteInt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteUInt of class  iBinaryWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryWriter_WriteUInt00
static int tolua_LuaFramework_iBinaryWriter_WriteUInt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* self = (iBinaryWriter*)  tolua_tousertype(tolua_S,1,0);
  unsigned int i = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteUInt'", NULL);
#endif
  {
   self->WriteUInt(i);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteUInt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteFloat of class  iBinaryWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryWriter_WriteFloat00
static int tolua_LuaFramework_iBinaryWriter_WriteFloat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* self = (iBinaryWriter*)  tolua_tousertype(tolua_S,1,0);
  float f = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteFloat'", NULL);
#endif
  {
   self->WriteFloat(f);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteFloat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteDouble of class  iBinaryWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryWriter_WriteDouble00
static int tolua_LuaFramework_iBinaryWriter_WriteDouble00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* self = (iBinaryWriter*)  tolua_tousertype(tolua_S,1,0);
  double d = ((double)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteDouble'", NULL);
#endif
  {
   self->WriteDouble(d);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteDouble'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteBool of class  iBinaryWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryWriter_WriteBool00
static int tolua_LuaFramework_iBinaryWriter_WriteBool00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* self = (iBinaryWriter*)  tolua_tousertype(tolua_S,1,0);
  bool b = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteBool'", NULL);
#endif
  {
   self->WriteBool(b);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteBool'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteString of class  iBinaryWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryWriter_WriteString00
static int tolua_LuaFramework_iBinaryWriter_WriteString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* self = (iBinaryWriter*)  tolua_tousertype(tolua_S,1,0);
  const char* txt = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteString'", NULL);
#endif
  {
   self->WriteString(txt);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteStringNoLen of class  iBinaryWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryWriter_WriteStringNoLen00
static int tolua_LuaFramework_iBinaryWriter_WriteStringNoLen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* self = (iBinaryWriter*)  tolua_tousertype(tolua_S,1,0);
  const char* txt = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteStringNoLen'", NULL);
#endif
  {
   self->WriteStringNoLen(txt);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteStringNoLen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteRawData of class  iBinaryWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryWriter_WriteRawData00
static int tolua_LuaFramework_iBinaryWriter_WriteRawData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* self = (iBinaryWriter*)  tolua_tousertype(tolua_S,1,0);
  const void* ptr = ((const void*)  tolua_touserdata(tolua_S,2,0));
  unsigned long numBytes = ((unsigned long)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteRawData'", NULL);
#endif
  {
   self->WriteRawData(ptr,numBytes);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteRawData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteLLong of class  iBinaryWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryWriter_WriteLLong00
static int tolua_LuaFramework_iBinaryWriter_WriteLLong00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* self = (iBinaryWriter*)  tolua_tousertype(tolua_S,1,0);
  long long ll = ((long long)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteLLong'", NULL);
#endif
  {
   self->WriteLLong(ll);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteLLong'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteULLong of class  iBinaryWriter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_iBinaryWriter_WriteULLong00
static int tolua_LuaFramework_iBinaryWriter_WriteULLong00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* self = (iBinaryWriter*)  tolua_tousertype(tolua_S,1,0);
  unsigned long long ull = ((unsigned long long)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteULLong'", NULL);
#endif
  {
   self->WriteULLong(ull);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteULLong'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteChar of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_WriteChar00
static int tolua_LuaFramework_StreamDataAdapter_WriteChar00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* writer = ((iBinaryWriter*)  tolua_tousertype(tolua_S,2,0));
  signed char value = ((signed char)  tolua_tonumber(tolua_S,3,0));
  {
   StreamDataAdapter::WriteChar(writer,value);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteChar'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteUChar of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_WriteUChar00
static int tolua_LuaFramework_StreamDataAdapter_WriteUChar00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* writer = ((iBinaryWriter*)  tolua_tousertype(tolua_S,2,0));
  unsigned char value = ((unsigned char)  tolua_tonumber(tolua_S,3,0));
  {
   StreamDataAdapter::WriteUChar(writer,value);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteUChar'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteShort of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_WriteShort00
static int tolua_LuaFramework_StreamDataAdapter_WriteShort00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* writer = ((iBinaryWriter*)  tolua_tousertype(tolua_S,2,0));
  signed short value = ((signed short)  tolua_tonumber(tolua_S,3,0));
  {
   StreamDataAdapter::WriteShort(writer,value);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteShort'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteUShort of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_WriteUShort00
static int tolua_LuaFramework_StreamDataAdapter_WriteUShort00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* writer = ((iBinaryWriter*)  tolua_tousertype(tolua_S,2,0));
  unsigned short value = ((unsigned short)  tolua_tonumber(tolua_S,3,0));
  {
   StreamDataAdapter::WriteUShort(writer,value);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteUShort'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteInt of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_WriteInt00
static int tolua_LuaFramework_StreamDataAdapter_WriteInt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* writer = ((iBinaryWriter*)  tolua_tousertype(tolua_S,2,0));
  signed int value = ((signed int)  tolua_tonumber(tolua_S,3,0));
  {
   StreamDataAdapter::WriteInt(writer,value);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteInt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteUInt of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_WriteUInt00
static int tolua_LuaFramework_StreamDataAdapter_WriteUInt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* writer = ((iBinaryWriter*)  tolua_tousertype(tolua_S,2,0));
  unsigned int value = ((unsigned int)  tolua_tonumber(tolua_S,3,0));
  {
   StreamDataAdapter::WriteUInt(writer,value);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteUInt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteFloat of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_WriteFloat00
static int tolua_LuaFramework_StreamDataAdapter_WriteFloat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* writer = ((iBinaryWriter*)  tolua_tousertype(tolua_S,2,0));
  float value = ((float)  tolua_tonumber(tolua_S,3,0));
  {
   StreamDataAdapter::WriteFloat(writer,value);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteFloat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteLLong of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_WriteLLong00
static int tolua_LuaFramework_StreamDataAdapter_WriteLLong00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* writer = ((iBinaryWriter*)  tolua_tousertype(tolua_S,2,0));
  signed long long value = ((signed long long)  tolua_tonumber(tolua_S,3,0));
  {
   StreamDataAdapter::WriteLLong(writer,value);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteLLong'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteULLong of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_WriteULLong00
static int tolua_LuaFramework_StreamDataAdapter_WriteULLong00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* writer = ((iBinaryWriter*)  tolua_tousertype(tolua_S,2,0));
  unsigned long long value = ((unsigned long long)  tolua_tonumber(tolua_S,3,0));
  {
   StreamDataAdapter::WriteULLong(writer,value);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteULLong'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WriteStr of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_WriteStr00
static int tolua_LuaFramework_StreamDataAdapter_WriteStr00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryWriter* writer = ((iBinaryWriter*)  tolua_tousertype(tolua_S,2,0));
  const char* value = ((const char*)  tolua_tostring(tolua_S,3,0));
  {
   StreamDataAdapter::WriteStr(writer,value);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteStr'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadChar of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_ReadChar00
static int tolua_LuaFramework_StreamDataAdapter_ReadChar00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* reader = ((iBinaryReader*)  tolua_tousertype(tolua_S,2,0));
  {
   signed char tolua_ret = (signed char)  StreamDataAdapter::ReadChar(reader);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadChar'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadUChar of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_ReadUChar00
static int tolua_LuaFramework_StreamDataAdapter_ReadUChar00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* reader = ((iBinaryReader*)  tolua_tousertype(tolua_S,2,0));
  {
   unsigned char tolua_ret = (unsigned char)  StreamDataAdapter::ReadUChar(reader);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadUChar'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadShort of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_ReadShort00
static int tolua_LuaFramework_StreamDataAdapter_ReadShort00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* reader = ((iBinaryReader*)  tolua_tousertype(tolua_S,2,0));
  {
   signed short tolua_ret = (signed short)  StreamDataAdapter::ReadShort(reader);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadShort'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadUShort of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_ReadUShort00
static int tolua_LuaFramework_StreamDataAdapter_ReadUShort00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* reader = ((iBinaryReader*)  tolua_tousertype(tolua_S,2,0));
  {
   unsigned short tolua_ret = (unsigned short)  StreamDataAdapter::ReadUShort(reader);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadUShort'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadInt of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_ReadInt00
static int tolua_LuaFramework_StreamDataAdapter_ReadInt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* reader = ((iBinaryReader*)  tolua_tousertype(tolua_S,2,0));
  {
   signed int tolua_ret = (signed int)  StreamDataAdapter::ReadInt(reader);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadInt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadUInt of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_ReadUInt00
static int tolua_LuaFramework_StreamDataAdapter_ReadUInt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* reader = ((iBinaryReader*)  tolua_tousertype(tolua_S,2,0));
  {
   unsigned int tolua_ret = (unsigned int)  StreamDataAdapter::ReadUInt(reader);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadUInt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadFloat of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_ReadFloat00
static int tolua_LuaFramework_StreamDataAdapter_ReadFloat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* reader = ((iBinaryReader*)  tolua_tousertype(tolua_S,2,0));
  {
   float tolua_ret = (float)  StreamDataAdapter::ReadFloat(reader);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadFloat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadStr of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_ReadStr00
static int tolua_LuaFramework_StreamDataAdapter_ReadStr00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* reader = ((iBinaryReader*)  tolua_tousertype(tolua_S,2,0));
  {
   char* tolua_ret = (char*)  StreamDataAdapter::ReadStr(reader);
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadStr'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadLLong of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_ReadLLong00
static int tolua_LuaFramework_StreamDataAdapter_ReadLLong00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* reader = ((iBinaryReader*)  tolua_tousertype(tolua_S,2,0));
  {
   signed long long tolua_ret = (signed long long)  StreamDataAdapter::ReadLLong(reader);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadLLong'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReadULLong of class  StreamDataAdapter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_StreamDataAdapter_ReadULLong00
static int tolua_LuaFramework_StreamDataAdapter_ReadULLong00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"StreamDataAdapter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  iBinaryReader* reader = ((iBinaryReader*)  tolua_tousertype(tolua_S,2,0));
  {
   unsigned long long tolua_ret = (unsigned long long)  StreamDataAdapter::ReadULLong(reader);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadULLong'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rect of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_rect00
static int tolua_LuaFramework_VisibleRect_rect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCRect& tolua_ret = (CCRect&)  VisibleRect::rect();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"CCRect");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: center of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_center00
static int tolua_LuaFramework_VisibleRect_center00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCPoint& tolua_ret = (CCPoint&)  VisibleRect::center();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"CCPoint");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'center'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: top of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_top00
static int tolua_LuaFramework_VisibleRect_top00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCPoint& tolua_ret = (CCPoint&)  VisibleRect::top();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"CCPoint");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'top'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: topRight of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_topRight00
static int tolua_LuaFramework_VisibleRect_topRight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCPoint& tolua_ret = (CCPoint&)  VisibleRect::topRight();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"CCPoint");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'topRight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: right of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_right00
static int tolua_LuaFramework_VisibleRect_right00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCPoint& tolua_ret = (CCPoint&)  VisibleRect::right();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"CCPoint");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'right'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: bottomRight of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_bottomRight00
static int tolua_LuaFramework_VisibleRect_bottomRight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCPoint& tolua_ret = (CCPoint&)  VisibleRect::bottomRight();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"CCPoint");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'bottomRight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: bottom of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_bottom00
static int tolua_LuaFramework_VisibleRect_bottom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCPoint& tolua_ret = (CCPoint&)  VisibleRect::bottom();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"CCPoint");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'bottom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: bottomLeft of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_bottomLeft00
static int tolua_LuaFramework_VisibleRect_bottomLeft00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCPoint& tolua_ret = (CCPoint&)  VisibleRect::bottomLeft();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"CCPoint");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'bottomLeft'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: left of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_left00
static int tolua_LuaFramework_VisibleRect_left00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCPoint& tolua_ret = (CCPoint&)  VisibleRect::left();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"CCPoint");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'left'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: topLeft of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_topLeft00
static int tolua_LuaFramework_VisibleRect_topLeft00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCPoint& tolua_ret = (CCPoint&)  VisibleRect::topLeft();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"CCPoint");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'topLeft'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScaleXY of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_getScaleXY00
static int tolua_LuaFramework_VisibleRect_getScaleXY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCSize winSize = *((CCSize*)  tolua_tousertype(tolua_S,2,0));
  {
   CCPoint& tolua_ret = (CCPoint&)  VisibleRect::getScaleXY(winSize);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"CCPoint");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScaleXY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getNodeScale of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_getNodeScale00
static int tolua_LuaFramework_VisibleRect_getNodeScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNode* nd = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  CCSize size = *((CCSize*)  tolua_tousertype(tolua_S,3,0));
  {
   CCPoint& tolua_ret = (CCPoint&)  VisibleRect::getNodeScale(nd,size);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"CCPoint");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getNodeScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: autoScaleNode of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_autoScaleNode00
static int tolua_LuaFramework_VisibleRect_autoScaleNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCPoint",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNode* nd = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  CCPoint anchorPoint = *((CCPoint*)  tolua_tousertype(tolua_S,3,0));
  {
   VisibleRect::autoScaleNode(nd,anchorPoint);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'autoScaleNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SFGetScaleX of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_SFGetScaleX00
static int tolua_LuaFramework_VisibleRect_SFGetScaleX00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   float tolua_ret = (float)  VisibleRect::SFGetScaleX();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SFGetScaleX'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SFGetScaleY of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_SFGetScaleY00
static int tolua_LuaFramework_VisibleRect_SFGetScaleY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   float tolua_ret = (float)  VisibleRect::SFGetScaleY();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SFGetScaleY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SFGetScale of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_SFGetScale00
static int tolua_LuaFramework_VisibleRect_SFGetScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   float tolua_ret = (float)  VisibleRect::SFGetScale();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SFGetScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SFGetScaleOverOne of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_SFGetScaleOverOne00
static int tolua_LuaFramework_VisibleRect_SFGetScaleOverOne00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   float tolua_ret = (float)  VisibleRect::SFGetScaleOverOne();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SFGetScaleOverOne'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: sizeToFix of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_sizeToFix00
static int tolua_LuaFramework_VisibleRect_sizeToFix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCSize",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCSize size = *((CCSize*)  tolua_tousertype(tolua_S,2,0));
  int width = ((int)  tolua_tonumber(tolua_S,3,0));
  int height = ((int)  tolua_tonumber(tolua_S,4,0));
  {
   CCSize tolua_ret = (CCSize)  VisibleRect::sizeToFix(size,width,height);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCSize)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCSize));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'sizeToFix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: autoSizeNode of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_autoSizeNode00
static int tolua_LuaFramework_VisibleRect_autoSizeNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNode* node = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  VisibleRect::ScaleType type = ((VisibleRect::ScaleType) (int)  tolua_tonumber(tolua_S,3,VisibleRect::eScaleMin));
  {
   VisibleRect::autoSizeNode(node,type);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'autoSizeNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: autoSizeNodeForSmall of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_autoSizeNodeForSmall00
static int tolua_LuaFramework_VisibleRect_autoSizeNodeForSmall00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNode* node = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  {
   VisibleRect::autoSizeNodeForSmall(node);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'autoSizeNodeForSmall'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: autoFontSize of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_autoFontSize00
static int tolua_LuaFramework_VisibleRect_autoFontSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int fontSize = ((int)  tolua_tonumber(tolua_S,2,0));
  {
   int tolua_ret = (int)  VisibleRect::autoFontSize(fontSize);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'autoFontSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: relativePosition of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_relativePosition00
static int tolua_LuaFramework_VisibleRect_relativePosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNode* node = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  CCNode* target = ((CCNode*)  tolua_tousertype(tolua_S,3,0));
  unsigned int layout = (( unsigned int)  tolua_tonumber(tolua_S,4,LAYOUT_CENTER));
  {
   VisibleRect::relativePosition(node,target,layout);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'relativePosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: relativePosition of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_relativePosition01
static int tolua_LuaFramework_VisibleRect_relativePosition01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"CCPoint",0,&tolua_err)) ||
     !tolua_isboolean(tolua_S,6,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCNode* node = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  CCNode* target = ((CCNode*)  tolua_tousertype(tolua_S,3,0));
  unsigned int layout = (( unsigned int)  tolua_tonumber(tolua_S,4,0));
  CCPoint offset = *((CCPoint*)  tolua_tousertype(tolua_S,5,0));
  bool bAutoAdaptation = ((bool)  tolua_toboolean(tolua_S,6,true));
  {
   VisibleRect::relativePosition(node,target,layout,offset,bAutoAdaptation);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_VisibleRect_relativePosition00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: nodeSize of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_nodeSize00
static int tolua_LuaFramework_VisibleRect_nodeSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNode* node = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  {
   CCSize tolua_ret = (CCSize)  VisibleRect::nodeSize(node);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCSize)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCSize));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'nodeSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScaleSize of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_getScaleSize00
static int tolua_LuaFramework_VisibleRect_getScaleSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCSize size = *((CCSize*)  tolua_tousertype(tolua_S,2,0));
  {
   CCSize tolua_ret = (CCSize)  VisibleRect::getScaleSize(size);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCSize)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCSize));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScaleSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScalePoint of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_getScalePoint00
static int tolua_LuaFramework_VisibleRect_getScalePoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCPoint",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCPoint pt = *((CCPoint*)  tolua_tousertype(tolua_S,2,0));
  {
   CCPoint tolua_ret = (CCPoint)  VisibleRect::getScalePoint(pt);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCPoint)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCPoint));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScalePoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScaleLength of class  VisibleRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_VisibleRect_getScaleLength00
static int tolua_LuaFramework_VisibleRect_getScaleLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"VisibleRect",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  float length = ((float)  tolua_tonumber(tolua_S,2,0));
  {
   float tolua_ret = (float)  VisibleRect::getScaleLength(length);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScaleLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFPriorityNotificationObserver */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationObserver_new00
static int tolua_LuaFramework_SFPriorityNotificationObserver_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFPriorityNotificationObserver",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCObject",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"SEL_CallFuncO",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCObject* target = ((CCObject*)  tolua_tousertype(tolua_S,2,0));
  SEL_CallFuncO selector = *((SEL_CallFuncO*)  tolua_tousertype(tolua_S,3,0));
  {
   SFPriorityNotificationObserver* tolua_ret = (SFPriorityNotificationObserver*)  Mtolua_new((SFPriorityNotificationObserver)(target,selector));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFPriorityNotificationObserver");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFPriorityNotificationObserver */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationObserver_new00_local
static int tolua_LuaFramework_SFPriorityNotificationObserver_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFPriorityNotificationObserver",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCObject",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"SEL_CallFuncO",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCObject* target = ((CCObject*)  tolua_tousertype(tolua_S,2,0));
  SEL_CallFuncO selector = *((SEL_CallFuncO*)  tolua_tousertype(tolua_S,3,0));
  {
   SFPriorityNotificationObserver* tolua_ret = (SFPriorityNotificationObserver*)  Mtolua_new((SFPriorityNotificationObserver)(target,selector));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFPriorityNotificationObserver");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFPriorityNotificationObserver */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationObserver_new01
static int tolua_LuaFramework_SFPriorityNotificationObserver_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFPriorityNotificationObserver",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int nScriptHandler = ((int)  tolua_tonumber(tolua_S,2,0));
  {
   SFPriorityNotificationObserver* tolua_ret = (SFPriorityNotificationObserver*)  Mtolua_new((SFPriorityNotificationObserver)(nScriptHandler));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFPriorityNotificationObserver");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFPriorityNotificationObserver_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFPriorityNotificationObserver */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationObserver_new01_local
static int tolua_LuaFramework_SFPriorityNotificationObserver_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFPriorityNotificationObserver",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int nScriptHandler = ((int)  tolua_tonumber(tolua_S,2,0));
  {
   SFPriorityNotificationObserver* tolua_ret = (SFPriorityNotificationObserver*)  Mtolua_new((SFPriorityNotificationObserver)(nScriptHandler));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFPriorityNotificationObserver");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFPriorityNotificationObserver_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFPriorityNotificationObserver */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationObserver_delete00
static int tolua_LuaFramework_SFPriorityNotificationObserver_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPriorityNotificationObserver",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPriorityNotificationObserver* self = (SFPriorityNotificationObserver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: performSelector of class  SFPriorityNotificationObserver */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationObserver_performSelector00
static int tolua_LuaFramework_SFPriorityNotificationObserver_performSelector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPriorityNotificationObserver",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPriorityNotificationObserver* self = (SFPriorityNotificationObserver*)  tolua_tousertype(tolua_S,1,0);
  CCObject* obj = ((CCObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'performSelector'", NULL);
#endif
  {
   self->performSelector(obj);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'performSelector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: performSelector of class  SFPriorityNotificationObserver */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationObserver_performSelector01
static int tolua_LuaFramework_SFPriorityNotificationObserver_performSelector01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPriorityNotificationObserver",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFPriorityNotificationObserver* self = (SFPriorityNotificationObserver*)  tolua_tousertype(tolua_S,1,0);
  iBinaryReader* reader = ((iBinaryReader*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'performSelector'", NULL);
#endif
  {
   self->performSelector(reader);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_SFPriorityNotificationObserver_performSelector00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTarget of class  SFPriorityNotificationObserver */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationObserver_getTarget00
static int tolua_LuaFramework_SFPriorityNotificationObserver_getTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPriorityNotificationObserver",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPriorityNotificationObserver* self = (SFPriorityNotificationObserver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTarget'", NULL);
#endif
  {
   CCObject* tolua_ret = (CCObject*)  self->getTarget();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCObject");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSelector of class  SFPriorityNotificationObserver */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationObserver_getSelector00
static int tolua_LuaFramework_SFPriorityNotificationObserver_getSelector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPriorityNotificationObserver",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPriorityNotificationObserver* self = (SFPriorityNotificationObserver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSelector'", NULL);
#endif
  {
   SEL_CallFuncO tolua_ret = (SEL_CallFuncO)  self->getSelector();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((SEL_CallFuncO)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"SEL_CallFuncO");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(SEL_CallFuncO));
     tolua_pushusertype(tolua_S,tolua_obj,"SEL_CallFuncO");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSelector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScriptHandler of class  SFPriorityNotificationObserver */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationObserver_getScriptHandler00
static int tolua_LuaFramework_SFPriorityNotificationObserver_getScriptHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPriorityNotificationObserver",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPriorityNotificationObserver* self = (SFPriorityNotificationObserver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScriptHandler'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getScriptHandler();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScriptHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFPriorityNotificationCenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationCenter_new00
static int tolua_LuaFramework_SFPriorityNotificationCenter_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFPriorityNotificationCenter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFPriorityNotificationCenter* tolua_ret = (SFPriorityNotificationCenter*)  Mtolua_new((SFPriorityNotificationCenter)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFPriorityNotificationCenter");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFPriorityNotificationCenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationCenter_new00_local
static int tolua_LuaFramework_SFPriorityNotificationCenter_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFPriorityNotificationCenter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFPriorityNotificationCenter* tolua_ret = (SFPriorityNotificationCenter*)  Mtolua_new((SFPriorityNotificationCenter)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFPriorityNotificationCenter");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFPriorityNotificationCenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationCenter_delete00
static int tolua_LuaFramework_SFPriorityNotificationCenter_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPriorityNotificationCenter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPriorityNotificationCenter* self = (SFPriorityNotificationCenter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: sharedPriorityNotificationCenter of class  SFPriorityNotificationCenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationCenter_sharedPriorityNotificationCenter00
static int tolua_LuaFramework_SFPriorityNotificationCenter_sharedPriorityNotificationCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFPriorityNotificationCenter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFPriorityNotificationCenter* tolua_ret = (SFPriorityNotificationCenter*)  SFPriorityNotificationCenter::sharedPriorityNotificationCenter();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFPriorityNotificationCenter");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'sharedPriorityNotificationCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: purgePriorityNotificationCenter of class  SFPriorityNotificationCenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationCenter_purgePriorityNotificationCenter00
static int tolua_LuaFramework_SFPriorityNotificationCenter_purgePriorityNotificationCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFPriorityNotificationCenter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFPriorityNotificationCenter::purgePriorityNotificationCenter();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'purgePriorityNotificationCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addObserver of class  SFPriorityNotificationCenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationCenter_addObserver00
static int tolua_LuaFramework_SFPriorityNotificationCenter_addObserver00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPriorityNotificationCenter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !toluafix_isfunction(tolua_S,3,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPriorityNotificationCenter* self = (SFPriorityNotificationCenter*)  tolua_tousertype(tolua_S,1,0);
  int messageId = ((int)  tolua_tonumber(tolua_S,2,0));
  LUA_FUNCTION nScriptHandler = (  toluafix_ref_function(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addObserver'", NULL);
#endif
  {
   self->addObserver(messageId,nScriptHandler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addObserver'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeObserver of class  SFPriorityNotificationCenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationCenter_removeObserver00
static int tolua_LuaFramework_SFPriorityNotificationCenter_removeObserver00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPriorityNotificationCenter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCObject",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPriorityNotificationCenter* self = (SFPriorityNotificationCenter*)  tolua_tousertype(tolua_S,1,0);
  CCObject* target = ((CCObject*)  tolua_tousertype(tolua_S,2,0));
  int messageId = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeObserver'", NULL);
#endif
  {
   self->removeObserver(target,messageId);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeObserver'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeObserver of class  SFPriorityNotificationCenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationCenter_removeObserver01
static int tolua_LuaFramework_SFPriorityNotificationCenter_removeObserver01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPriorityNotificationCenter",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFPriorityNotificationCenter* self = (SFPriorityNotificationCenter*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION nScriptHandler = (  toluafix_ref_function(tolua_S,2,0));
  int messageId = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeObserver'", NULL);
#endif
  {
   self->removeObserver(nScriptHandler,messageId);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_SFPriorityNotificationCenter_removeObserver00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: postNotification of class  SFPriorityNotificationCenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationCenter_postNotification00
static int tolua_LuaFramework_SFPriorityNotificationCenter_postNotification00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPriorityNotificationCenter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPriorityNotificationCenter* self = (SFPriorityNotificationCenter*)  tolua_tousertype(tolua_S,1,0);
  int messageId = ((int)  tolua_tonumber(tolua_S,2,0));
  CCObject* object = ((CCObject*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'postNotification'", NULL);
#endif
  {
   self->postNotification(messageId,object);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'postNotification'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: postNotification of class  SFPriorityNotificationCenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPriorityNotificationCenter_postNotification01
static int tolua_LuaFramework_SFPriorityNotificationCenter_postNotification01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPriorityNotificationCenter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"iBinaryReader",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFPriorityNotificationCenter* self = (SFPriorityNotificationCenter*)  tolua_tousertype(tolua_S,1,0);
  int messageId = ((int)  tolua_tonumber(tolua_S,2,0));
  iBinaryReader* reader = ((iBinaryReader*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'postNotification'", NULL);
#endif
  {
   self->postNotification(messageId,reader);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_SFPriorityNotificationCenter_postNotification00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFSpriteAnimNotifyEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSpriteAnimNotifyEvent_new00
static int tolua_LuaFramework_SFSpriteAnimNotifyEvent_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFSpriteAnimNotifyEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFSpriteAnimNotifyEvent* tolua_ret = (SFSpriteAnimNotifyEvent*)  Mtolua_new((SFSpriteAnimNotifyEvent)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFSpriteAnimNotifyEvent");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFSpriteAnimNotifyEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSpriteAnimNotifyEvent_new00_local
static int tolua_LuaFramework_SFSpriteAnimNotifyEvent_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFSpriteAnimNotifyEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFSpriteAnimNotifyEvent* tolua_ret = (SFSpriteAnimNotifyEvent*)  Mtolua_new((SFSpriteAnimNotifyEvent)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFSpriteAnimNotifyEvent");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCurAction of class  SFSpriteAnimNotifyEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSpriteAnimNotifyEvent_getCurAction00
static int tolua_LuaFramework_SFSpriteAnimNotifyEvent_getCurAction00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFSpriteAnimNotifyEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFSpriteAnimNotifyEvent* self = (SFSpriteAnimNotifyEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCurAction'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getCurAction();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurAction'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getNotify of class  SFSpriteAnimNotifyEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSpriteAnimNotifyEvent_getNotify00
static int tolua_LuaFramework_SFSpriteAnimNotifyEvent_getNotify00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFSpriteAnimNotifyEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFSpriteAnimNotifyEvent* self = (SFSpriteAnimNotifyEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getNotify'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->getNotify();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getNotify'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFTouchEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchEvent_new00
static int tolua_LuaFramework_SFTouchEvent_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFTouchEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFTouchEvent* tolua_ret = (SFTouchEvent*)  Mtolua_new((SFTouchEvent)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTouchEvent");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFTouchEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchEvent_new00_local
static int tolua_LuaFramework_SFTouchEvent_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFTouchEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFTouchEvent* tolua_ret = (SFTouchEvent*)  Mtolua_new((SFTouchEvent)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTouchEvent");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMapX of class  SFTouchEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchEvent_getMapX00
static int tolua_LuaFramework_SFTouchEvent_getMapX00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTouchEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTouchEvent* self = (SFTouchEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMapX'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getMapX();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMapX'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMapY of class  SFTouchEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchEvent_getMapY00
static int tolua_LuaFramework_SFTouchEvent_getMapY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTouchEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTouchEvent* self = (SFTouchEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMapY'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getMapY();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMapY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMapCellX of class  SFTouchEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchEvent_getMapCellX00
static int tolua_LuaFramework_SFTouchEvent_getMapCellX00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTouchEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTouchEvent* self = (SFTouchEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMapCellX'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getMapCellX();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMapCellX'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMapCellY of class  SFTouchEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchEvent_getMapCellY00
static int tolua_LuaFramework_SFTouchEvent_getMapCellY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTouchEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTouchEvent* self = (SFTouchEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMapCellY'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getMapCellY();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMapCellY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScreenX of class  SFTouchEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchEvent_getScreenX00
static int tolua_LuaFramework_SFTouchEvent_getScreenX00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTouchEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTouchEvent* self = (SFTouchEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScreenX'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getScreenX();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScreenX'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScreenY of class  SFTouchEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchEvent_getScreenY00
static int tolua_LuaFramework_SFTouchEvent_getScreenY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTouchEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTouchEvent* self = (SFTouchEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScreenY'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getScreenY();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScreenY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFSpriteMovementEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSpriteMovementEvent_new00
static int tolua_LuaFramework_SFSpriteMovementEvent_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFSpriteMovementEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFSpriteMovementEvent* tolua_ret = (SFSpriteMovementEvent*)  Mtolua_new((SFSpriteMovementEvent)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFSpriteMovementEvent");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFSpriteMovementEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSpriteMovementEvent_new00_local
static int tolua_LuaFramework_SFSpriteMovementEvent_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFSpriteMovementEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFSpriteMovementEvent* tolua_ret = (SFSpriteMovementEvent*)  Mtolua_new((SFSpriteMovementEvent)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFSpriteMovementEvent");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFSpriteMovementEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSpriteMovementEvent_new01
static int tolua_LuaFramework_SFSpriteMovementEvent_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFSpriteMovementEvent",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   SFSpriteMovementEvent* tolua_ret = (SFSpriteMovementEvent*)  Mtolua_new((SFSpriteMovementEvent)(x,y));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFSpriteMovementEvent");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFSpriteMovementEvent_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFSpriteMovementEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSpriteMovementEvent_new01_local
static int tolua_LuaFramework_SFSpriteMovementEvent_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFSpriteMovementEvent",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   SFSpriteMovementEvent* tolua_ret = (SFSpriteMovementEvent*)  Mtolua_new((SFSpriteMovementEvent)(x,y));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFSpriteMovementEvent");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFSpriteMovementEvent_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMapX of class  SFSpriteMovementEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSpriteMovementEvent_getMapX00
static int tolua_LuaFramework_SFSpriteMovementEvent_getMapX00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFSpriteMovementEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFSpriteMovementEvent* self = (SFSpriteMovementEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMapX'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getMapX();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMapX'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMapY of class  SFSpriteMovementEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSpriteMovementEvent_getMapY00
static int tolua_LuaFramework_SFSpriteMovementEvent_getMapY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFSpriteMovementEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFSpriteMovementEvent* self = (SFSpriteMovementEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMapY'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getMapY();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMapY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isBeginGo of class  SFSpriteMovementEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSpriteMovementEvent_isBeginGo00
static int tolua_LuaFramework_SFSpriteMovementEvent_isBeginGo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFSpriteMovementEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFSpriteMovementEvent* self = (SFSpriteMovementEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isBeginGo'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isBeginGo();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isBeginGo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isBeginStop of class  SFSpriteMovementEvent */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSpriteMovementEvent_isBeginStop00
static int tolua_LuaFramework_SFSpriteMovementEvent_isBeginStop00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFSpriteMovementEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFSpriteMovementEvent* self = (SFSpriteMovementEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isBeginStop'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isBeginStop();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isBeginStop'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: release of class  CCObject */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCObject_release00
static int tolua_LuaFramework_CCObject_release00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCObject* self = (CCObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'release'", NULL);
#endif
  {
   self->release();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'release'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: retain of class  CCObject */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCObject_retain00
static int tolua_LuaFramework_CCObject_retain00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCObject* self = (CCObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'retain'", NULL);
#endif
  {
   self->retain();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'retain'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isSingleReference of class  CCObject */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCObject_isSingleReference00
static int tolua_LuaFramework_CCObject_isSingleReference00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCObject* self = (CCObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isSingleReference'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isSingleReference();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isSingleReference'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: retainCount of class  CCObject */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCObject_retainCount00
static int tolua_LuaFramework_CCObject_retainCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCObject* self = (CCObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'retainCount'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->retainCount();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'retainCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isEqual of class  CCObject */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCObject_isEqual00
static int tolua_LuaFramework_CCObject_isEqual00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCObject",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const CCObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCObject* self = (CCObject*)  tolua_tousertype(tolua_S,1,0);
  const CCObject* pObject = ((const CCObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isEqual'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isEqual(pObject);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isEqual'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: copy of class  CCObject */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCObject_copy00
static int tolua_LuaFramework_CCObject_copy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCObject* self = (CCObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'copy'", NULL);
#endif
  {
   CCObject* tolua_ret = (CCObject*)  self->copy();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCObject");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'copy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: autorelease of class  CCObject */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCObject_autorelease00
static int tolua_LuaFramework_CCObject_autorelease00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCObject* self = (CCObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'autorelease'", NULL);
#endif
  {
   CCObject* tolua_ret = (CCObject*)  self->autorelease();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCObject");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'autorelease'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPoint_new00
static int tolua_LuaFramework_SFPoint_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFPoint* tolua_ret = (SFPoint*)  Mtolua_new((SFPoint)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFPoint");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPoint_new00_local
static int tolua_LuaFramework_SFPoint_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFPoint* tolua_ret = (SFPoint*)  Mtolua_new((SFPoint)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPoint_new01
static int tolua_LuaFramework_SFPoint_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFPoint",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   SFPoint* tolua_ret = (SFPoint*)  Mtolua_new((SFPoint)(x,y));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFPoint");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFPoint_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPoint_new01_local
static int tolua_LuaFramework_SFPoint_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFPoint",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   SFPoint* tolua_ret = (SFPoint*)  Mtolua_new((SFPoint)(x,y));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFPoint_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPoint_new02
static int tolua_LuaFramework_SFPoint_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFPoint",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const SFPoint",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const SFPoint* other = ((const SFPoint*)  tolua_tousertype(tolua_S,2,0));
  {
   SFPoint* tolua_ret = (SFPoint*)  Mtolua_new((SFPoint)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFPoint");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFPoint_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPoint_new02_local
static int tolua_LuaFramework_SFPoint_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFPoint",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const SFPoint",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const SFPoint* other = ((const SFPoint*)  tolua_tousertype(tolua_S,2,0));
  {
   SFPoint* tolua_ret = (SFPoint*)  Mtolua_new((SFPoint)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFPoint_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPoint of class  SFPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPoint_setPoint00
static int tolua_LuaFramework_SFPoint_setPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPoint",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPoint* self = (SFPoint*)  tolua_tousertype(tolua_S,1,0);
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPoint'", NULL);
#endif
  {
   self->setPoint(x,y);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getX of class  SFPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPoint_getX00
static int tolua_LuaFramework_SFPoint_getX00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPoint* self = (SFPoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getX'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getX();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getX'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getY of class  SFPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPoint_getY00
static int tolua_LuaFramework_SFPoint_getY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPoint* self = (SFPoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getY'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getY();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFSize */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSize_new00
static int tolua_LuaFramework_SFSize_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFSize",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFSize* tolua_ret = (SFSize*)  Mtolua_new((SFSize)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFSize");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFSize */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSize_new00_local
static int tolua_LuaFramework_SFSize_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFSize",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFSize* tolua_ret = (SFSize*)  Mtolua_new((SFSize)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFSize */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSize_new01
static int tolua_LuaFramework_SFSize_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFSize",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int width = ((int)  tolua_tonumber(tolua_S,2,0));
  int height = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   SFSize* tolua_ret = (SFSize*)  Mtolua_new((SFSize)(width,height));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFSize");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFSize_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFSize */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSize_new01_local
static int tolua_LuaFramework_SFSize_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFSize",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int width = ((int)  tolua_tonumber(tolua_S,2,0));
  int height = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   SFSize* tolua_ret = (SFSize*)  Mtolua_new((SFSize)(width,height));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFSize_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFSize */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSize_new02
static int tolua_LuaFramework_SFSize_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFSize",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const SFSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const SFSize* other = ((const SFSize*)  tolua_tousertype(tolua_S,2,0));
  {
   SFSize* tolua_ret = (SFSize*)  Mtolua_new((SFSize)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFSize");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFSize_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFSize */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSize_new02_local
static int tolua_LuaFramework_SFSize_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFSize",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const SFSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const SFSize* other = ((const SFSize*)  tolua_tousertype(tolua_S,2,0));
  {
   SFSize* tolua_ret = (SFSize*)  Mtolua_new((SFSize)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFSize_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSize of class  SFSize */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSize_setSize00
static int tolua_LuaFramework_SFSize_setSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFSize",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFSize* self = (SFSize*)  tolua_tousertype(tolua_S,1,0);
  int width = ((int)  tolua_tonumber(tolua_S,2,0));
  int height = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSize'", NULL);
#endif
  {
   self->setSize(width,height);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getWidth of class  SFSize */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSize_getWidth00
static int tolua_LuaFramework_SFSize_getWidth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFSize",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFSize* self = (SFSize*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getWidth'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getWidth();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getWidth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getHeight of class  SFSize */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFSize_getHeight00
static int tolua_LuaFramework_SFSize_getHeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFSize",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFSize* self = (SFSize*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getHeight'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getHeight();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getHeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_new00
static int tolua_LuaFramework_SFRect_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFRect* tolua_ret = (SFRect*)  Mtolua_new((SFRect)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFRect");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_new00_local
static int tolua_LuaFramework_SFRect_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFRect* tolua_ret = (SFRect*)  Mtolua_new((SFRect)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFRect");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_new01
static int tolua_LuaFramework_SFRect_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFRect",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
  int width = ((int)  tolua_tonumber(tolua_S,4,0));
  int height = ((int)  tolua_tonumber(tolua_S,5,0));
  {
   SFRect* tolua_ret = (SFRect*)  Mtolua_new((SFRect)(x,y,width,height));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFRect");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFRect_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_new01_local
static int tolua_LuaFramework_SFRect_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFRect",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
  int width = ((int)  tolua_tonumber(tolua_S,4,0));
  int height = ((int)  tolua_tonumber(tolua_S,5,0));
  {
   SFRect* tolua_ret = (SFRect*)  Mtolua_new((SFRect)(x,y,width,height));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFRect");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFRect_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_new02
static int tolua_LuaFramework_SFRect_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFRect",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const SFRect",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const SFRect* other = ((const SFRect*)  tolua_tousertype(tolua_S,2,0));
  {
   SFRect* tolua_ret = (SFRect*)  Mtolua_new((SFRect)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFRect");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFRect_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_new02_local
static int tolua_LuaFramework_SFRect_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFRect",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const SFRect",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const SFRect* other = ((const SFRect*)  tolua_tousertype(tolua_S,2,0));
  {
   SFRect* tolua_ret = (SFRect*)  Mtolua_new((SFRect)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFRect");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFRect_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRect of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_setRect00
static int tolua_LuaFramework_SFRect_setRect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRect",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRect* self = (SFRect*)  tolua_tousertype(tolua_S,1,0);
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
  int width = ((int)  tolua_tonumber(tolua_S,4,0));
  int height = ((int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRect'", NULL);
#endif
  {
   self->setRect(x,y,width,height);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMinX of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_getMinX00
static int tolua_LuaFramework_SFRect_getMinX00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFRect* self = (const SFRect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMinX'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getMinX();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMinX'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMidX of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_getMidX00
static int tolua_LuaFramework_SFRect_getMidX00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFRect* self = (const SFRect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMidX'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getMidX();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMidX'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaxX of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_getMaxX00
static int tolua_LuaFramework_SFRect_getMaxX00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFRect* self = (const SFRect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaxX'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getMaxX();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaxX'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMinY of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_getMinY00
static int tolua_LuaFramework_SFRect_getMinY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFRect* self = (const SFRect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMinY'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getMinY();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMinY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMidY of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_getMidY00
static int tolua_LuaFramework_SFRect_getMidY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFRect* self = (const SFRect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMidY'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getMidY();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMidY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaxY of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_getMaxY00
static int tolua_LuaFramework_SFRect_getMaxY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFRect* self = (const SFRect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaxY'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getMaxY();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaxY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOrigin of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_setOrigin00
static int tolua_LuaFramework_SFRect_setOrigin00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRect",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRect* self = (SFRect*)  tolua_tousertype(tolua_S,1,0);
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOrigin'", NULL);
#endif
  {
   self->setOrigin(x,y);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOrigin'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRect of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_setRect01
static int tolua_LuaFramework_SFRect_setRect01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRect",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFRect* self = (SFRect*)  tolua_tousertype(tolua_S,1,0);
  int width = ((int)  tolua_tonumber(tolua_S,2,0));
  int height = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRect'", NULL);
#endif
  {
   self->setRect(width,height);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_SFRect_setRect00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: containsPoint of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_containsPoint00
static int tolua_LuaFramework_SFRect_containsPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFRect",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFRect* self = (const SFRect*)  tolua_tousertype(tolua_S,1,0);
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'containsPoint'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->containsPoint(x,y);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'containsPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: containsPoint of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_containsPoint01
static int tolua_LuaFramework_SFRect_containsPoint01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFRect",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const SFPoint",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const SFRect* self = (const SFRect*)  tolua_tousertype(tolua_S,1,0);
  const SFPoint* point = ((const SFPoint*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'containsPoint'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->containsPoint(*point);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFRect_containsPoint00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: intersectsRect of class  SFRect */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRect_intersectsRect00
static int tolua_LuaFramework_SFRect_intersectsRect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFRect",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const SFRect",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFRect* self = (const SFRect*)  tolua_tousertype(tolua_S,1,0);
  const SFRect* rect = ((const SFRect*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'intersectsRect'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->intersectsRect(*rect);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'intersectsRect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_new00
static int tolua_LuaFramework_SFBaseControl_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFBaseControl* tolua_ret = (SFBaseControl*)  Mtolua_new((SFBaseControl)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFBaseControl");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_new00_local
static int tolua_LuaFramework_SFBaseControl_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFBaseControl* tolua_ret = (SFBaseControl*)  Mtolua_new((SFBaseControl)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFBaseControl");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_delete00
static int tolua_LuaFramework_SFBaseControl_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getOpacity of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_getOpacity00
static int tolua_LuaFramework_SFBaseControl_getOpacity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getOpacity'", NULL);
#endif
  {
   unsigned char tolua_ret = (unsigned char)  self->getOpacity();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOpacity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOpacity of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_setOpacity00
static int tolua_LuaFramework_SFBaseControl_setOpacity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
  unsigned char var = ((unsigned char)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOpacity'", NULL);
#endif
  {
   self->setOpacity(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOpacity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getColor of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_getColor00
static int tolua_LuaFramework_SFBaseControl_getColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getColor'", NULL);
#endif
  {
   const ccColor3B& tolua_ret = (const ccColor3B&)  self->getColor();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const ccColor3B");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setColor of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_setColor00
static int tolua_LuaFramework_SFBaseControl_setColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const ccColor3B",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
  const ccColor3B* var = ((const ccColor3B*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setColor'", NULL);
#endif
  {
   self->setColor(*var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isOpacityModifyRGB of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_isOpacityModifyRGB00
static int tolua_LuaFramework_SFBaseControl_isOpacityModifyRGB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isOpacityModifyRGB'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isOpacityModifyRGB();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isOpacityModifyRGB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOpacityModifyRGB of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_setOpacityModifyRGB00
static int tolua_LuaFramework_SFBaseControl_setOpacityModifyRGB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
  bool bOpacityModifyRGB = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOpacityModifyRGB'", NULL);
#endif
  {
   self->setOpacityModifyRGB(bOpacityModifyRGB);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOpacityModifyRGB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_init00
static int tolua_LuaFramework_SFBaseControl_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setControlName of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_setControlName00
static int tolua_LuaFramework_SFBaseControl_setControlName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setControlName'", NULL);
#endif
  {
   self->setControlName(name);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setControlName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getControlName of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_getControlName00
static int tolua_LuaFramework_SFBaseControl_getControlName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getControlName'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->getControlName();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getControlName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setImageKey of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_setImageKey00
static int tolua_LuaFramework_SFBaseControl_setImageKey00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
  const char* imageKey = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setImageKey'", NULL);
#endif
  {
   self->setImageKey(imageKey);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setImageKey'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getImageKey of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_getImageKey00
static int tolua_LuaFramework_SFBaseControl_getImageKey00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getImageKey'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->getImageKey();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getImageKey'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTitleKey of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_setTitleKey00
static int tolua_LuaFramework_SFBaseControl_setTitleKey00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
  const char* titleKey = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTitleKey'", NULL);
#endif
  {
   self->setTitleKey(titleKey);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTitleKey'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTitleKey of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_getTitleKey00
static int tolua_LuaFramework_SFBaseControl_getTitleKey00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTitleKey'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->getTitleKey();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTitleKey'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addTargetWithActionForControlEvents of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_addTargetWithActionForControlEvents00
static int tolua_LuaFramework_SFBaseControl_addTargetWithActionForControlEvents00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCObject",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"SEL_CCControlHandler",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
  CCObject* target = ((CCObject*)  tolua_tousertype(tolua_S,2,0));
  SEL_CCControlHandler action = *((SEL_CCControlHandler*)  tolua_tousertype(tolua_S,3,0));
  unsigned int controlEvents = (( unsigned int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addTargetWithActionForControlEvents'", NULL);
#endif
  {
   self->addTargetWithActionForControlEvents(target,action,controlEvents);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addTargetWithActionForControlEvents'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addTargetWithActionForControlEvents of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_addTargetWithActionForControlEvents01
static int tolua_LuaFramework_SFBaseControl_addTargetWithActionForControlEvents01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION nHandler = (  toluafix_ref_function(tolua_S,2,0));
  unsigned int controlEvents = (( unsigned int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addTargetWithActionForControlEvents'", NULL);
#endif
  {
   self->addTargetWithActionForControlEvents(nHandler,controlEvents);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_SFBaseControl_addTargetWithActionForControlEvents00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: sendActionsForControlEvents of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_sendActionsForControlEvents00
static int tolua_LuaFramework_SFBaseControl_sendActionsForControlEvents00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
  unsigned int controlEvents = (( unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'sendActionsForControlEvents'", NULL);
#endif
  {
   self->sendActionsForControlEvents(controlEvents);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'sendActionsForControlEvents'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTouchAreaDelta of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_setTouchAreaDelta00
static int tolua_LuaFramework_SFBaseControl_setTouchAreaDelta00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
  float deltaLeft = ((float)  tolua_tonumber(tolua_S,2,0));
  float deltaRight = ((float)  tolua_tonumber(tolua_S,3,0));
  float deltaTop = ((float)  tolua_tonumber(tolua_S,4,0));
  float deltaButtom = ((float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTouchAreaDelta'", NULL);
#endif
  {
   self->setTouchAreaDelta(deltaLeft,deltaRight,deltaTop,deltaButtom);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTouchAreaDelta'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTouchAreaScale of class  SFBaseControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFBaseControl_setTouchAreaScale00
static int tolua_LuaFramework_SFBaseControl_setTouchAreaScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFBaseControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFBaseControl* self = (SFBaseControl*)  tolua_tousertype(tolua_S,1,0);
  float scale = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTouchAreaScale'", NULL);
#endif
  {
   self->setTouchAreaScale(scale);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTouchAreaScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  CCScrollViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollViewDelegate_delete00
static int tolua_LuaFramework_CCScrollViewDelegate_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollViewDelegate",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollViewDelegate* self = (CCScrollViewDelegate*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: scrollViewDidScroll of class  CCScrollViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollViewDelegate_scrollViewDidScroll00
static int tolua_LuaFramework_CCScrollViewDelegate_scrollViewDidScroll00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollViewDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollViewDelegate* self = (CCScrollViewDelegate*)  tolua_tousertype(tolua_S,1,0);
  CCScrollView* view = ((CCScrollView*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'scrollViewDidScroll'", NULL);
#endif
  {
   self->scrollViewDidScroll(view);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'scrollViewDidScroll'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: scrollViewDidZoom of class  CCScrollViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollViewDelegate_scrollViewDidZoom00
static int tolua_LuaFramework_CCScrollViewDelegate_scrollViewDidZoom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollViewDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollViewDelegate* self = (CCScrollViewDelegate*)  tolua_tousertype(tolua_S,1,0);
  CCScrollView* view = ((CCScrollView*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'scrollViewDidZoom'", NULL);
#endif
  {
   self->scrollViewDidZoom(view);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'scrollViewDidZoom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_new00
static int tolua_LuaFramework_CCScrollView_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCScrollView* tolua_ret = (CCScrollView*)  Mtolua_new((CCScrollView)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScrollView");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_new00_local
static int tolua_LuaFramework_CCScrollView_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCScrollView* tolua_ret = (CCScrollView*)  Mtolua_new((CCScrollView)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScrollView");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_delete00
static int tolua_LuaFramework_CCScrollView_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onExit of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_onExit00
static int tolua_LuaFramework_CCScrollView_onExit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onExit'", NULL);
#endif
  {
   self->onExit();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onExit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_init00
static int tolua_LuaFramework_CCScrollView_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: registerWithTouchDispatcher of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_registerWithTouchDispatcher00
static int tolua_LuaFramework_CCScrollView_registerWithTouchDispatcher00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'registerWithTouchDispatcher'", NULL);
#endif
  {
   self->registerWithTouchDispatcher();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'registerWithTouchDispatcher'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_create00
static int tolua_LuaFramework_CCScrollView_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCSize",0,&tolua_err)) ||
     !tolua_isusertype(tolua_S,3,"CCNode",1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCSize size = *((CCSize*)  tolua_tousertype(tolua_S,2,0));
  CCNode* container = ((CCNode*)  tolua_tousertype(tolua_S,3,NULL));
  {
   CCScrollView* tolua_ret = (CCScrollView*)  CCScrollView::create(size,container);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScrollView");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_create01
static int tolua_LuaFramework_CCScrollView_create01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  {
   CCScrollView* tolua_ret = (CCScrollView*)  CCScrollView::create();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScrollView");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCScrollView_create00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithViewSize of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_initWithViewSize00
static int tolua_LuaFramework_CCScrollView_initWithViewSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCSize",0,&tolua_err)) ||
     !tolua_isusertype(tolua_S,3,"CCNode",1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCSize size = *((CCSize*)  tolua_tousertype(tolua_S,2,0));
  CCNode* container = ((CCNode*)  tolua_tousertype(tolua_S,3,NULL));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithViewSize'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithViewSize(size,container);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithViewSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setContentOffset of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_setContentOffset00
static int tolua_LuaFramework_CCScrollView_setContentOffset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCPoint",0,&tolua_err)) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCPoint offset = *((CCPoint*)  tolua_tousertype(tolua_S,2,0));
  bool animated = ((bool)  tolua_toboolean(tolua_S,3,false));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setContentOffset'", NULL);
#endif
  {
   self->setContentOffset(offset,animated);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setContentOffset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getContentOffset of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_getContentOffset00
static int tolua_LuaFramework_CCScrollView_getContentOffset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getContentOffset'", NULL);
#endif
  {
   CCPoint tolua_ret = (CCPoint)  self->getContentOffset();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCPoint)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCPoint));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getContentOffset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setContentOffsetInDuration of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_setContentOffsetInDuration00
static int tolua_LuaFramework_CCScrollView_setContentOffsetInDuration00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCPoint",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCPoint offset = *((CCPoint*)  tolua_tousertype(tolua_S,2,0));
  float dt = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setContentOffsetInDuration'", NULL);
#endif
  {
   self->setContentOffsetInDuration(offset,dt);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setContentOffsetInDuration'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setZoomScale of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_setZoomScale00
static int tolua_LuaFramework_CCScrollView_setZoomScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  float s = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setZoomScale'", NULL);
#endif
  {
   self->setZoomScale(s);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setZoomScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setZoomScale of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_setZoomScale01
static int tolua_LuaFramework_CCScrollView_setZoomScale01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  float s = ((float)  tolua_tonumber(tolua_S,2,0));
  bool animated = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setZoomScale'", NULL);
#endif
  {
   self->setZoomScale(s,animated);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_CCScrollView_setZoomScale00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getZoomScale of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_getZoomScale00
static int tolua_LuaFramework_CCScrollView_getZoomScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getZoomScale'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getZoomScale();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getZoomScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setZoomScaleInDuration of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_setZoomScaleInDuration00
static int tolua_LuaFramework_CCScrollView_setZoomScaleInDuration00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  float s = ((float)  tolua_tonumber(tolua_S,2,0));
  float dt = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setZoomScaleInDuration'", NULL);
#endif
  {
   self->setZoomScaleInDuration(s,dt);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setZoomScaleInDuration'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: minContainerOffset of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_minContainerOffset00
static int tolua_LuaFramework_CCScrollView_minContainerOffset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'minContainerOffset'", NULL);
#endif
  {
   CCPoint tolua_ret = (CCPoint)  self->minContainerOffset();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCPoint)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCPoint));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'minContainerOffset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: maxContainerOffset of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_maxContainerOffset00
static int tolua_LuaFramework_CCScrollView_maxContainerOffset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'maxContainerOffset'", NULL);
#endif
  {
   CCPoint tolua_ret = (CCPoint)  self->maxContainerOffset();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCPoint)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCPoint));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'maxContainerOffset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isNodeVisible of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_isNodeVisible00
static int tolua_LuaFramework_CCScrollView_isNodeVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCNode* node = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isNodeVisible'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isNodeVisible(node);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isNodeVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: pause of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_pause00
static int tolua_LuaFramework_CCScrollView_pause00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCObject* sender = ((CCObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'pause'", NULL);
#endif
  {
   self->pause(sender);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'pause'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: resume of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_resume00
static int tolua_LuaFramework_CCScrollView_resume00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCObject* sender = ((CCObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'resume'", NULL);
#endif
  {
   self->resume(sender);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'resume'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isDragging of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_isDragging00
static int tolua_LuaFramework_CCScrollView_isDragging00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isDragging'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isDragging();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isDragging'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isTouchMoved of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_isTouchMoved00
static int tolua_LuaFramework_CCScrollView_isTouchMoved00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isTouchMoved'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isTouchMoved();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isTouchMoved'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isBounceable of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_isBounceable00
static int tolua_LuaFramework_CCScrollView_isBounceable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isBounceable'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isBounceable();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isBounceable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBounceable of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_setBounceable00
static int tolua_LuaFramework_CCScrollView_setBounceable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  bool bBounceable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBounceable'", NULL);
#endif
  {
   self->setBounceable(bBounceable);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBounceable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getViewSize of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_getViewSize00
static int tolua_LuaFramework_CCScrollView_getViewSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getViewSize'", NULL);
#endif
  {
   CCSize tolua_ret = (CCSize)  self->getViewSize();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCSize)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCSize));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getViewSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setViewSize of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_setViewSize00
static int tolua_LuaFramework_CCScrollView_setViewSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCSize size = *((CCSize*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setViewSize'", NULL);
#endif
  {
   self->setViewSize(size);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setViewSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getContainer of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_getContainer00
static int tolua_LuaFramework_CCScrollView_getContainer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getContainer'", NULL);
#endif
  {
   CCNode* tolua_ret = (CCNode*)  self->getContainer();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getContainer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setContainer of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_setContainer00
static int tolua_LuaFramework_CCScrollView_setContainer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCNode* pContainer = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setContainer'", NULL);
#endif
  {
   self->setContainer(pContainer);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setContainer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDirection of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_getDirection00
static int tolua_LuaFramework_CCScrollView_getDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDirection'", NULL);
#endif
  {
   CCScrollViewDirection tolua_ret = (CCScrollViewDirection)  self->getDirection();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDirection of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_setDirection00
static int tolua_LuaFramework_CCScrollView_setDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCScrollViewDirection eDirection = ((CCScrollViewDirection) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDirection'", NULL);
#endif
  {
   self->setDirection(eDirection);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDelegate of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_getDelegate00
static int tolua_LuaFramework_CCScrollView_getDelegate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDelegate'", NULL);
#endif
  {
   CCScrollViewDelegate* tolua_ret = (CCScrollViewDelegate*)  self->getDelegate();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScrollViewDelegate");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDelegate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDelegate of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_setDelegate00
static int tolua_LuaFramework_CCScrollView_setDelegate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScrollViewDelegate",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCScrollViewDelegate* pDelegate = ((CCScrollViewDelegate*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDelegate'", NULL);
#endif
  {
   self->setDelegate(pDelegate);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDelegate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ccTouchBegan of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_ccTouchBegan00
static int tolua_LuaFramework_CCScrollView_ccTouchBegan00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ccTouchBegan'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->ccTouchBegan(pTouch,pEvent);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ccTouchBegan'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ccTouchMoved of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_ccTouchMoved00
static int tolua_LuaFramework_CCScrollView_ccTouchMoved00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ccTouchMoved'", NULL);
#endif
  {
   self->ccTouchMoved(pTouch,pEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ccTouchMoved'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ccTouchEnded of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_ccTouchEnded00
static int tolua_LuaFramework_CCScrollView_ccTouchEnded00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ccTouchEnded'", NULL);
#endif
  {
   self->ccTouchEnded(pTouch,pEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ccTouchEnded'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ccTouchCancelled of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_ccTouchCancelled00
static int tolua_LuaFramework_CCScrollView_ccTouchCancelled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ccTouchCancelled'", NULL);
#endif
  {
   self->ccTouchCancelled(pTouch,pEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ccTouchCancelled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setContentSize of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_setContentSize00
static int tolua_LuaFramework_CCScrollView_setContentSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  const CCSize* size = ((const CCSize*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setContentSize'", NULL);
#endif
  {
   self->setContentSize(*size);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setContentSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getContentSize of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_getContentSize00
static int tolua_LuaFramework_CCScrollView_getContentSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getContentSize'", NULL);
#endif
  {
   const CCSize& tolua_ret = (const CCSize&)  self->getContentSize();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const CCSize");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getContentSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: updateInset of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_updateInset00
static int tolua_LuaFramework_CCScrollView_updateInset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'updateInset'", NULL);
#endif
  {
   self->updateInset();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'updateInset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isClippingToBounds of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_isClippingToBounds00
static int tolua_LuaFramework_CCScrollView_isClippingToBounds00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isClippingToBounds'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isClippingToBounds();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isClippingToBounds'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setClippingToBounds of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_setClippingToBounds00
static int tolua_LuaFramework_CCScrollView_setClippingToBounds00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  bool bClippingToBounds = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setClippingToBounds'", NULL);
#endif
  {
   self->setClippingToBounds(bClippingToBounds);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setClippingToBounds'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: visit of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_visit00
static int tolua_LuaFramework_CCScrollView_visit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'visit'", NULL);
#endif
  {
   self->visit();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'visit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addChild of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_addChild00
static int tolua_LuaFramework_CCScrollView_addChild00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCNode* child = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  int zOrder = ((int)  tolua_tonumber(tolua_S,3,0));
  int tag = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addChild'", NULL);
#endif
  {
   self->addChild(child,zOrder,tag);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addChild'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addChild of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_addChild01
static int tolua_LuaFramework_CCScrollView_addChild01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCNode* child = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  int zOrder = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addChild'", NULL);
#endif
  {
   self->addChild(child,zOrder);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_CCScrollView_addChild00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: addChild of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_addChild02
static int tolua_LuaFramework_CCScrollView_addChild02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCNode* child = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addChild'", NULL);
#endif
  {
   self->addChild(child);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_CCScrollView_addChild01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTouchEnabled of class  CCScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScrollView_setTouchEnabled00
static int tolua_LuaFramework_CCScrollView_setTouchEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScrollView",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScrollView* self = (CCScrollView*)  tolua_tousertype(tolua_S,1,0);
  bool e = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTouchEnabled'", NULL);
#endif
  {
   self->setTouchEnabled(e);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTouchEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_new00
static int tolua_LuaFramework_CCScale9Sprite_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCScale9Sprite* tolua_ret = (CCScale9Sprite*)  Mtolua_new((CCScale9Sprite)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScale9Sprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_new00_local
static int tolua_LuaFramework_CCScale9Sprite_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCScale9Sprite* tolua_ret = (CCScale9Sprite*)  Mtolua_new((CCScale9Sprite)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScale9Sprite");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_delete00
static int tolua_LuaFramework_CCScale9Sprite_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getOriginalSize of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_getOriginalSize00
static int tolua_LuaFramework_CCScale9Sprite_getOriginalSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCScale9Sprite* self = (const CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getOriginalSize'", NULL);
#endif
  {
   CCSize tolua_ret = (CCSize)  self->getOriginalSize();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCSize)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCSize));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOriginalSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPreferredSize of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_getPreferredSize00
static int tolua_LuaFramework_CCScale9Sprite_getPreferredSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPreferredSize'", NULL);
#endif
  {
   CCSize tolua_ret = (CCSize)  self->getPreferredSize();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCSize)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCSize));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPreferredSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPreferredSize of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_setPreferredSize00
static int tolua_LuaFramework_CCScale9Sprite_setPreferredSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  CCSize var = *((CCSize*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPreferredSize'", NULL);
#endif
  {
   self->setPreferredSize(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPreferredSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCapInsets of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_getCapInsets00
static int tolua_LuaFramework_CCScale9Sprite_getCapInsets00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCapInsets'", NULL);
#endif
  {
   CCRect tolua_ret = (CCRect)  self->getCapInsets();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCRect)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCRect");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCRect));
     tolua_pushusertype(tolua_S,tolua_obj,"CCRect");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCapInsets'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCapInsets of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_setCapInsets00
static int tolua_LuaFramework_CCScale9Sprite_setCapInsets00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCRect",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  CCRect var = *((CCRect*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCapInsets'", NULL);
#endif
  {
   self->setCapInsets(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCapInsets'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInsetLeft of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_getInsetLeft00
static int tolua_LuaFramework_CCScale9Sprite_getInsetLeft00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInsetLeft'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getInsetLeft();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInsetLeft'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setInsetLeft of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_setInsetLeft00
static int tolua_LuaFramework_CCScale9Sprite_setInsetLeft00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  float var = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setInsetLeft'", NULL);
#endif
  {
   self->setInsetLeft(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setInsetLeft'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInsetTop of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_getInsetTop00
static int tolua_LuaFramework_CCScale9Sprite_getInsetTop00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInsetTop'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getInsetTop();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInsetTop'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setInsetTop of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_setInsetTop00
static int tolua_LuaFramework_CCScale9Sprite_setInsetTop00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  float var = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setInsetTop'", NULL);
#endif
  {
   self->setInsetTop(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setInsetTop'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInsetRight of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_getInsetRight00
static int tolua_LuaFramework_CCScale9Sprite_getInsetRight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInsetRight'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getInsetRight();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInsetRight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setInsetRight of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_setInsetRight00
static int tolua_LuaFramework_CCScale9Sprite_setInsetRight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  float var = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setInsetRight'", NULL);
#endif
  {
   self->setInsetRight(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setInsetRight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInsetBottom of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_getInsetBottom00
static int tolua_LuaFramework_CCScale9Sprite_getInsetBottom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInsetBottom'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getInsetBottom();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInsetBottom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setInsetBottom of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_setInsetBottom00
static int tolua_LuaFramework_CCScale9Sprite_setInsetBottom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  float var = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setInsetBottom'", NULL);
#endif
  {
   self->setInsetBottom(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setInsetBottom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setContentSize of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_setContentSize00
static int tolua_LuaFramework_CCScale9Sprite_setContentSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  const CCSize* size = ((const CCSize*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setContentSize'", NULL);
#endif
  {
   self->setContentSize(*size);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setContentSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: visit of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_visit00
static int tolua_LuaFramework_CCScale9Sprite_visit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'visit'", NULL);
#endif
  {
   self->visit();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'visit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_init00
static int tolua_LuaFramework_CCScale9Sprite_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithBatchNode of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_initWithBatchNode00
static int tolua_LuaFramework_CCScale9Sprite_initWithBatchNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCSpriteBatchNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCRect",0,&tolua_err)) ||
     !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"CCRect",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  CCSpriteBatchNode* batchnode = ((CCSpriteBatchNode*)  tolua_tousertype(tolua_S,2,0));
  CCRect rect = *((CCRect*)  tolua_tousertype(tolua_S,3,0));
  bool rotated = ((bool)  tolua_toboolean(tolua_S,4,0));
  CCRect capInsets = *((CCRect*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithBatchNode'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithBatchNode(batchnode,rect,rotated,capInsets);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithBatchNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithBatchNode of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_initWithBatchNode01
static int tolua_LuaFramework_CCScale9Sprite_initWithBatchNode01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCSpriteBatchNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCRect",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"CCRect",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  CCSpriteBatchNode* batchnode = ((CCSpriteBatchNode*)  tolua_tousertype(tolua_S,2,0));
  CCRect rect = *((CCRect*)  tolua_tousertype(tolua_S,3,0));
  CCRect capInsets = *((CCRect*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithBatchNode'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithBatchNode(batchnode,rect,capInsets);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCScale9Sprite_initWithBatchNode00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithFile of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_initWithFile00
static int tolua_LuaFramework_CCScale9Sprite_initWithFile00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCRect",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"CCRect",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  const char* file = ((const char*)  tolua_tostring(tolua_S,2,0));
  CCRect rect = *((CCRect*)  tolua_tousertype(tolua_S,3,0));
  CCRect capInsets = *((CCRect*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithFile'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithFile(file,rect,capInsets);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithFile'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_create00
static int tolua_LuaFramework_CCScale9Sprite_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCRect",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"CCRect",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* file = ((const char*)  tolua_tostring(tolua_S,2,0));
  CCRect rect = *((CCRect*)  tolua_tousertype(tolua_S,3,0));
  CCRect capInsets = *((CCRect*)  tolua_tousertype(tolua_S,4,0));
  {
   CCScale9Sprite* tolua_ret = (CCScale9Sprite*)  CCScale9Sprite::create(file,rect,capInsets);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScale9Sprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithFile of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_initWithFile01
static int tolua_LuaFramework_CCScale9Sprite_initWithFile01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCRect",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  const char* file = ((const char*)  tolua_tostring(tolua_S,2,0));
  CCRect rect = *((CCRect*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithFile'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithFile(file,rect);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCScale9Sprite_initWithFile00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_create01
static int tolua_LuaFramework_CCScale9Sprite_create01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCRect",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const char* file = ((const char*)  tolua_tostring(tolua_S,2,0));
  CCRect rect = *((CCRect*)  tolua_tousertype(tolua_S,3,0));
  {
   CCScale9Sprite* tolua_ret = (CCScale9Sprite*)  CCScale9Sprite::create(file,rect);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScale9Sprite");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCScale9Sprite_create00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithFile of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_initWithFile02
static int tolua_LuaFramework_CCScale9Sprite_initWithFile02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCRect",0,&tolua_err)) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  CCRect capInsets = *((CCRect*)  tolua_tousertype(tolua_S,2,0));
  const char* file = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithFile'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithFile(capInsets,file);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCScale9Sprite_initWithFile01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_create02
static int tolua_LuaFramework_CCScale9Sprite_create02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCRect",0,&tolua_err)) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCRect capInsets = *((CCRect*)  tolua_tousertype(tolua_S,2,0));
  const char* file = ((const char*)  tolua_tostring(tolua_S,3,0));
  {
   CCScale9Sprite* tolua_ret = (CCScale9Sprite*)  CCScale9Sprite::create(capInsets,file);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScale9Sprite");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCScale9Sprite_create01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithFile of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_initWithFile03
static int tolua_LuaFramework_CCScale9Sprite_initWithFile03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  const char* file = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithFile'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithFile(file);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCScale9Sprite_initWithFile02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_create03
static int tolua_LuaFramework_CCScale9Sprite_create03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const char* file = ((const char*)  tolua_tostring(tolua_S,2,0));
  {
   CCScale9Sprite* tolua_ret = (CCScale9Sprite*)  CCScale9Sprite::create(file);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScale9Sprite");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCScale9Sprite_create02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithSpriteFrame of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_initWithSpriteFrame00
static int tolua_LuaFramework_CCScale9Sprite_initWithSpriteFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCSpriteFrame",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCRect",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  CCSpriteFrame* spriteFrame = ((CCSpriteFrame*)  tolua_tousertype(tolua_S,2,0));
  CCRect capInsets = *((CCRect*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithSpriteFrame'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithSpriteFrame(spriteFrame,capInsets);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithSpriteFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createWithSpriteFrame of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_createWithSpriteFrame00
static int tolua_LuaFramework_CCScale9Sprite_createWithSpriteFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCSpriteFrame",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCRect",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCSpriteFrame* spriteFrame = ((CCSpriteFrame*)  tolua_tousertype(tolua_S,2,0));
  CCRect capInsets = *((CCRect*)  tolua_tousertype(tolua_S,3,0));
  {
   CCScale9Sprite* tolua_ret = (CCScale9Sprite*)  CCScale9Sprite::createWithSpriteFrame(spriteFrame,capInsets);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScale9Sprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createWithSpriteFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithSpriteFrame of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_initWithSpriteFrame01
static int tolua_LuaFramework_CCScale9Sprite_initWithSpriteFrame01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCSpriteFrame",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  CCSpriteFrame* spriteFrame = ((CCSpriteFrame*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithSpriteFrame'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithSpriteFrame(spriteFrame);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCScale9Sprite_initWithSpriteFrame00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createWithSpriteFrame of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_createWithSpriteFrame01
static int tolua_LuaFramework_CCScale9Sprite_createWithSpriteFrame01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCSpriteFrame",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCSpriteFrame* spriteFrame = ((CCSpriteFrame*)  tolua_tousertype(tolua_S,2,0));
  {
   CCScale9Sprite* tolua_ret = (CCScale9Sprite*)  CCScale9Sprite::createWithSpriteFrame(spriteFrame);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScale9Sprite");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCScale9Sprite_createWithSpriteFrame00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithSpriteFrameName of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_initWithSpriteFrameName00
static int tolua_LuaFramework_CCScale9Sprite_initWithSpriteFrameName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCRect",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  const char* spriteFrameName = ((const char*)  tolua_tostring(tolua_S,2,0));
  CCRect capInsets = *((CCRect*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithSpriteFrameName'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithSpriteFrameName(spriteFrameName,capInsets);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithSpriteFrameName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createWithSpriteFrameName of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_createWithSpriteFrameName00
static int tolua_LuaFramework_CCScale9Sprite_createWithSpriteFrameName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCRect",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* spriteFrameName = ((const char*)  tolua_tostring(tolua_S,2,0));
  CCRect capInsets = *((CCRect*)  tolua_tousertype(tolua_S,3,0));
  {
   CCScale9Sprite* tolua_ret = (CCScale9Sprite*)  CCScale9Sprite::createWithSpriteFrameName(spriteFrameName,capInsets);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScale9Sprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createWithSpriteFrameName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithSpriteFrameName of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_initWithSpriteFrameName01
static int tolua_LuaFramework_CCScale9Sprite_initWithSpriteFrameName01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  const char* spriteFrameName = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithSpriteFrameName'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithSpriteFrameName(spriteFrameName);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCScale9Sprite_initWithSpriteFrameName00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createWithSpriteFrameName of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_createWithSpriteFrameName01
static int tolua_LuaFramework_CCScale9Sprite_createWithSpriteFrameName01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const char* spriteFrameName = ((const char*)  tolua_tostring(tolua_S,2,0));
  {
   CCScale9Sprite* tolua_ret = (CCScale9Sprite*)  CCScale9Sprite::createWithSpriteFrameName(spriteFrameName);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScale9Sprite");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCScale9Sprite_createWithSpriteFrameName00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: resizableSpriteWithCapInsets of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_resizableSpriteWithCapInsets00
static int tolua_LuaFramework_CCScale9Sprite_resizableSpriteWithCapInsets00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCRect",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  CCRect capInsets = *((CCRect*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'resizableSpriteWithCapInsets'", NULL);
#endif
  {
   CCScale9Sprite* tolua_ret = (CCScale9Sprite*)  self->resizableSpriteWithCapInsets(capInsets);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScale9Sprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'resizableSpriteWithCapInsets'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_create04
static int tolua_LuaFramework_CCScale9Sprite_create04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  {
   CCScale9Sprite* tolua_ret = (CCScale9Sprite*)  CCScale9Sprite::create();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScale9Sprite");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCScale9Sprite_create03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOpacityModifyRGB of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_setOpacityModifyRGB00
static int tolua_LuaFramework_CCScale9Sprite_setOpacityModifyRGB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  bool bValue = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOpacityModifyRGB'", NULL);
#endif
  {
   self->setOpacityModifyRGB(bValue);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOpacityModifyRGB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isOpacityModifyRGB of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_isOpacityModifyRGB00
static int tolua_LuaFramework_CCScale9Sprite_isOpacityModifyRGB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isOpacityModifyRGB'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isOpacityModifyRGB();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isOpacityModifyRGB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOpacity of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_setOpacity00
static int tolua_LuaFramework_CCScale9Sprite_setOpacity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  GLubyte opacity = ((GLubyte)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOpacity'", NULL);
#endif
  {
   self->setOpacity(opacity);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOpacity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setColor of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_setColor00
static int tolua_LuaFramework_CCScale9Sprite_setColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const ccColor3B",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  const ccColor3B* color = ((const ccColor3B*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setColor'", NULL);
#endif
  {
   self->setColor(*color);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: updateWithBatchNode of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_updateWithBatchNode00
static int tolua_LuaFramework_CCScale9Sprite_updateWithBatchNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCSpriteBatchNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCRect",0,&tolua_err)) ||
     !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"CCRect",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  CCSpriteBatchNode* batchnode = ((CCSpriteBatchNode*)  tolua_tousertype(tolua_S,2,0));
  CCRect rect = *((CCRect*)  tolua_tousertype(tolua_S,3,0));
  bool rotated = ((bool)  tolua_toboolean(tolua_S,4,0));
  CCRect capInsets = *((CCRect*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'updateWithBatchNode'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->updateWithBatchNode(batchnode,rect,rotated,capInsets);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'updateWithBatchNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSpriteFrame of class  CCScale9Sprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCScale9Sprite_setSpriteFrame00
static int tolua_LuaFramework_CCScale9Sprite_setSpriteFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCSpriteFrame",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* self = (CCScale9Sprite*)  tolua_tousertype(tolua_S,1,0);
  CCSpriteFrame* spriteFrame = ((CCSpriteFrame*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSpriteFrame'", NULL);
#endif
  {
   self->setSpriteFrame(spriteFrame);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSpriteFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_new00
static int tolua_LuaFramework_CCNodeRGBA_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCNodeRGBA* tolua_ret = (CCNodeRGBA*)  Mtolua_new((CCNodeRGBA)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCNodeRGBA");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_new00_local
static int tolua_LuaFramework_CCNodeRGBA_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCNodeRGBA* tolua_ret = (CCNodeRGBA*)  Mtolua_new((CCNodeRGBA)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCNodeRGBA");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_delete00
static int tolua_LuaFramework_CCNodeRGBA_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNodeRGBA* self = (CCNodeRGBA*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_init00
static int tolua_LuaFramework_CCNodeRGBA_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNodeRGBA* self = (CCNodeRGBA*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getOpacity of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_getOpacity00
static int tolua_LuaFramework_CCNodeRGBA_getOpacity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNodeRGBA* self = (CCNodeRGBA*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getOpacity'", NULL);
#endif
  {
   GLubyte tolua_ret = (GLubyte)  self->getOpacity();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOpacity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDisplayedOpacity of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_getDisplayedOpacity00
static int tolua_LuaFramework_CCNodeRGBA_getDisplayedOpacity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNodeRGBA* self = (CCNodeRGBA*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDisplayedOpacity'", NULL);
#endif
  {
   GLubyte tolua_ret = (GLubyte)  self->getDisplayedOpacity();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDisplayedOpacity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOpacity of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_setOpacity00
static int tolua_LuaFramework_CCNodeRGBA_setOpacity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNodeRGBA* self = (CCNodeRGBA*)  tolua_tousertype(tolua_S,1,0);
  GLubyte opacity = ((GLubyte)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOpacity'", NULL);
#endif
  {
   self->setOpacity(opacity);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOpacity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: updateDisplayedOpacity of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_updateDisplayedOpacity00
static int tolua_LuaFramework_CCNodeRGBA_updateDisplayedOpacity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNodeRGBA* self = (CCNodeRGBA*)  tolua_tousertype(tolua_S,1,0);
  GLubyte parentOpacity = ((GLubyte)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'updateDisplayedOpacity'", NULL);
#endif
  {
   self->updateDisplayedOpacity(parentOpacity);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'updateDisplayedOpacity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isCascadeOpacityEnabled of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_isCascadeOpacityEnabled00
static int tolua_LuaFramework_CCNodeRGBA_isCascadeOpacityEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNodeRGBA* self = (CCNodeRGBA*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isCascadeOpacityEnabled'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isCascadeOpacityEnabled();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isCascadeOpacityEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCascadeOpacityEnabled of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_setCascadeOpacityEnabled00
static int tolua_LuaFramework_CCNodeRGBA_setCascadeOpacityEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNodeRGBA* self = (CCNodeRGBA*)  tolua_tousertype(tolua_S,1,0);
  bool cascadeOpacityEnabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCascadeOpacityEnabled'", NULL);
#endif
  {
   self->setCascadeOpacityEnabled(cascadeOpacityEnabled);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCascadeOpacityEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getColor of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_getColor00
static int tolua_LuaFramework_CCNodeRGBA_getColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNodeRGBA* self = (CCNodeRGBA*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getColor'", NULL);
#endif
  {
   const ccColor3B& tolua_ret = (const ccColor3B&)  self->getColor();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const ccColor3B");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDisplayedColor of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_getDisplayedColor00
static int tolua_LuaFramework_CCNodeRGBA_getDisplayedColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNodeRGBA* self = (CCNodeRGBA*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDisplayedColor'", NULL);
#endif
  {
   const ccColor3B& tolua_ret = (const ccColor3B&)  self->getDisplayedColor();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const ccColor3B");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDisplayedColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setColor of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_setColor00
static int tolua_LuaFramework_CCNodeRGBA_setColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const ccColor3B",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNodeRGBA* self = (CCNodeRGBA*)  tolua_tousertype(tolua_S,1,0);
  const ccColor3B* color = ((const ccColor3B*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setColor'", NULL);
#endif
  {
   self->setColor(*color);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: updateDisplayedColor of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_updateDisplayedColor00
static int tolua_LuaFramework_CCNodeRGBA_updateDisplayedColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const ccColor3B",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNodeRGBA* self = (CCNodeRGBA*)  tolua_tousertype(tolua_S,1,0);
  const ccColor3B* parentColor = ((const ccColor3B*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'updateDisplayedColor'", NULL);
#endif
  {
   self->updateDisplayedColor(*parentColor);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'updateDisplayedColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isCascadeColorEnabled of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_isCascadeColorEnabled00
static int tolua_LuaFramework_CCNodeRGBA_isCascadeColorEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNodeRGBA* self = (CCNodeRGBA*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isCascadeColorEnabled'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isCascadeColorEnabled();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isCascadeColorEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCascadeColorEnabled of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_setCascadeColorEnabled00
static int tolua_LuaFramework_CCNodeRGBA_setCascadeColorEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNodeRGBA* self = (CCNodeRGBA*)  tolua_tousertype(tolua_S,1,0);
  bool cascadeColorEnabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCascadeColorEnabled'", NULL);
#endif
  {
   self->setCascadeColorEnabled(cascadeColorEnabled);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCascadeColorEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOpacityModifyRGB of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_setOpacityModifyRGB00
static int tolua_LuaFramework_CCNodeRGBA_setOpacityModifyRGB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNodeRGBA* self = (CCNodeRGBA*)  tolua_tousertype(tolua_S,1,0);
  bool bValue = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOpacityModifyRGB'", NULL);
#endif
  {
   self->setOpacityModifyRGB(bValue);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOpacityModifyRGB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isOpacityModifyRGB of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCNodeRGBA_isOpacityModifyRGB00
static int tolua_LuaFramework_CCNodeRGBA_isOpacityModifyRGB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCNodeRGBA",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNodeRGBA* self = (CCNodeRGBA*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isOpacityModifyRGB'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isOpacityModifyRGB();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isOpacityModifyRGB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: __CCRGBAProtocol__ of class  CCNodeRGBA */
#ifndef TOLUA_DISABLE_tolua_get_CCNodeRGBA___CCRGBAProtocol__
static int tolua_get_CCNodeRGBA___CCRGBAProtocol__(lua_State* tolua_S)
{
  CCNodeRGBA* self = (CCNodeRGBA*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable '__CCRGBAProtocol__'",NULL);
#endif
#ifdef __cplusplus
   tolua_pushusertype(tolua_S,(void*)static_cast<CCRGBAProtocol*>(self), "CCRGBAProtocol");
#else
   tolua_pushusertype(tolua_S,(void*)((CCRGBAProtocol*)self), "CCRGBAProtocol");
#endif
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: getState of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_getState00
static int tolua_LuaFramework_CCControl_getState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControl* self = (const CCControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getState'", NULL);
#endif
  {
   unsigned int tolua_ret = ( unsigned int)  self->getState();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEnabled of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_setEnabled00
static int tolua_LuaFramework_CCControl_setEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
  bool bEnabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEnabled'", NULL);
#endif
  {
   self->setEnabled(bEnabled);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isEnabled of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_isEnabled00
static int tolua_LuaFramework_CCControl_isEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isEnabled'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isEnabled();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSelected of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_setSelected00
static int tolua_LuaFramework_CCControl_setSelected00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
  bool bSelected = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSelected'", NULL);
#endif
  {
   self->setSelected(bSelected);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSelected'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isSelected of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_isSelected00
static int tolua_LuaFramework_CCControl_isSelected00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isSelected'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isSelected();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isSelected'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setHighlighted of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_setHighlighted00
static int tolua_LuaFramework_CCControl_setHighlighted00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
  bool bHighlighted = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setHighlighted'", NULL);
#endif
  {
   self->setHighlighted(bHighlighted);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setHighlighted'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isHighlighted of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_isHighlighted00
static int tolua_LuaFramework_CCControl_isHighlighted00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isHighlighted'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isHighlighted();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isHighlighted'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: hasVisibleParents of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_hasVisibleParents00
static int tolua_LuaFramework_CCControl_hasVisibleParents00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'hasVisibleParents'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->hasVisibleParents();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'hasVisibleParents'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: needsLayout of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_needsLayout00
static int tolua_LuaFramework_CCControl_needsLayout00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'needsLayout'", NULL);
#endif
  {
   self->needsLayout();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'needsLayout'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isOpacityModifyRGB of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_isOpacityModifyRGB00
static int tolua_LuaFramework_CCControl_isOpacityModifyRGB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isOpacityModifyRGB'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isOpacityModifyRGB();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isOpacityModifyRGB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOpacityModifyRGB of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_setOpacityModifyRGB00
static int tolua_LuaFramework_CCControl_setOpacityModifyRGB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
  bool bOpacityModifyRGB = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOpacityModifyRGB'", NULL);
#endif
  {
   self->setOpacityModifyRGB(bOpacityModifyRGB);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOpacityModifyRGB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_new00
static int tolua_LuaFramework_CCControl_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCControl* tolua_ret = (CCControl*)  Mtolua_new((CCControl)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCControl");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_new00_local
static int tolua_LuaFramework_CCControl_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCControl* tolua_ret = (CCControl*)  Mtolua_new((CCControl)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCControl");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_init00
static int tolua_LuaFramework_CCControl_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_delete00
static int tolua_LuaFramework_CCControl_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onEnter of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_onEnter00
static int tolua_LuaFramework_CCControl_onEnter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onEnter'", NULL);
#endif
  {
   self->onEnter();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onEnter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onExit of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_onExit00
static int tolua_LuaFramework_CCControl_onExit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onExit'", NULL);
#endif
  {
   self->onExit();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onExit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: registerWithTouchDispatcher of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_registerWithTouchDispatcher00
static int tolua_LuaFramework_CCControl_registerWithTouchDispatcher00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'registerWithTouchDispatcher'", NULL);
#endif
  {
   self->registerWithTouchDispatcher();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'registerWithTouchDispatcher'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: sendActionsForControlEvents of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_sendActionsForControlEvents00
static int tolua_LuaFramework_CCControl_sendActionsForControlEvents00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
  unsigned int controlEvents = (( unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'sendActionsForControlEvents'", NULL);
#endif
  {
   self->sendActionsForControlEvents(controlEvents);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'sendActionsForControlEvents'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addTargetWithActionForControlEvents of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_addTargetWithActionForControlEvents00
static int tolua_LuaFramework_CCControl_addTargetWithActionForControlEvents00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCObject",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"SEL_CCControlHandler",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
  CCObject* target = ((CCObject*)  tolua_tousertype(tolua_S,2,0));
  SEL_CCControlHandler action = *((SEL_CCControlHandler*)  tolua_tousertype(tolua_S,3,0));
  unsigned int controlEvents = (( unsigned int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addTargetWithActionForControlEvents'", NULL);
#endif
  {
   self->addTargetWithActionForControlEvents(target,action,controlEvents);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addTargetWithActionForControlEvents'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addTargetWithActionForControlEvents of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_addTargetWithActionForControlEvents01
static int tolua_LuaFramework_CCControl_addTargetWithActionForControlEvents01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION nHandler = (  toluafix_ref_function(tolua_S,2,0));
  unsigned int controlEvents = (( unsigned int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addTargetWithActionForControlEvents'", NULL);
#endif
  {
   self->addTargetWithActionForControlEvents(nHandler,controlEvents);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_CCControl_addTargetWithActionForControlEvents00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeTargetWithActionForControlEvents of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_removeTargetWithActionForControlEvents00
static int tolua_LuaFramework_CCControl_removeTargetWithActionForControlEvents00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCObject",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"SEL_CCControlHandler",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
  CCObject* target = ((CCObject*)  tolua_tousertype(tolua_S,2,0));
  SEL_CCControlHandler action = *((SEL_CCControlHandler*)  tolua_tousertype(tolua_S,3,0));
  unsigned int controlEvents = (( unsigned int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeTargetWithActionForControlEvents'", NULL);
#endif
  {
   self->removeTargetWithActionForControlEvents(target,action,controlEvents);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeTargetWithActionForControlEvents'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTouchLocation of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_getTouchLocation00
static int tolua_LuaFramework_CCControl_getTouchLocation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* touch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTouchLocation'", NULL);
#endif
  {
   CCPoint tolua_ret = (CCPoint)  self->getTouchLocation(touch);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCPoint)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCPoint));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTouchLocation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isTouchInside of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_isTouchInside00
static int tolua_LuaFramework_CCControl_isTouchInside00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* touch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isTouchInside'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isTouchInside(touch);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isTouchInside'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTouchAreaDelta of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_setTouchAreaDelta00
static int tolua_LuaFramework_CCControl_setTouchAreaDelta00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
  float deltaLeft = ((float)  tolua_tonumber(tolua_S,2,0.0f));
  float deltaRight = ((float)  tolua_tonumber(tolua_S,3,0.0f));
  float deltaTop = ((float)  tolua_tonumber(tolua_S,4,0.0f));
  float deltaButtom = ((float)  tolua_tonumber(tolua_S,5,0.0f));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTouchAreaDelta'", NULL);
#endif
  {
   self->setTouchAreaDelta(deltaLeft,deltaRight,deltaTop,deltaButtom);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTouchAreaDelta'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTouchAreaScale of class  CCControl */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControl_setTouchAreaScale00
static int tolua_LuaFramework_CCControl_setTouchAreaScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControl* self = (CCControl*)  tolua_tousertype(tolua_S,1,0);
  float scale = ((float)  tolua_tonumber(tolua_S,2,0.0f));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTouchAreaScale'", NULL);
#endif
  {
   self->setTouchAreaScale(scale);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTouchAreaScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_new00
static int tolua_LuaFramework_CCControlButton_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCControlButton* tolua_ret = (CCControlButton*)  Mtolua_new((CCControlButton)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCControlButton");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_new00_local
static int tolua_LuaFramework_CCControlButton_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCControlButton* tolua_ret = (CCControlButton*)  Mtolua_new((CCControlButton)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCControlButton");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_delete00
static int tolua_LuaFramework_CCControlButton_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: needsLayout of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_needsLayout00
static int tolua_LuaFramework_CCControlButton_needsLayout00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'needsLayout'", NULL);
#endif
  {
   self->needsLayout();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'needsLayout'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEnabled of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setEnabled00
static int tolua_LuaFramework_CCControlButton_setEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  bool enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEnabled'", NULL);
#endif
  {
   self->setEnabled(enabled);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSelected of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setSelected00
static int tolua_LuaFramework_CCControlButton_setSelected00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  bool enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSelected'", NULL);
#endif
  {
   self->setSelected(enabled);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSelected'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setHighlighted of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setHighlighted00
static int tolua_LuaFramework_CCControlButton_setHighlighted00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  bool enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setHighlighted'", NULL);
#endif
  {
   self->setHighlighted(enabled);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setHighlighted'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCurrentTitle of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getCurrentTitle00
static int tolua_LuaFramework_CCControlButton_getCurrentTitle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlButton* self = (const CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCurrentTitle'", NULL);
#endif
  {
   CCString* tolua_ret = (CCString*)  self->getCurrentTitle();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCString");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurrentTitle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCurrentTitleColor of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getCurrentTitleColor00
static int tolua_LuaFramework_CCControlButton_getCurrentTitleColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlButton* self = (const CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCurrentTitleColor'", NULL);
#endif
  {
   const ccColor3B& tolua_ret = (const ccColor3B&)  self->getCurrentTitleColor();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const ccColor3B");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurrentTitleColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: doesAdjustBackgroundImage of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_doesAdjustBackgroundImage00
static int tolua_LuaFramework_CCControlButton_doesAdjustBackgroundImage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'doesAdjustBackgroundImage'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->doesAdjustBackgroundImage();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'doesAdjustBackgroundImage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAdjustBackgroundImage of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setAdjustBackgroundImage00
static int tolua_LuaFramework_CCControlButton_setAdjustBackgroundImage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  bool adjustBackgroundImage = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAdjustBackgroundImage'", NULL);
#endif
  {
   self->setAdjustBackgroundImage(adjustBackgroundImage);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAdjustBackgroundImage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTitleLabel of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getTitleLabel00
static int tolua_LuaFramework_CCControlButton_getTitleLabel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlButton* self = (const CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTitleLabel'", NULL);
#endif
  {
   CCNode* tolua_ret = (CCNode*)  self->getTitleLabel();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTitleLabel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTitleLabel of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setTitleLabel00
static int tolua_LuaFramework_CCControlButton_setTitleLabel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCNode* var = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTitleLabel'", NULL);
#endif
  {
   self->setTitleLabel(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTitleLabel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBackgroundSprite of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getBackgroundSprite00
static int tolua_LuaFramework_CCControlButton_getBackgroundSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlButton* self = (const CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBackgroundSprite'", NULL);
#endif
  {
   CCScale9Sprite* tolua_ret = (CCScale9Sprite*)  self->getBackgroundSprite();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScale9Sprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBackgroundSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBackgroundSprite of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setBackgroundSprite00
static int tolua_LuaFramework_CCControlButton_setBackgroundSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCScale9Sprite* var = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBackgroundSprite'", NULL);
#endif
  {
   self->setBackgroundSprite(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBackgroundSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPreferredSize of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getPreferredSize00
static int tolua_LuaFramework_CCControlButton_getPreferredSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPreferredSize'", NULL);
#endif
  {
   CCSize tolua_ret = (CCSize)  self->getPreferredSize();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCSize)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCSize));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPreferredSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPreferredSize of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setPreferredSize00
static int tolua_LuaFramework_CCControlButton_setPreferredSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCSize var = *((CCSize*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPreferredSize'", NULL);
#endif
  {
   self->setPreferredSize(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPreferredSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getZoomOnTouchDown of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getZoomOnTouchDown00
static int tolua_LuaFramework_CCControlButton_getZoomOnTouchDown00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getZoomOnTouchDown'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getZoomOnTouchDown();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getZoomOnTouchDown'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setZoomOnTouchDown of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setZoomOnTouchDown00
static int tolua_LuaFramework_CCControlButton_setZoomOnTouchDown00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  bool var = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setZoomOnTouchDown'", NULL);
#endif
  {
   self->setZoomOnTouchDown(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setZoomOnTouchDown'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLabelAnchorPoint of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getLabelAnchorPoint00
static int tolua_LuaFramework_CCControlButton_getLabelAnchorPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLabelAnchorPoint'", NULL);
#endif
  {
   CCPoint tolua_ret = (CCPoint)  self->getLabelAnchorPoint();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCPoint)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCPoint));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLabelAnchorPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLabelAnchorPoint of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setLabelAnchorPoint00
static int tolua_LuaFramework_CCControlButton_setLabelAnchorPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCPoint",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCPoint var = *((CCPoint*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLabelAnchorPoint'", NULL);
#endif
  {
   self->setLabelAnchorPoint(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLabelAnchorPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getOpacity of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getOpacity00
static int tolua_LuaFramework_CCControlButton_getOpacity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getOpacity'", NULL);
#endif
  {
   GLubyte tolua_ret = (GLubyte)  self->getOpacity();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOpacity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOpacity of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setOpacity00
static int tolua_LuaFramework_CCControlButton_setOpacity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  GLubyte var = ((GLubyte)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOpacity'", NULL);
#endif
  {
   self->setOpacity(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOpacity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isPushed of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_isPushed00
static int tolua_LuaFramework_CCControlButton_isPushed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isPushed'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isPushed();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isPushed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTitleDispatchTable of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getTitleDispatchTable00
static int tolua_LuaFramework_CCControlButton_getTitleDispatchTable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlButton* self = (const CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTitleDispatchTable'", NULL);
#endif
  {
   CCDictionary* tolua_ret = (CCDictionary*)  self->getTitleDispatchTable();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCDictionary");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTitleDispatchTable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTitleDispatchTable of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setTitleDispatchTable00
static int tolua_LuaFramework_CCControlButton_setTitleDispatchTable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCDictionary",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCDictionary* var = ((CCDictionary*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTitleDispatchTable'", NULL);
#endif
  {
   self->setTitleDispatchTable(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTitleDispatchTable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTitleColorDispatchTable of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getTitleColorDispatchTable00
static int tolua_LuaFramework_CCControlButton_getTitleColorDispatchTable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlButton* self = (const CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTitleColorDispatchTable'", NULL);
#endif
  {
   CCDictionary* tolua_ret = (CCDictionary*)  self->getTitleColorDispatchTable();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCDictionary");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTitleColorDispatchTable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTitleColorDispatchTable of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setTitleColorDispatchTable00
static int tolua_LuaFramework_CCControlButton_setTitleColorDispatchTable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCDictionary",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCDictionary* var = ((CCDictionary*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTitleColorDispatchTable'", NULL);
#endif
  {
   self->setTitleColorDispatchTable(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTitleColorDispatchTable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTitleLabelDispatchTable of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getTitleLabelDispatchTable00
static int tolua_LuaFramework_CCControlButton_getTitleLabelDispatchTable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlButton* self = (const CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTitleLabelDispatchTable'", NULL);
#endif
  {
   CCDictionary* tolua_ret = (CCDictionary*)  self->getTitleLabelDispatchTable();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCDictionary");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTitleLabelDispatchTable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTitleLabelDispatchTable of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setTitleLabelDispatchTable00
static int tolua_LuaFramework_CCControlButton_setTitleLabelDispatchTable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCDictionary",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCDictionary* var = ((CCDictionary*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTitleLabelDispatchTable'", NULL);
#endif
  {
   self->setTitleLabelDispatchTable(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTitleLabelDispatchTable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBackgroundSpriteDispatchTable of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getBackgroundSpriteDispatchTable00
static int tolua_LuaFramework_CCControlButton_getBackgroundSpriteDispatchTable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlButton* self = (const CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBackgroundSpriteDispatchTable'", NULL);
#endif
  {
   CCDictionary* tolua_ret = (CCDictionary*)  self->getBackgroundSpriteDispatchTable();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCDictionary");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBackgroundSpriteDispatchTable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBackgroundSpriteDispatchTable of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setBackgroundSpriteDispatchTable00
static int tolua_LuaFramework_CCControlButton_setBackgroundSpriteDispatchTable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCDictionary",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCDictionary* var = ((CCDictionary*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBackgroundSpriteDispatchTable'", NULL);
#endif
  {
   self->setBackgroundSpriteDispatchTable(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBackgroundSpriteDispatchTable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVerticalMargin of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getVerticalMargin00
static int tolua_LuaFramework_CCControlButton_getVerticalMargin00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlButton* self = (const CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVerticalMargin'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getVerticalMargin();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVerticalMargin'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getHorizontalOrigin of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getHorizontalOrigin00
static int tolua_LuaFramework_CCControlButton_getHorizontalOrigin00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlButton* self = (const CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getHorizontalOrigin'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getHorizontalOrigin();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getHorizontalOrigin'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMargins of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setMargins00
static int tolua_LuaFramework_CCControlButton_setMargins00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  int marginH = ((int)  tolua_tonumber(tolua_S,2,0));
  int marginV = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMargins'", NULL);
#endif
  {
   self->setMargins(marginH,marginV);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMargins'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_init00
static int tolua_LuaFramework_CCControlButton_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithLabelAndBackgroundSprite of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_initWithLabelAndBackgroundSprite00
static int tolua_LuaFramework_CCControlButton_initWithLabelAndBackgroundSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCNode* label = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  CCScale9Sprite* backgroundSprite = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithLabelAndBackgroundSprite'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithLabelAndBackgroundSprite(label,backgroundSprite);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithLabelAndBackgroundSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_create00
static int tolua_LuaFramework_CCControlButton_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNode* label = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  CCScale9Sprite* backgroundSprite = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,3,0));
  {
   CCControlButton* tolua_ret = (CCControlButton*)  CCControlButton::create(label,backgroundSprite);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCControlButton");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithTitleAndFontNameAndFontSize of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_initWithTitleAndFontNameAndFontSize00
static int tolua_LuaFramework_CCControlButton_initWithTitleAndFontNameAndFontSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  std::string title = ((std::string)  tolua_tocppstring(tolua_S,2,0));
  const char* fontName = ((const char*)  tolua_tostring(tolua_S,3,0));
  float fontSize = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithTitleAndFontNameAndFontSize'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithTitleAndFontNameAndFontSize(title,fontName,fontSize);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithTitleAndFontNameAndFontSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_create01
static int tolua_LuaFramework_CCControlButton_create01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  std::string title = ((std::string)  tolua_tocppstring(tolua_S,2,0));
  const char* fontName = ((const char*)  tolua_tostring(tolua_S,3,0));
  float fontSize = ((float)  tolua_tonumber(tolua_S,4,0));
  {
   CCControlButton* tolua_ret = (CCControlButton*)  CCControlButton::create(title,fontName,fontSize);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCControlButton");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCControlButton_create00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithBackgroundSprite of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_initWithBackgroundSprite00
static int tolua_LuaFramework_CCControlButton_initWithBackgroundSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCScale9Sprite* sprite = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithBackgroundSprite'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithBackgroundSprite(sprite);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithBackgroundSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_create02
static int tolua_LuaFramework_CCControlButton_create02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCScale9Sprite* sprite = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,2,0));
  {
   CCControlButton* tolua_ret = (CCControlButton*)  CCControlButton::create(sprite);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCControlButton");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCControlButton_create01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: ccTouchBegan of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_ccTouchBegan00
static int tolua_LuaFramework_CCControlButton_ccTouchBegan00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ccTouchBegan'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->ccTouchBegan(pTouch,pEvent);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ccTouchBegan'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ccTouchMoved of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_ccTouchMoved00
static int tolua_LuaFramework_CCControlButton_ccTouchMoved00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ccTouchMoved'", NULL);
#endif
  {
   self->ccTouchMoved(pTouch,pEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ccTouchMoved'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ccTouchEnded of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_ccTouchEnded00
static int tolua_LuaFramework_CCControlButton_ccTouchEnded00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ccTouchEnded'", NULL);
#endif
  {
   self->ccTouchEnded(pTouch,pEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ccTouchEnded'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ccTouchCancelled of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_ccTouchCancelled00
static int tolua_LuaFramework_CCControlButton_ccTouchCancelled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ccTouchCancelled'", NULL);
#endif
  {
   self->ccTouchCancelled(pTouch,pEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ccTouchCancelled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTitleString of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setTitleString00
static int tolua_LuaFramework_CCControlButton_setTitleString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCNode* titleNode = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  unsigned int state = (( unsigned int)  tolua_tonumber(tolua_S,3,CCControlStateNormal));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTitleString'", NULL);
#endif
  {
   self->setTitleString(titleNode,state);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTitleString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEnable of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setEnable00
static int tolua_LuaFramework_CCControlButton_setEnable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  bool enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEnable'", NULL);
#endif
  {
   self->setEnable(enabled);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEnable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setScaleDef of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setScaleDef00
static int tolua_LuaFramework_CCControlButton_setScaleDef00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  float f = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setScaleDef'", NULL);
#endif
  {
   self->setScaleDef(f);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setScaleDef'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOpacityDef of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setOpacityDef00
static int tolua_LuaFramework_CCControlButton_setOpacityDef00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  float var = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOpacityDef'", NULL);
#endif
  {
   self->setOpacityDef(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOpacityDef'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTitleForState of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getTitleForState00
static int tolua_LuaFramework_CCControlButton_getTitleForState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  unsigned int state = (( unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTitleForState'", NULL);
#endif
  {
   CCString* tolua_ret = (CCString*)  self->getTitleForState(state);
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCString");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTitleForState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTitleForState of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setTitleForState00
static int tolua_LuaFramework_CCControlButton_setTitleForState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCString",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCString* title = ((CCString*)  tolua_tousertype(tolua_S,2,0));
  unsigned int state = (( unsigned int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTitleForState'", NULL);
#endif
  {
   self->setTitleForState(title,state);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTitleForState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTitleColorForState of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getTitleColorForState00
static int tolua_LuaFramework_CCControlButton_getTitleColorForState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  unsigned int state = (( unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTitleColorForState'", NULL);
#endif
  {
   const ccColor3B tolua_ret = (const ccColor3B)  self->getTitleColorForState(state);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((ccColor3B)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"const ccColor3B");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(const ccColor3B));
     tolua_pushusertype(tolua_S,tolua_obj,"const ccColor3B");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTitleColorForState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTitleColorForState of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setTitleColorForState00
static int tolua_LuaFramework_CCControlButton_setTitleColorForState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"ccColor3B",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  ccColor3B color = *((ccColor3B*)  tolua_tousertype(tolua_S,2,0));
  unsigned int state = (( unsigned int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTitleColorForState'", NULL);
#endif
  {
   self->setTitleColorForState(color,state);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTitleColorForState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTitleLabelForState of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getTitleLabelForState00
static int tolua_LuaFramework_CCControlButton_getTitleLabelForState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  unsigned int state = (( unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTitleLabelForState'", NULL);
#endif
  {
   CCNode* tolua_ret = (CCNode*)  self->getTitleLabelForState(state);
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTitleLabelForState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTitleLabelForState of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setTitleLabelForState00
static int tolua_LuaFramework_CCControlButton_setTitleLabelForState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCNode* label = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  unsigned int state = (( unsigned int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTitleLabelForState'", NULL);
#endif
  {
   self->setTitleLabelForState(label,state);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTitleLabelForState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTitleTTFForState of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setTitleTTFForState00
static int tolua_LuaFramework_CCControlButton_setTitleTTFForState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  const char* fntFile = ((const char*)  tolua_tostring(tolua_S,2,0));
  unsigned int state = (( unsigned int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTitleTTFForState'", NULL);
#endif
  {
   self->setTitleTTFForState(fntFile,state);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTitleTTFForState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTitleTTFForState of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getTitleTTFForState00
static int tolua_LuaFramework_CCControlButton_getTitleTTFForState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  unsigned int state = (( unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTitleTTFForState'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->getTitleTTFForState(state);
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTitleTTFForState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTitleTTFSizeForState of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setTitleTTFSizeForState00
static int tolua_LuaFramework_CCControlButton_setTitleTTFSizeForState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  float size = ((float)  tolua_tonumber(tolua_S,2,0));
  unsigned int state = (( unsigned int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTitleTTFSizeForState'", NULL);
#endif
  {
   self->setTitleTTFSizeForState(size,state);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTitleTTFSizeForState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTitleTTFSizeForState of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getTitleTTFSizeForState00
static int tolua_LuaFramework_CCControlButton_getTitleTTFSizeForState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  unsigned int state = (( unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTitleTTFSizeForState'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getTitleTTFSizeForState(state);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTitleTTFSizeForState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTitleBMFontForState of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setTitleBMFontForState00
static int tolua_LuaFramework_CCControlButton_setTitleBMFontForState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  const char* fntFile = ((const char*)  tolua_tostring(tolua_S,2,0));
  unsigned int state = (( unsigned int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTitleBMFontForState'", NULL);
#endif
  {
   self->setTitleBMFontForState(fntFile,state);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTitleBMFontForState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTitleBMFontForState of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getTitleBMFontForState00
static int tolua_LuaFramework_CCControlButton_getTitleBMFontForState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  unsigned int state = (( unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTitleBMFontForState'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->getTitleBMFontForState(state);
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTitleBMFontForState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBackgroundSpriteForState of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_getBackgroundSpriteForState00
static int tolua_LuaFramework_CCControlButton_getBackgroundSpriteForState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  unsigned int state = (( unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBackgroundSpriteForState'", NULL);
#endif
  {
   CCScale9Sprite* tolua_ret = (CCScale9Sprite*)  self->getBackgroundSpriteForState(state);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScale9Sprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBackgroundSpriteForState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBackgroundSpriteForState of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setBackgroundSpriteForState00
static int tolua_LuaFramework_CCControlButton_setBackgroundSpriteForState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCScale9Sprite* sprite = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,2,0));
  unsigned int state = (( unsigned int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBackgroundSpriteForState'", NULL);
#endif
  {
   self->setBackgroundSpriteForState(sprite,state);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBackgroundSpriteForState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBackgroundSpriteFrameForState of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_setBackgroundSpriteFrameForState00
static int tolua_LuaFramework_CCControlButton_setBackgroundSpriteFrameForState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCSpriteFrame",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlButton* self = (CCControlButton*)  tolua_tousertype(tolua_S,1,0);
  CCSpriteFrame* spriteFrame = ((CCSpriteFrame*)  tolua_tousertype(tolua_S,2,0));
  unsigned int state = (( unsigned int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBackgroundSpriteFrameForState'", NULL);
#endif
  {
   self->setBackgroundSpriteFrameForState(spriteFrame,state);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBackgroundSpriteFrameForState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCControlButton */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlButton_create03
static int tolua_LuaFramework_CCControlButton_create03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  {
   CCControlButton* tolua_ret = (CCControlButton*)  CCControlButton::create();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCControlButton");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCControlButton_create02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  CCEditBoxDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBoxDelegate_delete00
static int tolua_LuaFramework_CCEditBoxDelegate_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBoxDelegate",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBoxDelegate* self = (CCEditBoxDelegate*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: editBoxEditingDidBegin of class  CCEditBoxDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBoxDelegate_editBoxEditingDidBegin00
static int tolua_LuaFramework_CCEditBoxDelegate_editBoxEditingDidBegin00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBoxDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCEditBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBoxDelegate* self = (CCEditBoxDelegate*)  tolua_tousertype(tolua_S,1,0);
  CCEditBox* editBox = ((CCEditBox*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'editBoxEditingDidBegin'", NULL);
#endif
  {
   self->editBoxEditingDidBegin(editBox);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'editBoxEditingDidBegin'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: editBoxEditingDidEnd of class  CCEditBoxDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBoxDelegate_editBoxEditingDidEnd00
static int tolua_LuaFramework_CCEditBoxDelegate_editBoxEditingDidEnd00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBoxDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCEditBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBoxDelegate* self = (CCEditBoxDelegate*)  tolua_tousertype(tolua_S,1,0);
  CCEditBox* editBox = ((CCEditBox*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'editBoxEditingDidEnd'", NULL);
#endif
  {
   self->editBoxEditingDidEnd(editBox);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'editBoxEditingDidEnd'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: editBoxTextChanged of class  CCEditBoxDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBoxDelegate_editBoxTextChanged00
static int tolua_LuaFramework_CCEditBoxDelegate_editBoxTextChanged00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBoxDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCEditBox",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBoxDelegate* self = (CCEditBoxDelegate*)  tolua_tousertype(tolua_S,1,0);
  CCEditBox* editBox = ((CCEditBox*)  tolua_tousertype(tolua_S,2,0));
  const std::string text = ((const std::string)  tolua_tocppstring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'editBoxTextChanged'", NULL);
#endif
  {
   self->editBoxTextChanged(editBox,text);
   tolua_pushcppstring(tolua_S,(const char*)text);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'editBoxTextChanged'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: editBoxReturn of class  CCEditBoxDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBoxDelegate_editBoxReturn00
static int tolua_LuaFramework_CCEditBoxDelegate_editBoxReturn00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBoxDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCEditBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBoxDelegate* self = (CCEditBoxDelegate*)  tolua_tousertype(tolua_S,1,0);
  CCEditBox* editBox = ((CCEditBox*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'editBoxReturn'", NULL);
#endif
  {
   self->editBoxReturn(editBox);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'editBoxReturn'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_new00
static int tolua_LuaFramework_CCEditBox_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCEditBox* tolua_ret = (CCEditBox*)  Mtolua_new((CCEditBox)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCEditBox");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_new00_local
static int tolua_LuaFramework_CCEditBox_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCEditBox* tolua_ret = (CCEditBox*)  Mtolua_new((CCEditBox)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCEditBox");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_delete00
static int tolua_LuaFramework_CCEditBox_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_create00
static int tolua_LuaFramework_CCEditBox_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const CCSize",0,&tolua_err)) ||
     !tolua_isusertype(tolua_S,3,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"CCScale9Sprite",1,&tolua_err) ||
     !tolua_isusertype(tolua_S,5,"CCScale9Sprite",1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCSize* size = ((const CCSize*)  tolua_tousertype(tolua_S,2,0));
  CCScale9Sprite* pNormal9SpriteBg = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,3,0));
  CCScale9Sprite* pPressed9SpriteBg = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,4,NULL));
  CCScale9Sprite* pDisabled9SpriteBg = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,5,NULL));
  {
   CCEditBox* tolua_ret = (CCEditBox*)  CCEditBox::create(*size,pNormal9SpriteBg,pPressed9SpriteBg,pDisabled9SpriteBg);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCEditBox");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithSizeAndBackgroundSprite of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_initWithSizeAndBackgroundSprite00
static int tolua_LuaFramework_CCEditBox_initWithSizeAndBackgroundSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const CCSize",0,&tolua_err)) ||
     !tolua_isusertype(tolua_S,3,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  const CCSize* size = ((const CCSize*)  tolua_tousertype(tolua_S,2,0));
  CCScale9Sprite* pNormal9SpriteBg = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithSizeAndBackgroundSprite'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithSizeAndBackgroundSprite(*size,pNormal9SpriteBg);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithSizeAndBackgroundSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDelegate of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setDelegate00
static int tolua_LuaFramework_CCEditBox_setDelegate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCEditBoxDelegate",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  CCEditBoxDelegate* pDelegate = ((CCEditBoxDelegate*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDelegate'", NULL);
#endif
  {
   self->setDelegate(pDelegate);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDelegate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDelegate of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_getDelegate00
static int tolua_LuaFramework_CCEditBox_getDelegate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDelegate'", NULL);
#endif
  {
   CCEditBoxDelegate* tolua_ret = (CCEditBoxDelegate*)  self->getDelegate();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCEditBoxDelegate");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDelegate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: registerScriptEditBoxHandler of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_registerScriptEditBoxHandler00
static int tolua_LuaFramework_CCEditBox_registerScriptEditBoxHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION handler = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'registerScriptEditBoxHandler'", NULL);
#endif
  {
   self->registerScriptEditBoxHandler(handler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'registerScriptEditBoxHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: unregisterScriptEditBoxHandler of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_unregisterScriptEditBoxHandler00
static int tolua_LuaFramework_CCEditBox_unregisterScriptEditBoxHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'unregisterScriptEditBoxHandler'", NULL);
#endif
  {
   self->unregisterScriptEditBoxHandler();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'unregisterScriptEditBoxHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScriptEditBoxHandler of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_getScriptEditBoxHandler00
static int tolua_LuaFramework_CCEditBox_getScriptEditBoxHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScriptEditBoxHandler'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getScriptEditBoxHandler();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScriptEditBoxHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setText of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setText00
static int tolua_LuaFramework_CCEditBox_setText00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  const char* pText = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setText'", NULL);
#endif
  {
   self->setText(pText);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setText'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getText of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_getText00
static int tolua_LuaFramework_CCEditBox_getText00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getText'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->getText();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getText'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFont of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setFont00
static int tolua_LuaFramework_CCEditBox_setFont00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  const char* pFontName = ((const char*)  tolua_tostring(tolua_S,2,0));
  int fontSize = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFont'", NULL);
#endif
  {
   self->setFont(pFontName,fontSize);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFont'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFontName of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setFontName00
static int tolua_LuaFramework_CCEditBox_setFontName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  const char* pFontName = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFontName'", NULL);
#endif
  {
   self->setFontName(pFontName);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFontName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFontSize of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setFontSize00
static int tolua_LuaFramework_CCEditBox_setFontSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  int fontSize = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFontSize'", NULL);
#endif
  {
   self->setFontSize(fontSize);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFontSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFontColor of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setFontColor00
static int tolua_LuaFramework_CCEditBox_setFontColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const ccColor3B",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  const ccColor3B* color = ((const ccColor3B*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFontColor'", NULL);
#endif
  {
   self->setFontColor(*color);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFontColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPlaceholderFont of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setPlaceholderFont00
static int tolua_LuaFramework_CCEditBox_setPlaceholderFont00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  const char* pFontName = ((const char*)  tolua_tostring(tolua_S,2,0));
  int fontSize = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPlaceholderFont'", NULL);
#endif
  {
   self->setPlaceholderFont(pFontName,fontSize);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPlaceholderFont'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPlaceholderFontName of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setPlaceholderFontName00
static int tolua_LuaFramework_CCEditBox_setPlaceholderFontName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  const char* pFontName = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPlaceholderFontName'", NULL);
#endif
  {
   self->setPlaceholderFontName(pFontName);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPlaceholderFontName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPlaceholderFontSize of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setPlaceholderFontSize00
static int tolua_LuaFramework_CCEditBox_setPlaceholderFontSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  int fontSize = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPlaceholderFontSize'", NULL);
#endif
  {
   self->setPlaceholderFontSize(fontSize);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPlaceholderFontSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPlaceholderFontColor of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setPlaceholderFontColor00
static int tolua_LuaFramework_CCEditBox_setPlaceholderFontColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const ccColor3B",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  const ccColor3B* color = ((const ccColor3B*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPlaceholderFontColor'", NULL);
#endif
  {
   self->setPlaceholderFontColor(*color);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPlaceholderFontColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPlaceHolder of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setPlaceHolder00
static int tolua_LuaFramework_CCEditBox_setPlaceHolder00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  const char* pText = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPlaceHolder'", NULL);
#endif
  {
   self->setPlaceHolder(pText);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPlaceHolder'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPlaceHolder of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_getPlaceHolder00
static int tolua_LuaFramework_CCEditBox_getPlaceHolder00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPlaceHolder'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->getPlaceHolder();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPlaceHolder'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setInputMode of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setInputMode00
static int tolua_LuaFramework_CCEditBox_setInputMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  EditBoxInputMode inputMode = ((EditBoxInputMode) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setInputMode'", NULL);
#endif
  {
   self->setInputMode(inputMode);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setInputMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaxLength of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setMaxLength00
static int tolua_LuaFramework_CCEditBox_setMaxLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  int maxLength = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaxLength'", NULL);
#endif
  {
   self->setMaxLength(maxLength);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaxLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaxLength of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_getMaxLength00
static int tolua_LuaFramework_CCEditBox_getMaxLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaxLength'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getMaxLength();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaxLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setInputFlag of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setInputFlag00
static int tolua_LuaFramework_CCEditBox_setInputFlag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  EditBoxInputFlag inputFlag = ((EditBoxInputFlag) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setInputFlag'", NULL);
#endif
  {
   self->setInputFlag(inputFlag);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setInputFlag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setReturnType of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setReturnType00
static int tolua_LuaFramework_CCEditBox_setReturnType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  KeyboardReturnType returnType = ((KeyboardReturnType) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setReturnType'", NULL);
#endif
  {
   self->setReturnType(returnType);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setReturnType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPosition of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setPosition00
static int tolua_LuaFramework_CCEditBox_setPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const CCPoint",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  const CCPoint* pos = ((const CCPoint*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPosition'", NULL);
#endif
  {
   self->setPosition(*pos);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setVisible of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setVisible00
static int tolua_LuaFramework_CCEditBox_setVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  bool visible = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setVisible'", NULL);
#endif
  {
   self->setVisible(visible);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setContentSize of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setContentSize00
static int tolua_LuaFramework_CCEditBox_setContentSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  const CCSize* size = ((const CCSize*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setContentSize'", NULL);
#endif
  {
   self->setContentSize(*size);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setContentSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnchorPoint of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_setAnchorPoint00
static int tolua_LuaFramework_CCEditBox_setAnchorPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const CCPoint",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  const CCPoint* anchorPoint = ((const CCPoint*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnchorPoint'", NULL);
#endif
  {
   self->setAnchorPoint(*anchorPoint);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnchorPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: visit of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_visit00
static int tolua_LuaFramework_CCEditBox_visit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'visit'", NULL);
#endif
  {
   self->visit();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'visit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onEnter of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_onEnter00
static int tolua_LuaFramework_CCEditBox_onEnter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onEnter'", NULL);
#endif
  {
   self->onEnter();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onEnter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onExit of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_onExit00
static int tolua_LuaFramework_CCEditBox_onExit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onExit'", NULL);
#endif
  {
   self->onExit();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onExit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: keyboardWillShow of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_keyboardWillShow00
static int tolua_LuaFramework_CCEditBox_keyboardWillShow00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCIMEKeyboardNotificationInfo",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  CCIMEKeyboardNotificationInfo* info = ((CCIMEKeyboardNotificationInfo*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'keyboardWillShow'", NULL);
#endif
  {
   self->keyboardWillShow(*info);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'keyboardWillShow'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: keyboardDidShow of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_keyboardDidShow00
static int tolua_LuaFramework_CCEditBox_keyboardDidShow00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCIMEKeyboardNotificationInfo",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  CCIMEKeyboardNotificationInfo* info = ((CCIMEKeyboardNotificationInfo*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'keyboardDidShow'", NULL);
#endif
  {
   self->keyboardDidShow(*info);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'keyboardDidShow'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: keyboardWillHide of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_keyboardWillHide00
static int tolua_LuaFramework_CCEditBox_keyboardWillHide00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCIMEKeyboardNotificationInfo",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  CCIMEKeyboardNotificationInfo* info = ((CCIMEKeyboardNotificationInfo*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'keyboardWillHide'", NULL);
#endif
  {
   self->keyboardWillHide(*info);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'keyboardWillHide'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: keyboardDidHide of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_keyboardDidHide00
static int tolua_LuaFramework_CCEditBox_keyboardDidHide00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCIMEKeyboardNotificationInfo",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  CCIMEKeyboardNotificationInfo* info = ((CCIMEKeyboardNotificationInfo*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'keyboardDidHide'", NULL);
#endif
  {
   self->keyboardDidHide(*info);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'keyboardDidHide'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: touchDownAction of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCEditBox_touchDownAction00
static int tolua_LuaFramework_CCEditBox_touchDownAction00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCEditBox",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCObject",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
  CCObject* sender = ((CCObject*)  tolua_tousertype(tolua_S,2,0));
  unsigned int controlEvent = (( unsigned int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'touchDownAction'", NULL);
#endif
  {
   self->touchDownAction(sender,controlEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'touchDownAction'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: __CCIMEDelegate__ of class  CCEditBox */
#ifndef TOLUA_DISABLE_tolua_get_CCEditBox___CCIMEDelegate__
static int tolua_get_CCEditBox___CCIMEDelegate__(lua_State* tolua_S)
{
  CCEditBox* self = (CCEditBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable '__CCIMEDelegate__'",NULL);
#endif
#ifdef __cplusplus
   tolua_pushusertype(tolua_S,(void*)static_cast<CCIMEDelegate*>(self), "CCIMEDelegate");
#else
   tolua_pushusertype(tolua_S,(void*)((CCIMEDelegate*)self), "CCIMEDelegate");
#endif
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFTabView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTabView_delete00
static int tolua_LuaFramework_SFTabView_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTabView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTabView* self = (SFTabView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFTabView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTabView_create00
static int tolua_LuaFramework_SFTabView_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFTabView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCArray",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCArray* controls = ((CCArray*)  tolua_tousertype(tolua_S,2,0));
  int margin = ((int)  tolua_tonumber(tolua_S,3,0));
  TabViewMode mode = ((TabViewMode) (int)  tolua_tonumber(tolua_S,4,tab_horizontal));
  {
   SFTabView* tolua_ret = (SFTabView*)  SFTabView::create(controls,margin,mode);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTabView");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  SFTabView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTabView_init00
static int tolua_LuaFramework_SFTabView_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTabView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCArray",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTabView* self = (SFTabView*)  tolua_tousertype(tolua_S,1,0);
  CCArray* controls = ((CCArray*)  tolua_tousertype(tolua_S,2,0));
  int margin = ((int)  tolua_tonumber(tolua_S,3,0));
  TabViewMode mode = ((TabViewMode) (int)  tolua_tonumber(tolua_S,4,tab_horizontal));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init(controls,margin,mode);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initControlTaget of class  SFTabView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTabView_initControlTaget00
static int tolua_LuaFramework_SFTabView_initControlTaget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTabView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTabView* self = (SFTabView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initControlTaget'", NULL);
#endif
  {
   self->initControlTaget();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initControlTaget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSize of class  SFTabView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTabView_getSize00
static int tolua_LuaFramework_SFTabView_getSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTabView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTabView* self = (SFTabView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSize'", NULL);
#endif
  {
   const CCSize& tolua_ret = (const CCSize&)  self->getSize();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const CCSize");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: insertControl of class  SFTabView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTabView_insertControl00
static int tolua_LuaFramework_SFTabView_insertControl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTabView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTabView* self = (SFTabView*)  tolua_tousertype(tolua_S,1,0);
  CCControlButton* ctlButton = ((CCControlButton*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'insertControl'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->insertControl(ctlButton);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'insertControl'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeControl of class  SFTabView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTabView_removeControl00
static int tolua_LuaFramework_SFTabView_removeControl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTabView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTabView* self = (SFTabView*)  tolua_tousertype(tolua_S,1,0);
  CCControlButton* ctlButton = ((CCControlButton*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeControl'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->removeControl(ctlButton);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeControl'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSelControl of class  SFTabView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTabView_getSelControl00
static int tolua_LuaFramework_SFTabView_getSelControl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTabView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTabView* self = (SFTabView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSelControl'", NULL);
#endif
  {
   CCControlButton* tolua_ret = (CCControlButton*)  self->getSelControl();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCControlButton");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSelControl'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSelControl of class  SFTabView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTabView_setSelControl00
static int tolua_LuaFramework_SFTabView_setSelControl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTabView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCControlButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTabView* self = (SFTabView*)  tolua_tousertype(tolua_S,1,0);
  CCControlButton* ctlButton = ((CCControlButton*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSelControl'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->setSelControl(ctlButton);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSelControl'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSelIndex of class  SFTabView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTabView_getSelIndex00
static int tolua_LuaFramework_SFTabView_getSelIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTabView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTabView* self = (SFTabView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSelIndex'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getSelIndex();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSelIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSelIndex of class  SFTabView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTabView_setSelIndex00
static int tolua_LuaFramework_SFTabView_setSelIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTabView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTabView* self = (SFTabView*)  tolua_tousertype(tolua_S,1,0);
  unsigned int index = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSelIndex'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->setSelIndex(index);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSelIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTabMode of class  SFTabView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTabView_setTabMode00
static int tolua_LuaFramework_SFTabView_setTabMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTabView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTabView* self = (SFTabView*)  tolua_tousertype(tolua_S,1,0);
  TabViewMode tabMode = ((TabViewMode) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTabMode'", NULL);
#endif
  {
   self->setTabMode(tabMode);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTabMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDelegate of class  SFTabView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTabView_setDelegate00
static int tolua_LuaFramework_SFTabView_setDelegate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTabView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFTabViewDelegate",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTabView* self = (SFTabView*)  tolua_tousertype(tolua_S,1,0);
  SFTabViewDelegate* delegate = ((SFTabViewDelegate*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDelegate'", NULL);
#endif
  {
   self->setDelegate(delegate);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDelegate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAllUnSel of class  SFTabView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTabView_setAllUnSel00
static int tolua_LuaFramework_SFTabView_setAllUnSel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTabView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTabView* self = (SFTabView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAllUnSel'", NULL);
#endif
  {
   self->setAllUnSel();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAllUnSel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDefaultSel of class  SFTabView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTabView_setDefaultSel00
static int tolua_LuaFramework_SFTabView_setDefaultSel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTabView",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTabView* self = (SFTabView*)  tolua_tousertype(tolua_S,1,0);
  bool defaultSel = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDefaultSel'", NULL);
#endif
  {
   self->setDefaultSel(defaultSel);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDefaultSel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: didSelControl of class  SFTabViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTabViewDelegate_didSelControl00
static int tolua_LuaFramework_SFTabViewDelegate_didSelControl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTabViewDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFTabView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTabViewDelegate* self = (SFTabViewDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFTabView* tabView = ((SFTabView*)  tolua_tousertype(tolua_S,2,0));
  int index = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'didSelControl'", NULL);
#endif
  {
   self->didSelControl(tabView,index);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'didSelControl'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFScrollViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollViewDelegate_delete00
static int tolua_LuaFramework_SFScrollViewDelegate_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollViewDelegate",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollViewDelegate* self = (SFScrollViewDelegate*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: scrollViewDidScroll of class  SFScrollViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollViewDelegate_scrollViewDidScroll00
static int tolua_LuaFramework_SFScrollViewDelegate_scrollViewDidScroll00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollViewDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollViewDelegate* self = (SFScrollViewDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFScrollView* view = ((SFScrollView*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'scrollViewDidScroll'", NULL);
#endif
  {
   self->scrollViewDidScroll(view);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'scrollViewDidScroll'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: scrollViewDidZoom of class  SFScrollViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollViewDelegate_scrollViewDidZoom00
static int tolua_LuaFramework_SFScrollViewDelegate_scrollViewDidZoom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollViewDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollViewDelegate* self = (SFScrollViewDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFScrollView* view = ((SFScrollView*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'scrollViewDidZoom'", NULL);
#endif
  {
   self->scrollViewDidZoom(view);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'scrollViewDidZoom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: scrollViewTouchBegin of class  SFScrollViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollViewDelegate_scrollViewTouchBegin00
static int tolua_LuaFramework_SFScrollViewDelegate_scrollViewTouchBegin00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollViewDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCPoint",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollViewDelegate* self = (SFScrollViewDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFScrollView* view = ((SFScrollView*)  tolua_tousertype(tolua_S,2,0));
  CCPoint pt = *((CCPoint*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'scrollViewTouchBegin'", NULL);
#endif
  {
   self->scrollViewTouchBegin(view,pt);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'scrollViewTouchBegin'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: scrollViewTouchMove of class  SFScrollViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollViewDelegate_scrollViewTouchMove00
static int tolua_LuaFramework_SFScrollViewDelegate_scrollViewTouchMove00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollViewDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCPoint",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollViewDelegate* self = (SFScrollViewDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFScrollView* view = ((SFScrollView*)  tolua_tousertype(tolua_S,2,0));
  CCPoint pt = *((CCPoint*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'scrollViewTouchMove'", NULL);
#endif
  {
   self->scrollViewTouchMove(view,pt);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'scrollViewTouchMove'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: scrollViewTouchEnd of class  SFScrollViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollViewDelegate_scrollViewTouchEnd00
static int tolua_LuaFramework_SFScrollViewDelegate_scrollViewTouchEnd00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollViewDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCPoint",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollViewDelegate* self = (SFScrollViewDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFScrollView* view = ((SFScrollView*)  tolua_tousertype(tolua_S,2,0));
  CCPoint pt = *((CCPoint*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'scrollViewTouchEnd'", NULL);
#endif
  {
   self->scrollViewTouchEnd(view,pt);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'scrollViewTouchEnd'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: scrollViewDidAnimateScrollEnd of class  SFScrollViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollViewDelegate_scrollViewDidAnimateScrollEnd00
static int tolua_LuaFramework_SFScrollViewDelegate_scrollViewDidAnimateScrollEnd00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollViewDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollViewDelegate* self = (SFScrollViewDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFScrollView* view = ((SFScrollView*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'scrollViewDidAnimateScrollEnd'", NULL);
#endif
  {
   self->scrollViewDidAnimateScrollEnd(view);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'scrollViewDidAnimateScrollEnd'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_new00
static int tolua_LuaFramework_SFScrollView_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFScrollView* tolua_ret = (SFScrollView*)  Mtolua_new((SFScrollView)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFScrollView");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_new00_local
static int tolua_LuaFramework_SFScrollView_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFScrollView* tolua_ret = (SFScrollView*)  Mtolua_new((SFScrollView)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFScrollView");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_delete00
static int tolua_LuaFramework_SFScrollView_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_init00
static int tolua_LuaFramework_SFScrollView_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: registerWithTouchDispatcher of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_registerWithTouchDispatcher00
static int tolua_LuaFramework_SFScrollView_registerWithTouchDispatcher00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'registerWithTouchDispatcher'", NULL);
#endif
  {
   self->registerWithTouchDispatcher();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'registerWithTouchDispatcher'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: viewWithViewSize of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_viewWithViewSize00
static int tolua_LuaFramework_SFScrollView_viewWithViewSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCSize",0,&tolua_err)) ||
     !tolua_isusertype(tolua_S,3,"CCNode",1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCSize size = *((CCSize*)  tolua_tousertype(tolua_S,2,0));
  CCNode* container = ((CCNode*)  tolua_tousertype(tolua_S,3,NULL));
  {
   SFScrollView* tolua_ret = (SFScrollView*)  SFScrollView::viewWithViewSize(size,container);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFScrollView");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'viewWithViewSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_create00
static int tolua_LuaFramework_SFScrollView_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCSize",0,&tolua_err)) ||
     !tolua_isusertype(tolua_S,3,"CCNode",1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCSize size = *((CCSize*)  tolua_tousertype(tolua_S,2,0));
  CCNode* container = ((CCNode*)  tolua_tousertype(tolua_S,3,NULL));
  {
   SFScrollView* tolua_ret = (SFScrollView*)  SFScrollView::create(size,container);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFScrollView");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: node of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_node00
static int tolua_LuaFramework_SFScrollView_node00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFScrollView* tolua_ret = (SFScrollView*)  SFScrollView::node();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFScrollView");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'node'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_create01
static int tolua_LuaFramework_SFScrollView_create01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  {
   SFScrollView* tolua_ret = (SFScrollView*)  SFScrollView::create();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFScrollView");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFScrollView_create00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithViewSize of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_initWithViewSize00
static int tolua_LuaFramework_SFScrollView_initWithViewSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCSize",0,&tolua_err)) ||
     !tolua_isusertype(tolua_S,3,"CCNode",1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCSize size = *((CCSize*)  tolua_tousertype(tolua_S,2,0));
  CCNode* container = ((CCNode*)  tolua_tousertype(tolua_S,3,NULL));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithViewSize'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithViewSize(size,container);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithViewSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setContentOffset of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setContentOffset00
static int tolua_LuaFramework_SFScrollView_setContentOffset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCPoint",0,&tolua_err)) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCPoint offset = *((CCPoint*)  tolua_tousertype(tolua_S,2,0));
  bool animated = ((bool)  tolua_toboolean(tolua_S,3,false));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setContentOffset'", NULL);
#endif
  {
   self->setContentOffset(offset,animated);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setContentOffset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getContentOffset of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_getContentOffset00
static int tolua_LuaFramework_SFScrollView_getContentOffset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getContentOffset'", NULL);
#endif
  {
   CCPoint tolua_ret = (CCPoint)  self->getContentOffset();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCPoint)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCPoint));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getContentOffset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setContentOffsetInDuration of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setContentOffsetInDuration00
static int tolua_LuaFramework_SFScrollView_setContentOffsetInDuration00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCPoint",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCPoint offset = *((CCPoint*)  tolua_tousertype(tolua_S,2,0));
  float dt = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setContentOffsetInDuration'", NULL);
#endif
  {
   self->setContentOffsetInDuration(offset,dt);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setContentOffsetInDuration'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setZoomScale of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setZoomScale00
static int tolua_LuaFramework_SFScrollView_setZoomScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  float s = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setZoomScale'", NULL);
#endif
  {
   self->setZoomScale(s);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setZoomScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setZoomScale of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setZoomScale01
static int tolua_LuaFramework_SFScrollView_setZoomScale01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  float s = ((float)  tolua_tonumber(tolua_S,2,0));
  bool animated = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setZoomScale'", NULL);
#endif
  {
   self->setZoomScale(s,animated);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_SFScrollView_setZoomScale00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getZoomScale of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_getZoomScale00
static int tolua_LuaFramework_SFScrollView_getZoomScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getZoomScale'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getZoomScale();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getZoomScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setZoomScaleInDuration of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setZoomScaleInDuration00
static int tolua_LuaFramework_SFScrollView_setZoomScaleInDuration00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  float s = ((float)  tolua_tonumber(tolua_S,2,0));
  float dt = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setZoomScaleInDuration'", NULL);
#endif
  {
   self->setZoomScaleInDuration(s,dt);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setZoomScaleInDuration'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: minContainerOffset of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_minContainerOffset00
static int tolua_LuaFramework_SFScrollView_minContainerOffset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'minContainerOffset'", NULL);
#endif
  {
   CCPoint tolua_ret = (CCPoint)  self->minContainerOffset();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCPoint)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCPoint));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'minContainerOffset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: maxContainerOffset of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_maxContainerOffset00
static int tolua_LuaFramework_SFScrollView_maxContainerOffset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'maxContainerOffset'", NULL);
#endif
  {
   CCPoint tolua_ret = (CCPoint)  self->maxContainerOffset();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCPoint)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCPoint));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'maxContainerOffset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isNodeVisible of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_isNodeVisible00
static int tolua_LuaFramework_SFScrollView_isNodeVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCNode* node = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isNodeVisible'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isNodeVisible(node);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isNodeVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: pause of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_pause00
static int tolua_LuaFramework_SFScrollView_pause00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCObject* sender = ((CCObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'pause'", NULL);
#endif
  {
   self->pause(sender);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'pause'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: resume of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_resume00
static int tolua_LuaFramework_SFScrollView_resume00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCObject* sender = ((CCObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'resume'", NULL);
#endif
  {
   self->resume(sender);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'resume'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isDragging of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_isDragging00
static int tolua_LuaFramework_SFScrollView_isDragging00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isDragging'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isDragging();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isDragging'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isTouchMoved of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_isTouchMoved00
static int tolua_LuaFramework_SFScrollView_isTouchMoved00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isTouchMoved'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isTouchMoved();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isTouchMoved'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isBounceable of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_isBounceable00
static int tolua_LuaFramework_SFScrollView_isBounceable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isBounceable'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isBounceable();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isBounceable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBounceable of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setBounceable00
static int tolua_LuaFramework_SFScrollView_setBounceable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  bool bBounceable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBounceable'", NULL);
#endif
  {
   self->setBounceable(bBounceable);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBounceable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getViewSize of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_getViewSize00
static int tolua_LuaFramework_SFScrollView_getViewSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getViewSize'", NULL);
#endif
  {
   CCSize tolua_ret = (CCSize)  self->getViewSize();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCSize)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCSize));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getViewSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setViewSize of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setViewSize00
static int tolua_LuaFramework_SFScrollView_setViewSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCSize size = *((CCSize*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setViewSize'", NULL);
#endif
  {
   self->setViewSize(size);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setViewSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getContainer of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_getContainer00
static int tolua_LuaFramework_SFScrollView_getContainer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getContainer'", NULL);
#endif
  {
   CCNode* tolua_ret = (CCNode*)  self->getContainer();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getContainer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setContainer of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setContainer00
static int tolua_LuaFramework_SFScrollView_setContainer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCNode* pContainer = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setContainer'", NULL);
#endif
  {
   self->setContainer(pContainer);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setContainer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDirection of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_getDirection00
static int tolua_LuaFramework_SFScrollView_getDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDirection'", NULL);
#endif
  {
   SFScrollViewDirection tolua_ret = (SFScrollViewDirection)  self->getDirection();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDirection of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setDirection00
static int tolua_LuaFramework_SFScrollView_setDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  SFScrollViewDirection eDirection = ((SFScrollViewDirection) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDirection'", NULL);
#endif
  {
   self->setDirection(eDirection);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDelegate of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_getDelegate00
static int tolua_LuaFramework_SFScrollView_getDelegate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDelegate'", NULL);
#endif
  {
   SFScrollViewDelegate* tolua_ret = (SFScrollViewDelegate*)  self->getDelegate();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFScrollViewDelegate");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDelegate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDelegate of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setDelegate00
static int tolua_LuaFramework_SFScrollView_setDelegate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFScrollViewDelegate",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  SFScrollViewDelegate* pDelegate = ((SFScrollViewDelegate*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDelegate'", NULL);
#endif
  {
   self->setDelegate(pDelegate);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDelegate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ccTouchBegan of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_ccTouchBegan00
static int tolua_LuaFramework_SFScrollView_ccTouchBegan00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ccTouchBegan'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->ccTouchBegan(pTouch,pEvent);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ccTouchBegan'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ccTouchMoved of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_ccTouchMoved00
static int tolua_LuaFramework_SFScrollView_ccTouchMoved00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ccTouchMoved'", NULL);
#endif
  {
   self->ccTouchMoved(pTouch,pEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ccTouchMoved'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ccTouchEnded of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_ccTouchEnded00
static int tolua_LuaFramework_SFScrollView_ccTouchEnded00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ccTouchEnded'", NULL);
#endif
  {
   self->ccTouchEnded(pTouch,pEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ccTouchEnded'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ccTouchCancelled of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_ccTouchCancelled00
static int tolua_LuaFramework_SFScrollView_ccTouchCancelled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ccTouchCancelled'", NULL);
#endif
  {
   self->ccTouchCancelled(pTouch,pEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ccTouchCancelled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setContentSize of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setContentSize00
static int tolua_LuaFramework_SFScrollView_setContentSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  const CCSize* size = ((const CCSize*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setContentSize'", NULL);
#endif
  {
   self->setContentSize(*size);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setContentSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getContentSize of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_getContentSize00
static int tolua_LuaFramework_SFScrollView_getContentSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getContentSize'", NULL);
#endif
  {
   const CCSize& tolua_ret = (const CCSize&)  self->getContentSize();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const CCSize");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getContentSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: updateInset of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_updateInset00
static int tolua_LuaFramework_SFScrollView_updateInset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'updateInset'", NULL);
#endif
  {
   self->updateInset();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'updateInset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isClippingToBounds of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_isClippingToBounds00
static int tolua_LuaFramework_SFScrollView_isClippingToBounds00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isClippingToBounds'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isClippingToBounds();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isClippingToBounds'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setClippingToBounds of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setClippingToBounds00
static int tolua_LuaFramework_SFScrollView_setClippingToBounds00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  bool bClippingToBounds = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setClippingToBounds'", NULL);
#endif
  {
   self->setClippingToBounds(bClippingToBounds);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setClippingToBounds'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: visit of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_visit00
static int tolua_LuaFramework_SFScrollView_visit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'visit'", NULL);
#endif
  {
   self->visit();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'visit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addChild of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_addChild00
static int tolua_LuaFramework_SFScrollView_addChild00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCNode* child = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  int zOrder = ((int)  tolua_tonumber(tolua_S,3,0));
  int tag = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addChild'", NULL);
#endif
  {
   self->addChild(child,zOrder,tag);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addChild'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addChild of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_addChild01
static int tolua_LuaFramework_SFScrollView_addChild01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCNode* child = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  int zOrder = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addChild'", NULL);
#endif
  {
   self->addChild(child,zOrder);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_SFScrollView_addChild00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: addChild of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_addChild02
static int tolua_LuaFramework_SFScrollView_addChild02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCNode* child = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addChild'", NULL);
#endif
  {
   self->addChild(child);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_SFScrollView_addChild01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTouchEnabled of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setTouchEnabled00
static int tolua_LuaFramework_SFScrollView_setTouchEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  bool e = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTouchEnabled'", NULL);
#endif
  {
   self->setTouchEnabled(e);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTouchEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPageEnable of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setPageEnable00
static int tolua_LuaFramework_SFScrollView_setPageEnable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  bool bEnable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPageEnable'", NULL);
#endif
  {
   self->setPageEnable(bEnable);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPageEnable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPage of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_getPage00
static int tolua_LuaFramework_SFScrollView_getPage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPage'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getPage();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCurrentPage of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setCurrentPage00
static int tolua_LuaFramework_SFScrollView_setCurrentPage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  int page = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCurrentPage'", NULL);
#endif
  {
   self->setCurrentPage(page);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCurrentPage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setHandler of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setHandler00
static int tolua_LuaFramework_SFScrollView_setHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION nHandler = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setHandler'", NULL);
#endif
  {
   self->setHandler(nHandler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAutoScroll of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_getAutoScroll00
static int tolua_LuaFramework_SFScrollView_getAutoScroll00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFScrollView* self = (const SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAutoScroll'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getAutoScroll();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAutoScroll'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAutoScroll of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setAutoScroll00
static int tolua_LuaFramework_SFScrollView_setAutoScroll00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  bool var = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAutoScroll'", NULL);
#endif
  {
   self->setAutoScroll(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAutoScroll'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPageSize of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_setPageSize00
static int tolua_LuaFramework_SFScrollView_setPageSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
  CCSize pageSize = *((CCSize*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPageSize'", NULL);
#endif
  {
   self->setPageSize(pageSize);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPageSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPageSize of class  SFScrollView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScrollView_getPageSize00
static int tolua_LuaFramework_SFScrollView_getPageSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScrollView* self = (SFScrollView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPageSize'", NULL);
#endif
  {
   CCSize tolua_ret = (CCSize)  self->getPageSize();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCSize)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCSize));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPageSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_new00
static int tolua_LuaFramework_SFLabel_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFLabel",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFLabel* tolua_ret = (SFLabel*)  Mtolua_new((SFLabel)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFLabel");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_new00_local
static int tolua_LuaFramework_SFLabel_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFLabel",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFLabel* tolua_ret = (SFLabel*)  Mtolua_new((SFLabel)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFLabel");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_delete00
static int tolua_LuaFramework_SFLabel_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabel",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabel* self = (SFLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_create00
static int tolua_LuaFramework_SFLabel_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFLabel",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* str = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* font = ((const char*)  tolua_tostring(tolua_S,3,0));
  {
   SFLabel* tolua_ret = (SFLabel*)  SFLabel::create(str,font);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFLabel");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_create01
static int tolua_LuaFramework_SFLabel_create01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFLabel",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"ccColor3B",1,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"CCSize",1,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const char* str = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* font = ((const char*)  tolua_tostring(tolua_S,3,0));
  int fontSize = ((int)  tolua_tonumber(tolua_S,4,0));
  const ccColor3B clr = ccBLACK;
  ccColor3B color = *((ccColor3B*)  tolua_tousertype(tolua_S,5,(void*)&clr));
  const CCSize temp = CCSizeZero;
  CCSize size = *((CCSize*) tolua_tousertype(tolua_S,6,(void*)&temp));
  {
   SFLabel* tolua_ret = (SFLabel*)  SFLabel::create(str,font,fontSize,color,size);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFLabel");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFLabel_create00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_init00
static int tolua_LuaFramework_SFLabel_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabel",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabel* self = (SFLabel*)  tolua_tousertype(tolua_S,1,0);
  const char* str = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* font = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init(str,font);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_init01
static int tolua_LuaFramework_SFLabel_init01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabel",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"ccColor3B",1,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"CCSize",1,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFLabel* self = (SFLabel*)  tolua_tousertype(tolua_S,1,0);
  const char* str = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* font = ((const char*)  tolua_tostring(tolua_S,3,0));
  int fontSize = ((int)  tolua_tonumber(tolua_S,4,0));
  const ccColor3B clr = ccBLACK;
  ccColor3B color = *((ccColor3B*)  tolua_tousertype(tolua_S,5,(void*)&clr));
  const CCSize temp = CCSizeZero;
  CCSize size = *((CCSize*) tolua_tousertype(tolua_S,6,(void*)&temp));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init(str,font,fontSize,color,size);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFLabel_init00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDimensions of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_setDimensions00
static int tolua_LuaFramework_SFLabel_setDimensions00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabel",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabel* self = (SFLabel*)  tolua_tousertype(tolua_S,1,0);
  CCSize size = *((CCSize*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDimensions'", NULL);
#endif
  {
   self->setDimensions(size);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDimensions'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setString of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_setString00
static int tolua_LuaFramework_SFLabel_setString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabel",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabel* self = (SFLabel*)  tolua_tousertype(tolua_S,1,0);
  const char* str = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setString'", NULL);
#endif
  {
   self->setString(str);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFontName of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_setFontName00
static int tolua_LuaFramework_SFLabel_setFontName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabel",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabel* self = (SFLabel*)  tolua_tousertype(tolua_S,1,0);
  const char* font = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFontName'", NULL);
#endif
  {
   self->setFontName(font);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFontName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFontSize of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_setFontSize00
static int tolua_LuaFramework_SFLabel_setFontSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabel",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabel* self = (SFLabel*)  tolua_tousertype(tolua_S,1,0);
  int fontSize = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFontSize'", NULL);
#endif
  {
   self->setFontSize(fontSize);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFontSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setVerticalTextAlignment of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_setVerticalTextAlignment00
static int tolua_LuaFramework_SFLabel_setVerticalTextAlignment00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabel",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabel* self = (SFLabel*)  tolua_tousertype(tolua_S,1,0);
  SFVerticalTextAlignment alignment = ((SFVerticalTextAlignment) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setVerticalTextAlignment'", NULL);
#endif
  {
   self->setVerticalTextAlignment(alignment);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setVerticalTextAlignment'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDimensions of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_getDimensions00
static int tolua_LuaFramework_SFLabel_getDimensions00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabel",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabel* self = (SFLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDimensions'", NULL);
#endif
  {
   CCSize tolua_ret = (CCSize)  self->getDimensions();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCSize)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCSize));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDimensions'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getString of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_getString00
static int tolua_LuaFramework_SFLabel_getString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabel",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabel* self = (SFLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getString'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->getString();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFontName of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_getFontName00
static int tolua_LuaFramework_SFLabel_getFontName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabel",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabel* self = (SFLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFontName'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->getFontName();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFontName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFontSize of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_getFontSize00
static int tolua_LuaFramework_SFLabel_getFontSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabel",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabel* self = (SFLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFontSize'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getFontSize();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFontSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVerticalTextAlignment of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_getVerticalTextAlignment00
static int tolua_LuaFramework_SFLabel_getVerticalTextAlignment00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabel",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabel* self = (SFLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVerticalTextAlignment'", NULL);
#endif
  {
   SFVerticalTextAlignment tolua_ret = (SFVerticalTextAlignment)  self->getVerticalTextAlignment();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVerticalTextAlignment'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getContentSize of class  SFLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabel_getContentSize00
static int tolua_LuaFramework_SFLabel_getContentSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabel",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabel* self = (SFLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getContentSize'", NULL);
#endif
  {
   const CCSize& tolua_ret = (const CCSize&)  self->getContentSize();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const CCSize");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getContentSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_new00
static int tolua_LuaFramework_SFLabelTex_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFLabelTex* tolua_ret = (SFLabelTex*)  Mtolua_new((SFLabelTex)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFLabelTex");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_new00_local
static int tolua_LuaFramework_SFLabelTex_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFLabelTex* tolua_ret = (SFLabelTex*)  Mtolua_new((SFLabelTex)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFLabelTex");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_delete00
static int tolua_LuaFramework_SFLabelTex_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithString of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_initWithString00
static int tolua_LuaFramework_SFLabelTex_initWithString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
  const char* str = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* fontName = ((const char*)  tolua_tostring(tolua_S,3,0));
  float size = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithString'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithString(str,fontName,size);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithString of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_initWithString01
static int tolua_LuaFramework_SFLabelTex_initWithString01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const CCSize",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"CCTextAlignment",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
  const char* str = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* fontName = ((const char*)  tolua_tostring(tolua_S,3,0));
  float fontSize = ((float)  tolua_tonumber(tolua_S,4,0));
  const CCSize* dimensions = ((const CCSize*)  tolua_tousertype(tolua_S,5,0));
  CCTextAlignment hAlignment = *((CCTextAlignment*)  tolua_tousertype(tolua_S,6,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithString'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithString(str,fontName,fontSize,*dimensions,hAlignment);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFLabelTex_initWithString00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithString of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_initWithString02
static int tolua_LuaFramework_SFLabelTex_initWithString02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const CCSize",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"CCTextAlignment",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"CCVerticalTextAlignment",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
  const char* str = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* fontName = ((const char*)  tolua_tostring(tolua_S,3,0));
  float fontSize = ((float)  tolua_tonumber(tolua_S,4,0));
  const CCSize* dimensions = ((const CCSize*)  tolua_tousertype(tolua_S,5,0));
  CCTextAlignment hAlignment = *((CCTextAlignment*)  tolua_tousertype(tolua_S,6,0));
  CCVerticalTextAlignment vAlignment = *((CCVerticalTextAlignment*)  tolua_tousertype(tolua_S,7,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithString'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithString(str,fontName,fontSize,*dimensions,hAlignment,vAlignment);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFLabelTex_initWithString01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_create00
static int tolua_LuaFramework_SFLabelTex_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFLabelTex* tolua_ret = (SFLabelTex*)  SFLabelTex::create();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFLabelTex");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_create01
static int tolua_LuaFramework_SFLabelTex_create01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const char* str = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* fontName = ((const char*)  tolua_tostring(tolua_S,3,0));
  float fontSize = ((float)  tolua_tonumber(tolua_S,4,0));
  {
   SFLabelTex* tolua_ret = (SFLabelTex*)  SFLabelTex::create(str,fontName,fontSize);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFLabelTex");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFLabelTex_create00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_create02
static int tolua_LuaFramework_SFLabelTex_create02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const char* str = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* fontName = ((const char*)  tolua_tostring(tolua_S,3,0));
  float fontSize = ((float)  tolua_tonumber(tolua_S,4,0));
  CCSize dimensions = *((CCSize*)  tolua_tousertype(tolua_S,5,0));
  {
   SFLabelTex* tolua_ret = (SFLabelTex*)  SFLabelTex::create(str,fontName,fontSize,dimensions);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFLabelTex");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFLabelTex_create01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_create03
static int tolua_LuaFramework_SFLabelTex_create03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const CCSize",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"CCTextAlignment",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const char* str = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* fontName = ((const char*)  tolua_tostring(tolua_S,3,0));
  float fontSize = ((float)  tolua_tonumber(tolua_S,4,0));
  const CCSize* dimensions = ((const CCSize*)  tolua_tousertype(tolua_S,5,0));
  CCTextAlignment hAlignment = *((CCTextAlignment*)  tolua_tousertype(tolua_S,6,0));
  {
   SFLabelTex* tolua_ret = (SFLabelTex*)  SFLabelTex::create(str,fontName,fontSize,*dimensions,hAlignment);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFLabelTex");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFLabelTex_create02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_create04
static int tolua_LuaFramework_SFLabelTex_create04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const CCSize",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"CCTextAlignment",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"CCVerticalTextAlignment",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const char* str = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* fontName = ((const char*)  tolua_tostring(tolua_S,3,0));
  float fontSize = ((float)  tolua_tonumber(tolua_S,4,0));
  const CCSize* dimensions = ((const CCSize*)  tolua_tousertype(tolua_S,5,0));
  CCTextAlignment hAlignment = *((CCTextAlignment*)  tolua_tousertype(tolua_S,6,0));
  CCVerticalTextAlignment vAlignment = *((CCVerticalTextAlignment*)  tolua_tousertype(tolua_S,7,0));
  {
   SFLabelTex* tolua_ret = (SFLabelTex*)  SFLabelTex::create(str,fontName,fontSize,*dimensions,hAlignment,vAlignment);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFLabelTex");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFLabelTex_create03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFontFillColor of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_setFontFillColor00
static int tolua_LuaFramework_SFLabelTex_setFontFillColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const ccColor3B",0,&tolua_err)) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
  const ccColor3B* tintColor = ((const ccColor3B*)  tolua_tousertype(tolua_S,2,0));
  bool mustUpdateTexture = ((bool)  tolua_toboolean(tolua_S,3,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFontFillColor'", NULL);
#endif
  {
   self->setFontFillColor(*tintColor,mustUpdateTexture);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFontFillColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFontFillColor of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_getFontFillColor00
static int tolua_LuaFramework_SFLabelTex_getFontFillColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFontFillColor'", NULL);
#endif
  {
   ccColor3B tolua_ret = (ccColor3B)  self->getFontFillColor();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((ccColor3B)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"ccColor3B");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(ccColor3B));
     tolua_pushusertype(tolua_S,tolua_obj,"ccColor3B");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFontFillColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setColor of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_setColor00
static int tolua_LuaFramework_SFLabelTex_setColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const ccColor3B",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
  const ccColor3B* color3 = ((const ccColor3B*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setColor'", NULL);
#endif
  {
   self->setColor(*color3);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setString of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_setString00
static int tolua_LuaFramework_SFLabelTex_setString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
  const char* label = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setString'", NULL);
#endif
  {
   self->setString(label);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getString of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_getString00
static int tolua_LuaFramework_SFLabelTex_getString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getString'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->getString();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getHorizontalAlignment of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_getHorizontalAlignment00
static int tolua_LuaFramework_SFLabelTex_getHorizontalAlignment00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getHorizontalAlignment'", NULL);
#endif
  {
   CCTextAlignment tolua_ret = (CCTextAlignment)  self->getHorizontalAlignment();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCTextAlignment)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCTextAlignment");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCTextAlignment));
     tolua_pushusertype(tolua_S,tolua_obj,"CCTextAlignment");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getHorizontalAlignment'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setHorizontalAlignment of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_setHorizontalAlignment00
static int tolua_LuaFramework_SFLabelTex_setHorizontalAlignment00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCTextAlignment",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
  CCTextAlignment alignment = *((CCTextAlignment*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setHorizontalAlignment'", NULL);
#endif
  {
   self->setHorizontalAlignment(alignment);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setHorizontalAlignment'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVerticalAlignment of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_getVerticalAlignment00
static int tolua_LuaFramework_SFLabelTex_getVerticalAlignment00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVerticalAlignment'", NULL);
#endif
  {
   CCVerticalTextAlignment tolua_ret = (CCVerticalTextAlignment)  self->getVerticalAlignment();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCVerticalTextAlignment)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCVerticalTextAlignment");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCVerticalTextAlignment));
     tolua_pushusertype(tolua_S,tolua_obj,"CCVerticalTextAlignment");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVerticalAlignment'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setVerticalAlignment of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_setVerticalAlignment00
static int tolua_LuaFramework_SFLabelTex_setVerticalAlignment00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCVerticalTextAlignment",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
  CCVerticalTextAlignment verticalAlignment = *((CCVerticalTextAlignment*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setVerticalAlignment'", NULL);
#endif
  {
   self->setVerticalAlignment(verticalAlignment);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setVerticalAlignment'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDimensions of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_getDimensions00
static int tolua_LuaFramework_SFLabelTex_getDimensions00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDimensions'", NULL);
#endif
  {
   CCSize tolua_ret = (CCSize)  self->getDimensions();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCSize)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCSize));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDimensions'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDimensions of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_setDimensions00
static int tolua_LuaFramework_SFLabelTex_setDimensions00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
  const CCSize* dim = ((const CCSize*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDimensions'", NULL);
#endif
  {
   self->setDimensions(*dim);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDimensions'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFontSize of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_getFontSize00
static int tolua_LuaFramework_SFLabelTex_getFontSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFontSize'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getFontSize();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFontSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFontSize of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_setFontSize00
static int tolua_LuaFramework_SFLabelTex_setFontSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
  float fontSize = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFontSize'", NULL);
#endif
  {
   self->setFontSize(fontSize);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFontSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFontName of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_getFontName00
static int tolua_LuaFramework_SFLabelTex_getFontName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFontName'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->getFontName();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFontName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFontName of class  SFLabelTex */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLabelTex_setFontName00
static int tolua_LuaFramework_SFLabelTex_setFontName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLabelTex",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLabelTex* self = (SFLabelTex*)  tolua_tousertype(tolua_S,1,0);
  const char* fontName = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFontName'", NULL);
#endif
  {
   self->setFontName(fontName);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFontName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFGamePresenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGamePresenter_new00
static int tolua_LuaFramework_SFGamePresenter_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGamePresenter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFGamePresenter* tolua_ret = (SFGamePresenter*)  Mtolua_new((SFGamePresenter)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGamePresenter");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFGamePresenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGamePresenter_new00_local
static int tolua_LuaFramework_SFGamePresenter_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGamePresenter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFGamePresenter* tolua_ret = (SFGamePresenter*)  Mtolua_new((SFGamePresenter)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGamePresenter");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFGamePresenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGamePresenter_delete00
static int tolua_LuaFramework_SFGamePresenter_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGamePresenter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGamePresenter* self = (SFGamePresenter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  SFGamePresenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGamePresenter_init00
static int tolua_LuaFramework_SFGamePresenter_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGamePresenter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGamePresenter* self = (SFGamePresenter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: gamePresenter of class  SFGamePresenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGamePresenter_gamePresenter00
static int tolua_LuaFramework_SFGamePresenter_gamePresenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGamePresenter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFGamePresenter* tolua_ret = (SFGamePresenter*)  SFGamePresenter::gamePresenter();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGamePresenter");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'gamePresenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: scene of class  SFGamePresenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGamePresenter_scene00
static int tolua_LuaFramework_SFGamePresenter_scene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGamePresenter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGamePresenter* self = (SFGamePresenter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'scene'", NULL);
#endif
  {
   CCScene* tolua_ret = (CCScene*)  self->scene();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCScene");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'scene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: replaceScene of class  SFGamePresenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGamePresenter_replaceScene00
static int tolua_LuaFramework_SFGamePresenter_replaceScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGamePresenter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGamePresenter* self = (SFGamePresenter*)  tolua_tousertype(tolua_S,1,0);
  CCScene* scene = ((CCScene*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'replaceScene'", NULL);
#endif
  {
   self->replaceScene(scene);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'replaceScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCrtScene of class  SFGamePresenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGamePresenter_getCrtScene00
static int tolua_LuaFramework_SFGamePresenter_getCrtScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGamePresenter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGamePresenter* self = (SFGamePresenter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCrtScene'", NULL);
#endif
  {
   SFGameScene* tolua_ret = (SFGameScene*)  self->getCrtScene();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGameScene");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCrtScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addAndGetScene of class  SFGamePresenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGamePresenter_addAndGetScene00
static int tolua_LuaFramework_SFGamePresenter_addAndGetScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGamePresenter",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGamePresenter* self = (SFGamePresenter*)  tolua_tousertype(tolua_S,1,0);
  string sceneName = ((string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addAndGetScene'", NULL);
#endif
  {
   SFGameScene* tolua_ret = (SFGameScene*)  self->addAndGetScene(sceneName);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGameScene");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addAndGetScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: switchTo of class  SFGamePresenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGamePresenter_switchTo00
static int tolua_LuaFramework_SFGamePresenter_switchTo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGamePresenter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFGameScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGamePresenter* self = (SFGamePresenter*)  tolua_tousertype(tolua_S,1,0);
  SFGameScene* theScene = ((SFGameScene*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'switchTo'", NULL);
#endif
  {
   self->switchTo(theScene);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'switchTo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: switchTo of class  SFGamePresenter */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGamePresenter_switchTo01
static int tolua_LuaFramework_SFGamePresenter_switchTo01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGamePresenter",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFGamePresenter* self = (SFGamePresenter*)  tolua_tousertype(tolua_S,1,0);
  string sceneContext = ((string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'switchTo'", NULL);
#endif
  {
   SFGameScene* tolua_ret = (SFGameScene*)  self->switchTo(sceneContext);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGameScene");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFGamePresenter_switchTo00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFTouchDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchDelegate_new00
static int tolua_LuaFramework_SFTouchDelegate_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFTouchDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNode* pOwner = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  {
   SFTouchDelegate* tolua_ret = (SFTouchDelegate*)  Mtolua_new((SFTouchDelegate)(pOwner));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTouchDelegate");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFTouchDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchDelegate_new00_local
static int tolua_LuaFramework_SFTouchDelegate_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFTouchDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCNode* pOwner = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  {
   SFTouchDelegate* tolua_ret = (SFTouchDelegate*)  Mtolua_new((SFTouchDelegate)(pOwner));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTouchDelegate");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFTouchDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchDelegate_delete00
static int tolua_LuaFramework_SFTouchDelegate_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTouchDelegate",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTouchDelegate* self = (SFTouchDelegate*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  RTLayer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RTLayer_new00
static int tolua_LuaFramework_RTLayer_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"RTLayer",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   RTLayer* tolua_ret = (RTLayer*)  Mtolua_new((RTLayer)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"RTLayer");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  RTLayer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RTLayer_new00_local
static int tolua_LuaFramework_RTLayer_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"RTLayer",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   RTLayer* tolua_ret = (RTLayer*)  Mtolua_new((RTLayer)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"RTLayer");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  RTLayer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RTLayer_create00
static int tolua_LuaFramework_RTLayer_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"RTLayer",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   RTLayer* tolua_ret = (RTLayer*)  RTLayer::create();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"RTLayer");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  RTLayer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RTLayer_init00
static int tolua_LuaFramework_RTLayer_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RTLayer",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RTLayer* self = (RTLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: __SFTouchDelegate__ of class  RTLayer */
#ifndef TOLUA_DISABLE_tolua_get_RTLayer___SFTouchDelegate__
static int tolua_get_RTLayer___SFTouchDelegate__(lua_State* tolua_S)
{
  RTLayer* self = (RTLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable '__SFTouchDelegate__'",NULL);
#endif
#ifdef __cplusplus
   tolua_pushusertype(tolua_S,(void*)static_cast<SFTouchDelegate*>(self), "SFTouchDelegate");
#else
   tolua_pushusertype(tolua_S,(void*)((SFTouchDelegate*)self), "SFTouchDelegate");
#endif
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_new00
static int tolua_LuaFramework_SFGameScene_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFGameScene* tolua_ret = (SFGameScene*)  Mtolua_new((SFGameScene)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGameScene");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_new00_local
static int tolua_LuaFramework_SFGameScene_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFGameScene* tolua_ret = (SFGameScene*)  Mtolua_new((SFGameScene)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGameScene");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_delete00
static int tolua_LuaFramework_SFGameScene_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithContext of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_initWithContext00
static int tolua_LuaFramework_SFGameScene_initWithContext00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
  std::string context = ((std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithContext'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithContext(context);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithContext'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: gameSceneWithContext of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_gameSceneWithContext00
static int tolua_LuaFramework_SFGameScene_gameSceneWithContext00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  std::string context = ((std::string)  tolua_tocppstring(tolua_S,2,0));
  {
   SFGameScene* tolua_ret = (SFGameScene*)  SFGameScene::gameSceneWithContext(context);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGameScene");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'gameSceneWithContext'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onEnter of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_onEnter00
static int tolua_LuaFramework_SFGameScene_onEnter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onEnter'", NULL);
#endif
  {
   self->onEnter();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onEnter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onExit of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_onExit00
static int tolua_LuaFramework_SFGameScene_onExit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onExit'", NULL);
#endif
  {
   self->onExit();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onExit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getContext of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_getContext00
static int tolua_LuaFramework_SFGameScene_getContext00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getContext'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getContext();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getContext'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameLayerByTag of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_getGameLayerByTag00
static int tolua_LuaFramework_SFGameScene_getGameLayerByTag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
  int tagOfGameLayer = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameLayerByTag'", NULL);
#endif
  {
   CCNode* tolua_ret = (CCNode*)  self->getGameLayerByTag(tagOfGameLayer);
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameLayerByTag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addGameLayer of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_addGameLayer00
static int tolua_LuaFramework_SFGameScene_addGameLayer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
  CCNode* gameLayer = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addGameLayer'", NULL);
#endif
  {
   self->addGameLayer(gameLayer);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addGameLayer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeGameLayer of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_removeGameLayer00
static int tolua_LuaFramework_SFGameScene_removeGameLayer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
  int tagOfGameLayer = ((int)  tolua_tonumber(tolua_S,2,0));
  bool clearUp = ((bool)  tolua_toboolean(tolua_S,3,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeGameLayer'", NULL);
#endif
  {
   self->removeGameLayer(tagOfGameLayer,clearUp);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeGameLayer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeGameLayer of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_removeGameLayer01
static int tolua_LuaFramework_SFGameScene_removeGameLayer01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
  CCNode* gameLayer = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  bool clearUp = ((bool)  tolua_toboolean(tolua_S,3,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeGameLayer'", NULL);
#endif
  {
   self->removeGameLayer(gameLayer,clearUp);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_SFGameScene_removeGameLayer00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getUILayerByTag of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_getUILayerByTag00
static int tolua_LuaFramework_SFGameScene_getUILayerByTag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
  int tagOfUILayer = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getUILayerByTag'", NULL);
#endif
  {
   CCNode* tolua_ret = (CCNode*)  self->getUILayerByTag(tagOfUILayer);
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getUILayerByTag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addUILayer of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_addUILayer00
static int tolua_LuaFramework_SFGameScene_addUILayer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
  CCNode* uiLayer = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addUILayer'", NULL);
#endif
  {
   self->addUILayer(uiLayer);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addUILayer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeUILayer of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_removeUILayer00
static int tolua_LuaFramework_SFGameScene_removeUILayer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
  int tagOfUILayer = ((int)  tolua_tonumber(tolua_S,2,0));
  bool clearUp = ((bool)  tolua_toboolean(tolua_S,3,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeUILayer'", NULL);
#endif
  {
   self->removeUILayer(tagOfUILayer,clearUp);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeUILayer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeUILayer of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_removeUILayer01
static int tolua_LuaFramework_SFGameScene_removeUILayer01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
  CCNode* uiLayer = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  bool clearUp = ((bool)  tolua_toboolean(tolua_S,3,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeUILayer'", NULL);
#endif
  {
   self->removeUILayer(uiLayer,clearUp);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_SFGameScene_removeUILayer00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDialogLayerByTag of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_getDialogLayerByTag00
static int tolua_LuaFramework_SFGameScene_getDialogLayerByTag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
  int tagOfDialogLayer = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDialogLayerByTag'", NULL);
#endif
  {
   CCNode* tolua_ret = (CCNode*)  self->getDialogLayerByTag(tagOfDialogLayer);
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDialogLayerByTag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addDialogLayer of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_addDialogLayer00
static int tolua_LuaFramework_SFGameScene_addDialogLayer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
  CCNode* dialogLayer = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addDialogLayer'", NULL);
#endif
  {
   self->addDialogLayer(dialogLayer);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addDialogLayer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeDialogLayer of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_removeDialogLayer00
static int tolua_LuaFramework_SFGameScene_removeDialogLayer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
  int tagOfDialogLayer = ((int)  tolua_tonumber(tolua_S,2,0));
  bool clearUp = ((bool)  tolua_toboolean(tolua_S,3,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeDialogLayer'", NULL);
#endif
  {
   self->removeDialogLayer(tagOfDialogLayer,clearUp);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeDialogLayer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeDialogLayer of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_removeDialogLayer01
static int tolua_LuaFramework_SFGameScene_removeDialogLayer01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
  CCNode* dialogLyer = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  bool clearUp = ((bool)  tolua_toboolean(tolua_S,3,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeDialogLayer'", NULL);
#endif
  {
   self->removeDialogLayer(dialogLyer,clearUp);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_SFGameScene_removeDialogLayer00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: addSceneEventHandler of class  SFGameScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameScene_addSceneEventHandler00
static int tolua_LuaFramework_SFGameScene_addSceneEventHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameScene",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !toluafix_isfunction(tolua_S,3,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameScene* self = (SFGameScene*)  tolua_tousertype(tolua_S,1,0);
  int event = ((int)  tolua_tonumber(tolua_S,2,0));
  LUA_FUNCTION nHandler = (  toluafix_ref_function(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addSceneEventHandler'", NULL);
#endif
  {
   self->addSceneEventHandler(event,nHandler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addSceneEventHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFGameSceneMgr */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSceneMgr_new00
static int tolua_LuaFramework_SFGameSceneMgr_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameSceneMgr",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFGameSceneMgr* tolua_ret = (SFGameSceneMgr*)  Mtolua_new((SFGameSceneMgr)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGameSceneMgr");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFGameSceneMgr */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSceneMgr_new00_local
static int tolua_LuaFramework_SFGameSceneMgr_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameSceneMgr",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFGameSceneMgr* tolua_ret = (SFGameSceneMgr*)  Mtolua_new((SFGameSceneMgr)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGameSceneMgr");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFGameSceneMgr */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSceneMgr_delete00
static int tolua_LuaFramework_SFGameSceneMgr_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSceneMgr",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSceneMgr* self = (SFGameSceneMgr*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  SFGameSceneMgr */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSceneMgr_init00
static int tolua_LuaFramework_SFGameSceneMgr_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSceneMgr",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSceneMgr* self = (SFGameSceneMgr*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: gameSceneMgr of class  SFGameSceneMgr */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSceneMgr_gameSceneMgr00
static int tolua_LuaFramework_SFGameSceneMgr_gameSceneMgr00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameSceneMgr",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFGameSceneMgr* tolua_ret = (SFGameSceneMgr*)  SFGameSceneMgr::gameSceneMgr();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGameSceneMgr");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'gameSceneMgr'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addGameScene of class  SFGameSceneMgr */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSceneMgr_addGameScene00
static int tolua_LuaFramework_SFGameSceneMgr_addGameScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSceneMgr",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFGameScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSceneMgr* self = (SFGameSceneMgr*)  tolua_tousertype(tolua_S,1,0);
  SFGameScene* gameScene = ((SFGameScene*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addGameScene'", NULL);
#endif
  {
   self->addGameScene(gameScene);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addGameScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeGameSceneWithContext of class  SFGameSceneMgr */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSceneMgr_removeGameSceneWithContext00
static int tolua_LuaFramework_SFGameSceneMgr_removeGameSceneWithContext00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSceneMgr",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSceneMgr* self = (SFGameSceneMgr*)  tolua_tousertype(tolua_S,1,0);
  std::string gameSceneContext = ((std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeGameSceneWithContext'", NULL);
#endif
  {
   self->removeGameSceneWithContext(gameSceneContext);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeGameSceneWithContext'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameScene of class  SFGameSceneMgr */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSceneMgr_getGameScene00
static int tolua_LuaFramework_SFGameSceneMgr_getGameScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSceneMgr",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSceneMgr* self = (SFGameSceneMgr*)  tolua_tousertype(tolua_S,1,0);
  std::string context = ((std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameScene'", NULL);
#endif
  {
   SFGameScene* tolua_ret = (SFGameScene*)  self->getGameScene(context);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGameScene");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: handleRecv of class  SFCommunicationListener */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFCommunicationListener_handleRecv00
static int tolua_LuaFramework_SFCommunicationListener_handleRecv00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFCommunicationListener",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"ActionEventBase",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFCommunicationListener* self = (SFCommunicationListener*)  tolua_tousertype(tolua_S,1,0);
  ActionEventBase* recvEvent = ((ActionEventBase*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'handleRecv'", NULL);
#endif
  {
   self->handleRecv(recvEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'handleRecv'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: handleConnected of class  SFTcpConnectionListener */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTcpConnectionListener_handleConnected00
static int tolua_LuaFramework_SFTcpConnectionListener_handleConnected00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTcpConnectionListener",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"ActionEventBase",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTcpConnectionListener* self = (SFTcpConnectionListener*)  tolua_tousertype(tolua_S,1,0);
  ActionEventBase* conEvent = ((ActionEventBase*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'handleConnected'", NULL);
#endif
  {
   self->handleConnected(conEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'handleConnected'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: handleDisconnected of class  SFTcpConnectionListener */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTcpConnectionListener_handleDisconnected00
static int tolua_LuaFramework_SFTcpConnectionListener_handleDisconnected00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTcpConnectionListener",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"ActionEventBase",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTcpConnectionListener* self = (SFTcpConnectionListener*)  tolua_tousertype(tolua_S,1,0);
  ActionEventBase* closeEvent = ((ActionEventBase*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'handleDisconnected'", NULL);
#endif
  {
   self->handleDisconnected(closeEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'handleDisconnected'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: handleHttpResponse of class  SFHttpResponseListener */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFHttpResponseListener_handleHttpResponse00
static int tolua_LuaFramework_SFHttpResponseListener_handleHttpResponse00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFHttpResponseListener",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isstring(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFHttpResponseListener* self = (SFHttpResponseListener*)  tolua_tousertype(tolua_S,1,0);
  int httpState = ((int)  tolua_tonumber(tolua_S,2,0));
  const char* requestTag = ((const char*)  tolua_tostring(tolua_S,3,0));
  const char* responseData = ((const char*)  tolua_tostring(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'handleHttpResponse'", NULL);
#endif
  {
   self->handleHttpResponse(httpState,requestTag,responseData);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'handleHttpResponse'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_new00
static int tolua_LuaFramework_SFGameSimulator_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFGameSimulator* tolua_ret = (SFGameSimulator*)  Mtolua_new((SFGameSimulator)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGameSimulator");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_new00_local
static int tolua_LuaFramework_SFGameSimulator_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFGameSimulator* tolua_ret = (SFGameSimulator*)  Mtolua_new((SFGameSimulator)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGameSimulator");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_delete00
static int tolua_LuaFramework_SFGameSimulator_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: sharedGameSimulator of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_sharedGameSimulator00
static int tolua_LuaFramework_SFGameSimulator_sharedGameSimulator00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFGameSimulator* tolua_ret = (SFGameSimulator*)  SFGameSimulator::sharedGameSimulator();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGameSimulator");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'sharedGameSimulator'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: purgeGameSimulator of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_purgeGameSimulator00
static int tolua_LuaFramework_SFGameSimulator_purgeGameSimulator00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'purgeGameSimulator'", NULL);
#endif
  {
   self->purgeGameSimulator();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'purgeGameSimulator'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPresenterScene of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_getPresenterScene00
static int tolua_LuaFramework_SFGameSimulator_getPresenterScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPresenterScene'", NULL);
#endif
  {
   CCScene* tolua_ret = (CCScene*)  self->getPresenterScene();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCScene");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPresenterScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGamePresenter of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_getGamePresenter00
static int tolua_LuaFramework_SFGameSimulator_getGamePresenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGamePresenter'", NULL);
#endif
  {
   SFGamePresenter* tolua_ret = (SFGamePresenter*)  self->getGamePresenter();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGamePresenter");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGamePresenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBinaryWriter of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_getBinaryWriter00
static int tolua_LuaFramework_SFGameSimulator_getBinaryWriter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
  int eventId = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBinaryWriter'", NULL);
#endif
  {
   iBinaryWriter* tolua_ret = (iBinaryWriter*)  self->getBinaryWriter(eventId);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"iBinaryWriter");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBinaryWriter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCommunicationListener of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_setCommunicationListener00
static int tolua_LuaFramework_SFGameSimulator_setCommunicationListener00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFCommunicationListener",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
  SFCommunicationListener* pListener = ((SFCommunicationListener*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCommunicationListener'", NULL);
#endif
  {
   self->setCommunicationListener(pListener);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCommunicationListener'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setHttpResponseListener of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_setHttpResponseListener00
static int tolua_LuaFramework_SFGameSimulator_setHttpResponseListener00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFHttpResponseListener",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
  SFHttpResponseListener* pListener = ((SFHttpResponseListener*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setHttpResponseListener'", NULL);
#endif
  {
   self->setHttpResponseListener(pListener);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setHttpResponseListener'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: tick of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_tick00
static int tolua_LuaFramework_SFGameSimulator_tick00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'tick'", NULL);
#endif
  {
   self->tick();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'tick'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTpcConnectionHandler of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_setTpcConnectionHandler00
static int tolua_LuaFramework_SFGameSimulator_setTpcConnectionHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION nHandler = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTpcConnectionHandler'", NULL);
#endif
  {
   self->setTpcConnectionHandler(nHandler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTpcConnectionHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: enableTcpCommService of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_enableTcpCommService00
static int tolua_LuaFramework_SFGameSimulator_enableTcpCommService00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'enableTcpCommService'", NULL);
#endif
  {
   self->enableTcpCommService();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'enableTcpCommService'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTcpConnectionListener of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_setTcpConnectionListener00
static int tolua_LuaFramework_SFGameSimulator_setTcpConnectionListener00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFTcpConnectionListener",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
  SFTcpConnectionListener* connectListener = ((SFTcpConnectionListener*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTcpConnectionListener'", NULL);
#endif
  {
   self->setTcpConnectionListener(connectListener);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTcpConnectionListener'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: tcpConnect of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_tcpConnect00
static int tolua_LuaFramework_SFGameSimulator_tcpConnect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !toluafix_isfunction(tolua_S,4,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
  std::string ip = ((std::string)  tolua_tocppstring(tolua_S,2,0));
  int port = ((int)  tolua_tonumber(tolua_S,3,0));
  LUA_FUNCTION nHandler = (  toluafix_ref_function(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'tcpConnect'", NULL);
#endif
  {
   self->tcpConnect(ip,port,nHandler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'tcpConnect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: tcpDisConnect of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_tcpDisConnect00
static int tolua_LuaFramework_SFGameSimulator_tcpDisConnect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'tcpDisConnect'", NULL);
#endif
  {
   self->tcpDisConnect();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'tcpDisConnect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isTcpConnect of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_isTcpConnect00
static int tolua_LuaFramework_SFGameSimulator_isTcpConnect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isTcpConnect'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isTcpConnect();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isTcpConnect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onTcpConnect of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_onTcpConnect00
static int tolua_LuaFramework_SFGameSimulator_onTcpConnect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const cocos2d::EventArgs",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
  const cocos2d::EventArgs* arg = ((const cocos2d::EventArgs*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onTcpConnect'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->onTcpConnect(*arg);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onTcpConnect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onTcpRecv of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_onTcpRecv00
static int tolua_LuaFramework_SFGameSimulator_onTcpRecv00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const cocos2d::EventArgs",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
  const cocos2d::EventArgs* arg = ((const cocos2d::EventArgs*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onTcpRecv'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->onTcpRecv(*arg);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onTcpRecv'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onTcpClose of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_onTcpClose00
static int tolua_LuaFramework_SFGameSimulator_onTcpClose00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const cocos2d::EventArgs",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
  const cocos2d::EventArgs* arg = ((const cocos2d::EventArgs*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onTcpClose'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->onTcpClose(*arg);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onTcpClose'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onRecvGameEvent of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_onRecvGameEvent00
static int tolua_LuaFramework_SFGameSimulator_onRecvGameEvent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"ActionEventBase",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
  ActionEventBase* event = ((ActionEventBase*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onRecvGameEvent'", NULL);
#endif
  {
   self->onRecvGameEvent(event);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onRecvGameEvent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: sendTcpActionEvent of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_sendTcpActionEvent00
static int tolua_LuaFramework_SFGameSimulator_sendTcpActionEvent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"ActionEventBase",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
  ActionEventBase* event = ((ActionEventBase*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'sendTcpActionEvent'", NULL);
#endif
  {
   self->sendTcpActionEvent(event);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'sendTcpActionEvent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: sendTcpActionEventInLua of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_sendTcpActionEventInLua00
static int tolua_LuaFramework_SFGameSimulator_sendTcpActionEventInLua00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"iBinaryWriter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
  iBinaryWriter* writer = ((iBinaryWriter*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'sendTcpActionEventInLua'", NULL);
#endif
  {
   self->sendTcpActionEventInLua(writer);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'sendTcpActionEventInLua'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: sendGetHttpRequest of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_sendGetHttpRequest00
static int tolua_LuaFramework_SFGameSimulator_sendGetHttpRequest00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isstring(tolua_S,4,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
  const char* strUrl = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* requestTag = ((const char*)  tolua_tostring(tolua_S,3,0));
  const char* backupUrl = ((const char*)  tolua_tostring(tolua_S,4,NULL));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'sendGetHttpRequest'", NULL);
#endif
  {
   self->sendGetHttpRequest(strUrl,requestTag,backupUrl);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'sendGetHttpRequest'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: sendPostHttpReuqest of class  SFGameSimulator */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameSimulator_sendPostHttpReuqest00
static int tolua_LuaFramework_SFGameSimulator_sendPostHttpReuqest00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameSimulator",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isstring(tolua_S,5,0,&tolua_err) ||
     !tolua_isstring(tolua_S,6,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameSimulator* self = (SFGameSimulator*)  tolua_tousertype(tolua_S,1,0);
  const char* strUrl = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* strData = ((const char*)  tolua_tostring(tolua_S,3,0));
  int dataLen = ((int)  tolua_tonumber(tolua_S,4,0));
  const char* requestTag = ((const char*)  tolua_tostring(tolua_S,5,0));
  const char* backupUrl = ((const char*)  tolua_tostring(tolua_S,6,NULL));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'sendPostHttpReuqest'", NULL);
#endif
  {
   self->sendPostHttpReuqest(strUrl,strData,dataLen,requestTag,backupUrl);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'sendPostHttpReuqest'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFControlFactoryManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlFactoryManager_new00
static int tolua_LuaFramework_SFControlFactoryManager_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFControlFactoryManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFControlFactoryManager* tolua_ret = (SFControlFactoryManager*)  Mtolua_new((SFControlFactoryManager)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFControlFactoryManager");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFControlFactoryManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlFactoryManager_new00_local
static int tolua_LuaFramework_SFControlFactoryManager_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFControlFactoryManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFControlFactoryManager* tolua_ret = (SFControlFactoryManager*)  Mtolua_new((SFControlFactoryManager)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFControlFactoryManager");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFControlFactoryManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlFactoryManager_delete00
static int tolua_LuaFramework_SFControlFactoryManager_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlFactoryManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlFactoryManager* self = (SFControlFactoryManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: LoadAllFacotry of class  SFControlFactoryManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlFactoryManager_LoadAllFacotry00
static int tolua_LuaFramework_SFControlFactoryManager_LoadAllFacotry00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlFactoryManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlFactoryManager* self = (SFControlFactoryManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'LoadAllFacotry'", NULL);
#endif
  {
   self->LoadAllFacotry();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'LoadAllFacotry'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddFactory of class  SFControlFactoryManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlFactoryManager_AddFactory00
static int tolua_LuaFramework_SFControlFactoryManager_AddFactory00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlFactoryManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"SFControlFactory",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlFactoryManager* self = (SFControlFactoryManager*)  tolua_tousertype(tolua_S,1,0);
  const char* controlType = ((const char*)  tolua_tostring(tolua_S,2,0));
  SFControlFactory* factory = ((SFControlFactory*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddFactory'", NULL);
#endif
  {
   self->AddFactory(controlType,factory);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddFactory'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveFactory of class  SFControlFactoryManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlFactoryManager_RemoveFactory00
static int tolua_LuaFramework_SFControlFactoryManager_RemoveFactory00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlFactoryManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlFactoryManager* self = (SFControlFactoryManager*)  tolua_tousertype(tolua_S,1,0);
  const char* controlType = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveFactory'", NULL);
#endif
  {
   self->RemoveFactory(controlType);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveFactory'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFactory of class  SFControlFactoryManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlFactoryManager_getFactory00
static int tolua_LuaFramework_SFControlFactoryManager_getFactory00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlFactoryManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlFactoryManager* self = (SFControlFactoryManager*)  tolua_tousertype(tolua_S,1,0);
  const char* controlType = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFactory'", NULL);
#endif
  {
   SFControlFactory* tolua_ret = (SFControlFactory*)  self->getFactory(controlType);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFControlFactory");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFactory'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: shareCCControlFactoryMgr of class  SFControlFactoryManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlFactoryManager_shareCCControlFactoryMgr00
static int tolua_LuaFramework_SFControlFactoryManager_shareCCControlFactoryMgr00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFControlFactoryManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFControlFactoryManager* tolua_ret = (SFControlFactoryManager*)  SFControlFactoryManager::shareCCControlFactoryMgr();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFControlFactoryManager");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'shareCCControlFactoryMgr'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: CreateControl of class  SFControlFactory */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlFactory_CreateControl00
static int tolua_LuaFramework_SFControlFactory_CreateControl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlFactory",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlFactory* self = (SFControlFactory*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CreateControl'", NULL);
#endif
  {
   CCNode* tolua_ret = (CCNode*)  self->CreateControl();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CreateControl'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: DestroyControl of class  SFControlFactory */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlFactory_DestroyControl00
static int tolua_LuaFramework_SFControlFactory_DestroyControl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlFactory",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlFactory* self = (SFControlFactory*)  tolua_tousertype(tolua_S,1,0);
  CCNode* control = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DestroyControl'", NULL);
#endif
  {
   self->DestroyControl(control);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DestroyControl'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTypeName of class  SFControlFactory */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlFactory_GetTypeName00
static int tolua_LuaFramework_SFControlFactory_GetTypeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFControlFactory",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFControlFactory* self = (const SFControlFactory*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTypeName'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->GetTypeName();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTypeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_new00
static int tolua_LuaFramework_SFMap_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFMap* tolua_ret = (SFMap*)  Mtolua_new((SFMap)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFMap");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_new00_local
static int tolua_LuaFramework_SFMap_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFMap* tolua_ret = (SFMap*)  Mtolua_new((SFMap)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFMap");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_delete00
static int tolua_LuaFramework_SFMap_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: coodMap2Cell of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_coodMap2Cell00
static int tolua_LuaFramework_SFMap_coodMap2Cell00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int mapx = ((int)  tolua_tonumber(tolua_S,2,0));
  int mapy = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   SFPoint tolua_ret = (SFPoint)  SFMap::coodMap2Cell(mapx,mapy);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((SFPoint)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"SFPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(SFPoint));
     tolua_pushusertype(tolua_S,tolua_obj,"SFPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'coodMap2Cell'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: coodCell2Map of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_coodCell2Map00
static int tolua_LuaFramework_SFMap_coodCell2Map00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int cellx = ((int)  tolua_tonumber(tolua_S,2,0));
  int celly = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   SFPoint tolua_ret = (SFPoint)  SFMap::coodCell2Map(cellx,celly);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((SFPoint)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"SFPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(SFPoint));
     tolua_pushusertype(tolua_S,tolua_obj,"SFPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'coodCell2Map'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: loadMap of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_loadMap00
static int tolua_LuaFramework_SFMap_loadMap00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  int id = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'loadMap'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->loadMap(id);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'loadMap'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: saveMap of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_saveMap00
static int tolua_LuaFramework_SFMap_saveMap00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  int id = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'saveMap'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->saveMap(id);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'saveMap'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDefaultId of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_setDefaultId00
static int tolua_LuaFramework_SFMap_setDefaultId00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  int monsterId = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDefaultId'", NULL);
#endif
  {
   self->setDefaultId(monsterId);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDefaultId'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: loadCharacterModel of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_loadCharacterModel00
static int tolua_LuaFramework_SFMap_loadCharacterModel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  int modelId = ((int)  tolua_tonumber(tolua_S,2,0));
  eMapRenderDelMode mode = ((eMapRenderDelMode) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'loadCharacterModel'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->loadCharacterModel(modelId,mode);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'loadCharacterModel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: enterMap of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_enterMap00
static int tolua_LuaFramework_SFMap_enterMap00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !toluafix_isfunction(tolua_S,5,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  int modelId = ((int)  tolua_tonumber(tolua_S,2,0));
  int x = ((int)  tolua_tonumber(tolua_S,3,0));
  int y = ((int)  tolua_tonumber(tolua_S,4,0));
  LUA_FUNCTION callbackHander = (  toluafix_ref_function(tolua_S,5,0));
  eRenderLayerTag tag = ((eRenderLayerTag) (int)  tolua_tonumber(tolua_S,6,0));
  eMapRenderDelMode mode = ((eMapRenderDelMode) (int)  tolua_tonumber(tolua_S,7,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'enterMap'", NULL);
#endif
  {
   RenderSprite* tolua_ret = (RenderSprite*)  self->enterMap(modelId,x,y,callbackHander,tag,mode);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderSprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'enterMap'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: leaveMap of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_leaveMap00
static int tolua_LuaFramework_SFMap_leaveMap00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  CCNode* sprite = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  eMapRenderDelMode mode = ((eMapRenderDelMode) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'leaveMap'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->leaveMap(sprite,mode);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'leaveMap'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: loadMap of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_loadMap01
static int tolua_LuaFramework_SFMap_loadMap01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFMapLoadInterface",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  SFMapLoadInterface* load = ((SFMapLoadInterface*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'loadMap'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->loadMap(load);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFMap_loadMap00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: enterMapAsyn of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_enterMapAsyn00
static int tolua_LuaFramework_SFMap_enterMapAsyn00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !toluafix_isfunction(tolua_S,3,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,5,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  CCNode* sprite = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  LUA_FUNCTION callbackHander = (  toluafix_ref_function(tolua_S,3,0));
  eRenderLayerTag tag = ((eRenderLayerTag) (int)  tolua_tonumber(tolua_S,4,eRenderLayer_Sprite));
  bool filter = ((bool)  tolua_toboolean(tolua_S,5,false));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'enterMapAsyn'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->enterMapAsyn(sprite,callbackHander,tag,filter);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'enterMapAsyn'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: enterMap of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_enterMap01
static int tolua_LuaFramework_SFMap_enterMap01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  CCNode* sprite = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  eRenderLayerTag tag = ((eRenderLayerTag) (int)  tolua_tonumber(tolua_S,3,eRenderLayer_Sprite));
  bool filter = ((bool)  tolua_toboolean(tolua_S,4,false));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'enterMap'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->enterMap(sprite,tag,filter);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFMap_enterMap00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: leaveMap of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_leaveMap01
static int tolua_LuaFramework_SFMap_leaveMap01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  RenderSprite* sprite = ((RenderSprite*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'leaveMap'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->leaveMap(sprite);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFMap_leaveMap00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: leaveMap of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_leaveMap02
static int tolua_LuaFramework_SFMap_leaveMap02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  CCNode* sprite = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'leaveMap'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->leaveMap(sprite);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFMap_leaveMap01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMapWidth of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_getMapWidth00
static int tolua_LuaFramework_SFMap_getMapWidth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFMap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFMap* self = (const SFMap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMapWidth'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getMapWidth();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMapWidth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMapHeight of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_getMapHeight00
static int tolua_LuaFramework_SFMap_getMapHeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFMap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFMap* self = (const SFMap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMapHeight'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getMapHeight();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMapHeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setViewCenter of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_setViewCenter00
static int tolua_LuaFramework_SFMap_setViewCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  unsigned int x = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
  unsigned int y = ((unsigned int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setViewCenter'", NULL);
#endif
  {
   self->setViewCenter(x,y);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setViewCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getViewCenterX of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_getViewCenterX00
static int tolua_LuaFramework_SFMap_getViewCenterX00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFMap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFMap* self = (const SFMap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getViewCenterX'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getViewCenterX();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getViewCenterX'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getViewCenterY of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_getViewCenterY00
static int tolua_LuaFramework_SFMap_getViewCenterY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFMap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFMap* self = (const SFMap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getViewCenterY'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getViewCenterY();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getViewCenterY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setViewBegin of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_setViewBegin00
static int tolua_LuaFramework_SFMap_setViewBegin00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  unsigned int x = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
  unsigned int y = ((unsigned int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setViewBegin'", NULL);
#endif
  {
   self->setViewBegin(x,y);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setViewBegin'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getViewBeginX of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_getViewBeginX00
static int tolua_LuaFramework_SFMap_getViewBeginX00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFMap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFMap* self = (const SFMap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getViewBeginX'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getViewBeginX();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getViewBeginX'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getViewBeginY of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_getViewBeginY00
static int tolua_LuaFramework_SFMap_getViewBeginY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFMap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFMap* self = (const SFMap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getViewBeginY'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getViewBeginY();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getViewBeginY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setViewSize of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_setViewSize00
static int tolua_LuaFramework_SFMap_setViewSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  unsigned int w = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
  unsigned int h = ((unsigned int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setViewSize'", NULL);
#endif
  {
   self->setViewSize(w,h);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setViewSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getViewSizeW of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_getViewSizeW00
static int tolua_LuaFramework_SFMap_getViewSizeW00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFMap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFMap* self = (const SFMap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getViewSizeW'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getViewSizeW();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getViewSizeW'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getViewSizeH of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_getViewSizeH00
static int tolua_LuaFramework_SFMap_getViewSizeH00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFMap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFMap* self = (const SFMap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getViewSizeH'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getViewSizeH();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getViewSizeH'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setScriptHandler of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_setScriptHandler00
static int tolua_LuaFramework_SFMap_setScriptHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION nHandler = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setScriptHandler'", NULL);
#endif
  {
   self->setScriptHandler(nHandler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setScriptHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsBlock of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_IsBlock00
static int tolua_LuaFramework_SFMap_IsBlock00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  int cellx = ((int)  tolua_tonumber(tolua_S,2,0));
  int celly = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsBlock'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->IsBlock(cellx,celly);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsBlock'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsHaveBlock of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_IsHaveBlock00
static int tolua_LuaFramework_SFMap_IsHaveBlock00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  int startX = ((int)  tolua_tonumber(tolua_S,2,0));
  int startY = ((int)  tolua_tonumber(tolua_S,3,0));
  int endX = ((int)  tolua_tonumber(tolua_S,4,0));
  int endY = ((int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsHaveBlock'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->IsHaveBlock(startX,startY,endX,endY);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsHaveBlock'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: findBlock of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_findBlock00
static int tolua_LuaFramework_SFMap_findBlock00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  int startX = ((int)  tolua_tonumber(tolua_S,2,0));
  int startY = ((int)  tolua_tonumber(tolua_S,3,0));
  int endX = ((int)  tolua_tonumber(tolua_S,4,0));
  int endY = ((int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'findBlock'", NULL);
#endif
  {
   SFPoint tolua_ret = (SFPoint)  self->findBlock(startX,startY,endX,endY);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((SFPoint)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"SFPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(SFPoint));
     tolua_pushusertype(tolua_S,tolua_obj,"SFPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'findBlock'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_init00
static int tolua_LuaFramework_SFMap_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   self->init();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: attach of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_attach00
static int tolua_LuaFramework_SFMap_attach00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  CCNode* parent = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'attach'", NULL);
#endif
  {
   self->attach(parent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'attach'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: dettach of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_dettach00
static int tolua_LuaFramework_SFMap_dettach00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'dettach'", NULL);
#endif
  {
   self->dettach();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'dettach'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: injectTouchBegin of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_injectTouchBegin00
static int tolua_LuaFramework_SFMap_injectTouchBegin00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  int sceenX = ((int)  tolua_tonumber(tolua_S,2,0));
  int sceenY = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'injectTouchBegin'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->injectTouchBegin(sceenX,sceenY);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'injectTouchBegin'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: injectTouchEnd of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_injectTouchEnd00
static int tolua_LuaFramework_SFMap_injectTouchEnd00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
  int sceenX = ((int)  tolua_tonumber(tolua_S,2,0));
  int sceenY = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'injectTouchEnd'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->injectTouchEnd(sceenX,sceenY);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'injectTouchEnd'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRenderScene of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_getRenderScene00
static int tolua_LuaFramework_SFMap_getRenderScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRenderScene'", NULL);
#endif
  {
   RenderScene* tolua_ret = (RenderScene*)  self->getRenderScene();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderScene");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRenderScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: OnMapDataLoaded of class  SFMap */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMap_OnMapDataLoaded00
static int tolua_LuaFramework_SFMap_OnMapDataLoaded00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMap* self = (SFMap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'OnMapDataLoaded'", NULL);
#endif
  {
   self->OnMapDataLoaded();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'OnMapDataLoaded'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFMapService */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMapService_new00
static int tolua_LuaFramework_SFMapService_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFMapService",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFMapService* tolua_ret = (SFMapService*)  Mtolua_new((SFMapService)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFMapService");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFMapService */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMapService_new00_local
static int tolua_LuaFramework_SFMapService_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFMapService",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFMapService* tolua_ret = (SFMapService*)  Mtolua_new((SFMapService)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFMapService");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFMapService */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMapService_delete00
static int tolua_LuaFramework_SFMapService_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMapService",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMapService* self = (SFMapService*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: startUp of class  SFMapService */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMapService_startUp00
static int tolua_LuaFramework_SFMapService_startUp00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMapService",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMapService* self = (SFMapService*)  tolua_tousertype(tolua_S,1,0);
  const char* config = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'startUp'", NULL);
#endif
  {
   self->startUp(config);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'startUp'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: shutDown of class  SFMapService */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMapService_shutDown00
static int tolua_LuaFramework_SFMapService_shutDown00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMapService",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMapService* self = (SFMapService*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'shutDown'", NULL);
#endif
  {
   self->shutDown();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'shutDown'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getShareMap of class  SFMapService */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMapService_getShareMap00
static int tolua_LuaFramework_SFMapService_getShareMap00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMapService",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMapService* self = (SFMapService*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getShareMap'", NULL);
#endif
  {
   SFMap* tolua_ret = (SFMap*)  self->getShareMap();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFMap");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getShareMap'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setScriptHandler of class  SFMapService */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMapService_setScriptHandler00
static int tolua_LuaFramework_SFMapService_setScriptHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFMapService",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFMapService* self = (SFMapService*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION scriptHander = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setScriptHandler'", NULL);
#endif
  {
   self->setScriptHandler(scriptHander);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setScriptHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: instance of class  SFMapService */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFMapService_instance00
static int tolua_LuaFramework_SFMapService_instance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFMapService",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFMapService* tolua_ret = (SFMapService*)  SFMapService::instance();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFMapService");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'instance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  GameResource */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_GameResource_new00
static int tolua_LuaFramework_GameResource_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"GameResource",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   GameResource* tolua_ret = (GameResource*)  Mtolua_new((GameResource)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"GameResource");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  GameResource */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_GameResource_new00_local
static int tolua_LuaFramework_GameResource_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"GameResource",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   GameResource* tolua_ret = (GameResource*)  Mtolua_new((GameResource)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"GameResource");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  GameResource */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_GameResource_delete00
static int tolua_LuaFramework_GameResource_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameResource",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameResource* self = (GameResource*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: instance of class  GameResource */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_GameResource_instance00
static int tolua_LuaFramework_GameResource_instance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"GameResource",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   GameResource* tolua_ret = (GameResource*)  GameResource::instance();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"GameResource");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'instance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: reset of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_reset00
static int tolua_LuaFramework_RenderSprite_reset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reset'", NULL);
#endif
  {
   self->reset();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'reset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_new00
static int tolua_LuaFramework_RenderSprite_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   RenderSprite* tolua_ret = (RenderSprite*)  Mtolua_new((RenderSprite)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderSprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_new00_local
static int tolua_LuaFramework_RenderSprite_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   RenderSprite* tolua_ret = (RenderSprite*)  Mtolua_new((RenderSprite)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderSprite");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_delete00
static int tolua_LuaFramework_RenderSprite_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: load of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_load00
static int tolua_LuaFramework_RenderSprite_load00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
  unsigned int modelId = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
  unsigned int defaultId = ((unsigned int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'load'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->load(modelId,defaultId);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'load'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onLeaveMap of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_onLeaveMap00
static int tolua_LuaFramework_RenderSprite_onLeaveMap00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onLeaveMap'", NULL);
#endif
  {
   self->onLeaveMap();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onLeaveMap'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getModelId of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_getModelId00
static int tolua_LuaFramework_RenderSprite_getModelId00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getModelId'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getModelId();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getModelId'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clear of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_clear00
static int tolua_LuaFramework_RenderSprite_clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clear'", NULL);
#endif
  {
   self->clear();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clear'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAngle of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_setAngle00
static int tolua_LuaFramework_RenderSprite_setAngle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
  int dir = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAngle'", NULL);
#endif
  {
   self->setAngle(dir);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAngle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAngle of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_getAngle00
static int tolua_LuaFramework_RenderSprite_getAngle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAngle'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getAngle();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAngle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRenderOffset of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_setRenderOffset00
static int tolua_LuaFramework_RenderSprite_setRenderOffset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCPoint",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
  CCPoint offset = *((CCPoint*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRenderOffset'", NULL);
#endif
  {
   self->setRenderOffset(offset);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRenderOffset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAlpha of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_setAlpha00
static int tolua_LuaFramework_RenderSprite_setAlpha00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
  unsigned char alpha = ((unsigned char)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAlpha'", NULL);
#endif
  {
   self->setAlpha(alpha);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAlpha'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: changeModel of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_changeModel00
static int tolua_LuaFramework_RenderSprite_changeModel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
  int modelId = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'changeModel'", NULL);
#endif
  {
   self->changeModel(modelId);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'changeModel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: changeModelWithDefault of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_changeModelWithDefault00
static int tolua_LuaFramework_RenderSprite_changeModelWithDefault00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
  int modelId = ((int)  tolua_tonumber(tolua_S,2,0));
  int defaultId = ((int)  tolua_tonumber(tolua_S,3,0));
  bool gender = ((bool)  tolua_toboolean(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'changeModelWithDefault'", NULL);
#endif
  {
   self->changeModelWithDefault(modelId,defaultId,gender);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'changeModelWithDefault'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: changeActionCallback of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_changeActionCallback00
static int tolua_LuaFramework_RenderSprite_changeActionCallback00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !toluafix_isfunction(tolua_S,5,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
  int actionId = ((int)  tolua_tonumber(tolua_S,2,0));
  float speed = ((float)  tolua_tonumber(tolua_S,3,0));
  bool loop = ((bool)  tolua_toboolean(tolua_S,4,0));
  LUA_FUNCTION nScriptHandler = (  toluafix_ref_function(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'changeActionCallback'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->changeActionCallback(actionId,speed,loop,nScriptHandler);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'changeActionCallback'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: changeAction of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_changeAction00
static int tolua_LuaFramework_RenderSprite_changeAction00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
  int actionId = ((int)  tolua_tonumber(tolua_S,2,0));
  float speed = ((float)  tolua_tonumber(tolua_S,3,0));
  bool loop = ((bool)  tolua_toboolean(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'changeAction'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->changeAction(actionId,speed,loop);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'changeAction'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimSpeed of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_setAnimSpeed00
static int tolua_LuaFramework_RenderSprite_setAnimSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
  float speed = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimSpeed'", NULL);
#endif
  {
   self->setAnimSpeed(speed);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEnableOpacity of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_setEnableOpacity00
static int tolua_LuaFramework_RenderSprite_setEnableOpacity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEnableOpacity'", NULL);
#endif
  {
   self->setEnableOpacity(enable);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEnableOpacity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: changePartWithDefault of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_changePartWithDefault00
static int tolua_LuaFramework_RenderSprite_changePartWithDefault00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
  int partType = ((int)  tolua_tonumber(tolua_S,2,0));
  int showId = ((int)  tolua_tonumber(tolua_S,3,0));
  bool gender = ((bool)  tolua_toboolean(tolua_S,4,0));
  unsigned int defaultId = ((unsigned int)  tolua_tonumber(tolua_S,5,0));
  short offsetX = ((short)  tolua_tonumber(tolua_S,6,0));
  short offsetY = ((short)  tolua_tonumber(tolua_S,7,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'changePartWithDefault'", NULL);
#endif
  {
   self->changePartWithDefault(partType,showId,gender,defaultId,offsetX,offsetY);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'changePartWithDefault'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPartScale of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_setPartScale00
static int tolua_LuaFramework_RenderSprite_setPartScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
  int partType = ((int)  tolua_tonumber(tolua_S,2,0));
  float scale = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPartScale'", NULL);
#endif
  {
   self->setPartScale(partType,scale);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPartScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPartScale of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_getPartScale00
static int tolua_LuaFramework_RenderSprite_getPartScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
  int partType = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPartScale'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getPartScale(partType);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPartScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setVisiblePart of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_setVisiblePart00
static int tolua_LuaFramework_RenderSprite_setVisiblePart00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
  int partType = ((int)  tolua_tonumber(tolua_S,2,0));
  bool visible = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setVisiblePart'", NULL);
#endif
  {
   self->setVisiblePart(partType,visible);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setVisiblePart'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimNotifyScriptHandler of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_setAnimNotifyScriptHandler00
static int tolua_LuaFramework_RenderSprite_setAnimNotifyScriptHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION nScriptHandler = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimNotifyScriptHandler'", NULL);
#endif
  {
   self->setAnimNotifyScriptHandler(nScriptHandler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimNotifyScriptHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBoundRect of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_getBoundRect00
static int tolua_LuaFramework_RenderSprite_getBoundRect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBoundRect'", NULL);
#endif
  {
   CCRect tolua_ret = (CCRect)  self->getBoundRect();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCRect)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCRect");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCRect));
     tolua_pushusertype(tolua_S,tolua_obj,"CCRect");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBoundRect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getHeadNode of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_getHeadNode00
static int tolua_LuaFramework_RenderSprite_getHeadNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getHeadNode'", NULL);
#endif
  {
   CCNode* tolua_ret = (CCNode*)  self->getHeadNode();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getHeadNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCenterPositionY of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_getCenterPositionY00
static int tolua_LuaFramework_RenderSprite_getCenterPositionY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCenterPositionY'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getCenterPositionY();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCenterPositionY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAlpha of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_getAlpha00
static int tolua_LuaFramework_RenderSprite_getAlpha00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAlpha'", NULL);
#endif
  {
   unsigned char tolua_ret = (unsigned char)  self->getAlpha();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAlpha'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: visit of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_visit00
static int tolua_LuaFramework_RenderSprite_visit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'visit'", NULL);
#endif
  {
   self->visit();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'visit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getZOrder of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_getZOrder00
static int tolua_LuaFramework_RenderSprite_getZOrder00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getZOrder'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getZOrder();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getZOrder'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getContentSize of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_getContentSize00
static int tolua_LuaFramework_RenderSprite_getContentSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getContentSize'", NULL);
#endif
  {
   CCSize& tolua_ret = (CCSize&)  self->getContentSize();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"CCSize");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getContentSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRenderSpriteVisible of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_setRenderSpriteVisible00
static int tolua_LuaFramework_RenderSprite_setRenderSpriteVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
  bool visible = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRenderSpriteVisible'", NULL);
#endif
  {
   self->setRenderSpriteVisible(visible);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRenderSpriteVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRenderSpriteVisible of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_getRenderSpriteVisible00
static int tolua_LuaFramework_RenderSprite_getRenderSpriteVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRenderSpriteVisible'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getRenderSpriteVisible();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRenderSpriteVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getActionId of class  RenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderSprite_getActionId00
static int tolua_LuaFramework_RenderSprite_getActionId00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderSprite* self = (RenderSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getActionId'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getActionId();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getActionId'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  RenderScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderScene_new00
static int tolua_LuaFramework_RenderScene_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"RenderScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   RenderScene* tolua_ret = (RenderScene*)  Mtolua_new((RenderScene)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderScene");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  RenderScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderScene_new00_local
static int tolua_LuaFramework_RenderScene_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"RenderScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   RenderScene* tolua_ret = (RenderScene*)  Mtolua_new((RenderScene)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderScene");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  RenderScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderScene_delete00
static int tolua_LuaFramework_RenderScene_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderScene* self = (RenderScene*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: visit of class  RenderScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderScene_visit00
static int tolua_LuaFramework_RenderScene_visit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderScene* self = (RenderScene*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'visit'", NULL);
#endif
  {
   self->visit();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'visit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: scheduleUpdate of class  RenderScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderScene_scheduleUpdate00
static int tolua_LuaFramework_RenderScene_scheduleUpdate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderScene* self = (RenderScene*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'scheduleUpdate'", NULL);
#endif
  {
   self->scheduleUpdate();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'scheduleUpdate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addChild of class  RenderScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderScene_addChild00
static int tolua_LuaFramework_RenderScene_addChild00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderScene",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderScene* self = (RenderScene*)  tolua_tousertype(tolua_S,1,0);
  CCNode* child = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  int zOrder = ((int)  tolua_tonumber(tolua_S,3,0));
  int tag = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addChild'", NULL);
#endif
  {
   self->addChild(child,zOrder,tag);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addChild'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: update of class  RenderScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderScene_update00
static int tolua_LuaFramework_RenderScene_update00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderScene",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderScene* self = (RenderScene*)  tolua_tousertype(tolua_S,1,0);
  float dt = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'update'", NULL);
#endif
  {
   self->update(dt);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'update'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: load of class  RenderScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderScene_load00
static int tolua_LuaFramework_RenderScene_load00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderScene",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"MemoryStream",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderScene* self = (RenderScene*)  tolua_tousertype(tolua_S,1,0);
  MemoryStream* msback = ((MemoryStream*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'load'", NULL);
#endif
  {
   self->load(*msback);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'load'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMap of class  RenderScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderScene_getMap00
static int tolua_LuaFramework_RenderScene_getMap00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderScene* self = (RenderScene*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMap'", NULL);
#endif
  {
   Map* tolua_ret = (Map*)  self->getMap();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"Map");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMap'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setViewCenter of class  RenderScene */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RenderScene_setViewCenter00
static int tolua_LuaFramework_RenderScene_setViewCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RenderScene",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RenderScene* self = (RenderScene*)  tolua_tousertype(tolua_S,1,0);
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setViewCenter'", NULL);
#endif
  {
   self->setViewCenter(x,y);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setViewCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  RpgSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RpgSprite_new00
static int tolua_LuaFramework_RpgSprite_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"RpgSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   RpgSprite* tolua_ret = (RpgSprite*)  Mtolua_new((RpgSprite)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"RpgSprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  RpgSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RpgSprite_new00_local
static int tolua_LuaFramework_RpgSprite_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"RpgSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   RpgSprite* tolua_ret = (RpgSprite*)  Mtolua_new((RpgSprite)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"RpgSprite");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  RpgSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RpgSprite_delete00
static int tolua_LuaFramework_RpgSprite_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RpgSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RpgSprite* self = (RpgSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  RpgSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RpgSprite_create00
static int tolua_LuaFramework_RpgSprite_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"RpgSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   RpgSprite* tolua_ret = (RpgSprite*)  RpgSprite::create();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"RpgSprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onEnter of class  RpgSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_RpgSprite_onEnter00
static int tolua_LuaFramework_RpgSprite_onEnter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RpgSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RpgSprite* self = (RpgSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onEnter'", NULL);
#endif
  {
   self->onEnter();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onEnter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  CCTableViewCell */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCTableViewCell_new00
static int tolua_LuaFramework_CCTableViewCell_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCTableViewCell",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCTableViewCell* tolua_ret = (CCTableViewCell*)  Mtolua_new((CCTableViewCell)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCTableViewCell");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  CCTableViewCell */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCTableViewCell_new00_local
static int tolua_LuaFramework_CCTableViewCell_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCTableViewCell",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCTableViewCell* tolua_ret = (CCTableViewCell*)  Mtolua_new((CCTableViewCell)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCTableViewCell");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getIdx of class  CCTableViewCell */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCTableViewCell_getIdx00
static int tolua_LuaFramework_CCTableViewCell_getIdx00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCTableViewCell",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCTableViewCell* self = (CCTableViewCell*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getIdx'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getIdx();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getIdx'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setIdx of class  CCTableViewCell */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCTableViewCell_setIdx00
static int tolua_LuaFramework_CCTableViewCell_setIdx00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCTableViewCell",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCTableViewCell* self = (CCTableViewCell*)  tolua_tousertype(tolua_S,1,0);
  unsigned int uIdx = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setIdx'", NULL);
#endif
  {
   self->setIdx(uIdx);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setIdx'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: reset of class  CCTableViewCell */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCTableViewCell_reset00
static int tolua_LuaFramework_CCTableViewCell_reset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCTableViewCell",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCTableViewCell* self = (CCTableViewCell*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reset'", NULL);
#endif
  {
   self->reset();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'reset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setObjectID of class  CCTableViewCell */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCTableViewCell_setObjectID00
static int tolua_LuaFramework_CCTableViewCell_setObjectID00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCTableViewCell",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCTableViewCell* self = (CCTableViewCell*)  tolua_tousertype(tolua_S,1,0);
  unsigned int uIdx = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setObjectID'", NULL);
#endif
  {
   self->setObjectID(uIdx);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setObjectID'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getObjectID of class  CCTableViewCell */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCTableViewCell_getObjectID00
static int tolua_LuaFramework_CCTableViewCell_getObjectID00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCTableViewCell",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCTableViewCell* self = (CCTableViewCell*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getObjectID'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getObjectID();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getObjectID'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setIdentify of class  SFTableViewCell */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableViewCell_setIdentify00
static int tolua_LuaFramework_SFTableViewCell_setIdentify00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableViewCell",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableViewCell* self = (SFTableViewCell*)  tolua_tousertype(tolua_S,1,0);
  const char* strIdentify = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setIdentify'", NULL);
#endif
  {
   self->setIdentify(strIdentify);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setIdentify'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getIdentify of class  SFTableViewCell */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableViewCell_getIdentify00
static int tolua_LuaFramework_SFTableViewCell_getIdentify00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableViewCell",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableViewCell* self = (SFTableViewCell*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getIdentify'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getIdentify();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getIdentify'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFTableViewCell */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableViewCell_create00
static int tolua_LuaFramework_SFTableViewCell_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFTableViewCell",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFTableViewCell* tolua_ret = (SFTableViewCell*)  SFTableViewCell::create();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTableViewCell");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getIndex of class  SFTableViewCell */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableViewCell_getIndex00
static int tolua_LuaFramework_SFTableViewCell_getIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFTableViewCell",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFTableViewCell* self = (const SFTableViewCell*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getIndex'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getIndex();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setIndex of class  SFTableViewCell */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableViewCell_setIndex00
static int tolua_LuaFramework_SFTableViewCell_setIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableViewCell",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableViewCell* self = (SFTableViewCell*)  tolua_tousertype(tolua_S,1,0);
  int var = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setIndex'", NULL);
#endif
  {
   self->setIndex(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: tableCellTouched of class  SFTableViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableViewDelegate_tableCellTouched00
static int tolua_LuaFramework_SFTableViewDelegate_tableCellTouched00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableViewDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFTableView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"SFTableViewCell",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableViewDelegate* self = (SFTableViewDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFTableView* table = ((SFTableView*)  tolua_tousertype(tolua_S,2,0));
  SFTableViewCell* cell = ((SFTableViewCell*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'tableCellTouched'", NULL);
#endif
  {
   self->tableCellTouched(table,cell);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'tableCellTouched'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: tableCellTouched of class  SFTableViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableViewDelegate_tableCellTouched01
static int tolua_LuaFramework_SFTableViewDelegate_tableCellTouched01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableViewDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFTableView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"SFTableViewCell",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"CCPoint",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFTableViewDelegate* self = (SFTableViewDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFTableView* table = ((SFTableView*)  tolua_tousertype(tolua_S,2,0));
  SFTableViewCell* cell = ((SFTableViewCell*)  tolua_tousertype(tolua_S,3,0));
  CCPoint pt = *((CCPoint*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'tableCellTouched'", NULL);
#endif
  {
   self->tableCellTouched(table,cell,pt);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_SFTableViewDelegate_tableCellTouched00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: tableCellHighlight of class  SFTableViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableViewDelegate_tableCellHighlight00
static int tolua_LuaFramework_SFTableViewDelegate_tableCellHighlight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableViewDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFTableView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"SFTableViewCell",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableViewDelegate* self = (SFTableViewDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFTableView* table = ((SFTableView*)  tolua_tousertype(tolua_S,2,0));
  SFTableViewCell* cell = ((SFTableViewCell*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'tableCellHighlight'", NULL);
#endif
  {
   self->tableCellHighlight(table,cell);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'tableCellHighlight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: tableCellUnhighlight of class  SFTableViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableViewDelegate_tableCellUnhighlight00
static int tolua_LuaFramework_SFTableViewDelegate_tableCellUnhighlight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableViewDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFTableView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"SFTableViewCell",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableViewDelegate* self = (SFTableViewDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFTableView* table = ((SFTableView*)  tolua_tousertype(tolua_S,2,0));
  SFTableViewCell* cell = ((SFTableViewCell*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'tableCellUnhighlight'", NULL);
#endif
  {
   self->tableCellUnhighlight(table,cell);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'tableCellUnhighlight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: tableCellWillRecycle of class  SFTableViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableViewDelegate_tableCellWillRecycle00
static int tolua_LuaFramework_SFTableViewDelegate_tableCellWillRecycle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableViewDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFTableView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"SFTableViewCell",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableViewDelegate* self = (SFTableViewDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFTableView* table = ((SFTableView*)  tolua_tousertype(tolua_S,2,0));
  SFTableViewCell* cell = ((SFTableViewCell*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'tableCellWillRecycle'", NULL);
#endif
  {
   self->tableCellWillRecycle(table,cell);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'tableCellWillRecycle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: scrollViewDidScroll of class  SFTableViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableViewDelegate_scrollViewDidScroll00
static int tolua_LuaFramework_SFTableViewDelegate_scrollViewDidScroll00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableViewDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableViewDelegate* self = (SFTableViewDelegate*)  tolua_tousertype(tolua_S,1,0);
  CCScrollView* view = ((CCScrollView*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'scrollViewDidScroll'", NULL);
#endif
  {
   self->scrollViewDidScroll(view);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'scrollViewDidScroll'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: scrollViewDidZoom of class  SFTableViewDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableViewDelegate_scrollViewDidZoom00
static int tolua_LuaFramework_SFTableViewDelegate_scrollViewDidZoom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableViewDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableViewDelegate* self = (SFTableViewDelegate*)  tolua_tousertype(tolua_S,1,0);
  CCScrollView* view = ((CCScrollView*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'scrollViewDidZoom'", NULL);
#endif
  {
   self->scrollViewDidZoom(view);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'scrollViewDidZoom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFTableData */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableData_create00
static int tolua_LuaFramework_SFTableData_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFTableData",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFTableData* tolua_ret = (SFTableData*)  SFTableData::create();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTableData");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setIndex of class  SFTableData */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableData_setIndex00
static int tolua_LuaFramework_SFTableData_setIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableData",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableData* self = (SFTableData*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setIndex'", NULL);
#endif
  {
   self->setIndex(index);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSize of class  SFTableData */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableData_setSize00
static int tolua_LuaFramework_SFTableData_setSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableData",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableData* self = (SFTableData*)  tolua_tousertype(tolua_S,1,0);
  CCSize size = *((CCSize*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSize'", NULL);
#endif
  {
   self->setSize(size);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCell of class  SFTableData */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableData_setCell00
static int tolua_LuaFramework_SFTableData_setCell00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableData",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFTableViewCell",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableData* self = (SFTableData*)  tolua_tousertype(tolua_S,1,0);
  SFTableViewCell* cell = ((SFTableViewCell*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCell'", NULL);
#endif
  {
   self->setCell(cell);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCell'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFTableViewDataSource */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableViewDataSource_delete00
static int tolua_LuaFramework_SFTableViewDataSource_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableViewDataSource",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableViewDataSource* self = (SFTableViewDataSource*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: tableCellSizeForIndex of class  SFTableViewDataSource */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableViewDataSource_tableCellSizeForIndex00
static int tolua_LuaFramework_SFTableViewDataSource_tableCellSizeForIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableViewDataSource",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFTableView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableViewDataSource* self = (SFTableViewDataSource*)  tolua_tousertype(tolua_S,1,0);
  SFTableView* table = ((SFTableView*)  tolua_tousertype(tolua_S,2,0));
  unsigned int idx = ((unsigned int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'tableCellSizeForIndex'", NULL);
#endif
  {
   CCSize tolua_ret = (CCSize)  self->tableCellSizeForIndex(table,idx);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCSize)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCSize));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'tableCellSizeForIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: cellSizeForTable of class  SFTableViewDataSource */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableViewDataSource_cellSizeForTable00
static int tolua_LuaFramework_SFTableViewDataSource_cellSizeForTable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableViewDataSource",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFTableView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableViewDataSource* self = (SFTableViewDataSource*)  tolua_tousertype(tolua_S,1,0);
  SFTableView* table = ((SFTableView*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'cellSizeForTable'", NULL);
#endif
  {
   CCSize tolua_ret = (CCSize)  self->cellSizeForTable(table);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCSize)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCSize));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'cellSizeForTable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: tableCellAtIndex of class  SFTableViewDataSource */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableViewDataSource_tableCellAtIndex00
static int tolua_LuaFramework_SFTableViewDataSource_tableCellAtIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableViewDataSource",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFTableView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableViewDataSource* self = (SFTableViewDataSource*)  tolua_tousertype(tolua_S,1,0);
  SFTableView* table = ((SFTableView*)  tolua_tousertype(tolua_S,2,0));
  unsigned int idx = ((unsigned int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'tableCellAtIndex'", NULL);
#endif
  {
   SFTableViewCell* tolua_ret = (SFTableViewCell*)  self->tableCellAtIndex(table,idx);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTableViewCell");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'tableCellAtIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: numberOfCellsInTableView of class  SFTableViewDataSource */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableViewDataSource_numberOfCellsInTableView00
static int tolua_LuaFramework_SFTableViewDataSource_numberOfCellsInTableView00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableViewDataSource",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFTableView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableViewDataSource* self = (SFTableViewDataSource*)  tolua_tousertype(tolua_S,1,0);
  SFTableView* table = ((SFTableView*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'numberOfCellsInTableView'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->numberOfCellsInTableView(table);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'numberOfCellsInTableView'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_new00
static int tolua_LuaFramework_SFTableView_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFTableView* tolua_ret = (SFTableView*)  Mtolua_new((SFTableView)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTableView");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_new00_local
static int tolua_LuaFramework_SFTableView_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFTableView* tolua_ret = (SFTableView*)  Mtolua_new((SFTableView)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTableView");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_delete00
static int tolua_LuaFramework_SFTableView_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_create00
static int tolua_LuaFramework_SFTableView_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFTableViewDataSource",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableViewDataSource* dataSource = ((SFTableViewDataSource*)  tolua_tousertype(tolua_S,2,0));
  CCSize size = *((CCSize*)  tolua_tousertype(tolua_S,3,0));
  {
   SFTableView* tolua_ret = (SFTableView*)  SFTableView::create(dataSource,size);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTableView");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_create01
static int tolua_LuaFramework_SFTableView_create01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFTableViewDataSource",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCSize",0,&tolua_err)) ||
     !tolua_isusertype(tolua_S,4,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFTableViewDataSource* dataSource = ((SFTableViewDataSource*)  tolua_tousertype(tolua_S,2,0));
  CCSize size = *((CCSize*)  tolua_tousertype(tolua_S,3,0));
  CCNode* container = ((CCNode*)  tolua_tousertype(tolua_S,4,0));
  {
   SFTableView* tolua_ret = (SFTableView*)  SFTableView::create(dataSource,size,container);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTableView");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFTableView_create00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDataSource of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_getDataSource00
static int tolua_LuaFramework_SFTableView_getDataSource00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDataSource'", NULL);
#endif
  {
   SFTableViewDataSource* tolua_ret = (SFTableViewDataSource*)  self->getDataSource();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTableViewDataSource");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDataSource'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDataSource of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_setDataSource00
static int tolua_LuaFramework_SFTableView_setDataSource00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFTableViewDataSource",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  SFTableViewDataSource* source = ((SFTableViewDataSource*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDataSource'", NULL);
#endif
  {
   self->setDataSource(source);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDataSource'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDataHandler of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_setDataHandler00
static int tolua_LuaFramework_SFTableView_setDataHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION nHandler = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDataHandler'", NULL);
#endif
  {
   self->setDataHandler(nHandler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDataHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTableViewHandler of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_setTableViewHandler00
static int tolua_LuaFramework_SFTableView_setTableViewHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION nHander = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTableViewHandler'", NULL);
#endif
  {
   self->setTableViewHandler(nHander);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTableViewHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDelegate of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_getDelegate00
static int tolua_LuaFramework_SFTableView_getDelegate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDelegate'", NULL);
#endif
  {
   SFTableViewDelegate* tolua_ret = (SFTableViewDelegate*)  self->getDelegate();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTableViewDelegate");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDelegate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDelegate of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_setDelegate00
static int tolua_LuaFramework_SFTableView_setDelegate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFTableViewDelegate",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  SFTableViewDelegate* pDelegate = ((SFTableViewDelegate*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDelegate'", NULL);
#endif
  {
   self->setDelegate(pDelegate);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDelegate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setVerticalFillOrder of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_setVerticalFillOrder00
static int tolua_LuaFramework_SFTableView_setVerticalFillOrder00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  SFTableViewVerticalFillOrder order = ((SFTableViewVerticalFillOrder) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setVerticalFillOrder'", NULL);
#endif
  {
   self->setVerticalFillOrder(order);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setVerticalFillOrder'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVerticalFillOrder of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_getVerticalFillOrder00
static int tolua_LuaFramework_SFTableView_getVerticalFillOrder00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVerticalFillOrder'", NULL);
#endif
  {
   SFTableViewVerticalFillOrder tolua_ret = (SFTableViewVerticalFillOrder)  self->getVerticalFillOrder();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVerticalFillOrder'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithViewSize of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_initWithViewSize00
static int tolua_LuaFramework_SFTableView_initWithViewSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCSize",0,&tolua_err)) ||
     !tolua_isusertype(tolua_S,3,"CCNode",1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  CCSize size = *((CCSize*)  tolua_tousertype(tolua_S,2,0));
  CCNode* container = ((CCNode*)  tolua_tousertype(tolua_S,3,NULL));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithViewSize'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithViewSize(size,container);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithViewSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: updateCellAtIndex of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_updateCellAtIndex00
static int tolua_LuaFramework_SFTableView_updateCellAtIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  unsigned int idx = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'updateCellAtIndex'", NULL);
#endif
  {
   self->updateCellAtIndex(idx);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'updateCellAtIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: insertCellAtIndex of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_insertCellAtIndex00
static int tolua_LuaFramework_SFTableView_insertCellAtIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  unsigned int idx = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'insertCellAtIndex'", NULL);
#endif
  {
   self->insertCellAtIndex(idx);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'insertCellAtIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeCellAtIndex of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_removeCellAtIndex00
static int tolua_LuaFramework_SFTableView_removeCellAtIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  unsigned int idx = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeCellAtIndex'", NULL);
#endif
  {
   self->removeCellAtIndex(idx);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeCellAtIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: reloadData of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_reloadData00
static int tolua_LuaFramework_SFTableView_reloadData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reloadData'", NULL);
#endif
  {
   self->reloadData();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'reloadData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: dequeueCell of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_dequeueCell00
static int tolua_LuaFramework_SFTableView_dequeueCell00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'dequeueCell'", NULL);
#endif
  {
   SFTableViewCell* tolua_ret = (SFTableViewCell*)  self->dequeueCell(index);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTableViewCell");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'dequeueCell'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: cellAtIndex of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_cellAtIndex00
static int tolua_LuaFramework_SFTableView_cellAtIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  unsigned int idx = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'cellAtIndex'", NULL);
#endif
  {
   SFTableViewCell* tolua_ret = (SFTableViewCell*)  self->cellAtIndex(idx);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTableViewCell");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'cellAtIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: scroll2Cell of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_scroll2Cell00
static int tolua_LuaFramework_SFTableView_scroll2Cell00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  unsigned int idx = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
  bool animated = ((bool)  tolua_toboolean(tolua_S,3,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'scroll2Cell'", NULL);
#endif
  {
   self->scroll2Cell(idx,animated);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'scroll2Cell'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: scrollViewDidScroll of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_scrollViewDidScroll00
static int tolua_LuaFramework_SFTableView_scrollViewDidScroll00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  CCScrollView* view = ((CCScrollView*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'scrollViewDidScroll'", NULL);
#endif
  {
   self->scrollViewDidScroll(view);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'scrollViewDidScroll'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: scrollViewDidZoom of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_scrollViewDidZoom00
static int tolua_LuaFramework_SFTableView_scrollViewDidZoom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScrollView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  CCScrollView* view = ((CCScrollView*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'scrollViewDidZoom'", NULL);
#endif
  {
   self->scrollViewDidZoom(view);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'scrollViewDidZoom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ccTouchBegan of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_ccTouchBegan00
static int tolua_LuaFramework_SFTableView_ccTouchBegan00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ccTouchBegan'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->ccTouchBegan(pTouch,pEvent);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ccTouchBegan'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ccTouchMoved of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_ccTouchMoved00
static int tolua_LuaFramework_SFTableView_ccTouchMoved00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ccTouchMoved'", NULL);
#endif
  {
   self->ccTouchMoved(pTouch,pEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ccTouchMoved'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ccTouchEnded of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_ccTouchEnded00
static int tolua_LuaFramework_SFTableView_ccTouchEnded00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ccTouchEnded'", NULL);
#endif
  {
   self->ccTouchEnded(pTouch,pEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ccTouchEnded'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ccTouchCancelled of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_ccTouchCancelled00
static int tolua_LuaFramework_SFTableView_ccTouchCancelled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ccTouchCancelled'", NULL);
#endif
  {
   self->ccTouchCancelled(pTouch,pEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ccTouchCancelled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: registerWithTouchDispatcher of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_registerWithTouchDispatcher00
static int tolua_LuaFramework_SFTableView_registerWithTouchDispatcher00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'registerWithTouchDispatcher'", NULL);
#endif
  {
   self->registerWithTouchDispatcher();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'registerWithTouchDispatcher'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSelectedCellIndex of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_getSelectedCellIndex00
static int tolua_LuaFramework_SFTableView_getSelectedCellIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFTableView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFTableView* self = (const SFTableView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSelectedCellIndex'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getSelectedCellIndex();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSelectedCellIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSelectedCellIndex of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView_setSelectedCellIndex00
static int tolua_LuaFramework_SFTableView_setSelectedCellIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
  int var = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSelectedCellIndex'", NULL);
#endif
  {
   self->setSelectedCellIndex(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSelectedCellIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: _updateContentSize of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTableView__updateContentSize00
static int tolua_LuaFramework_SFTableView__updateContentSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTableView",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function '_updateContentSize'", NULL);
#endif
  {
   self->_updateContentSize();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '_updateContentSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: __CCScrollViewDelegate__ of class  SFTableView */
#ifndef TOLUA_DISABLE_tolua_get_SFTableView___CCScrollViewDelegate__
static int tolua_get_SFTableView___CCScrollViewDelegate__(lua_State* tolua_S)
{
  SFTableView* self = (SFTableView*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable '__CCScrollViewDelegate__'",NULL);
#endif
#ifdef __cplusplus
   tolua_pushusertype(tolua_S,(void*)static_cast<CCScrollViewDelegate*>(self), "CCScrollViewDelegate");
#else
   tolua_pushusertype(tolua_S,(void*)((CCScrollViewDelegate*)self), "CCScrollViewDelegate");
#endif
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  PathPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_PathPoint_create00
static int tolua_LuaFramework_PathPoint_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"PathPoint",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
  {
   PathPoint* tolua_ret = (PathPoint*)  PathPoint::create(x,y);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"PathPoint");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getX of class  PathPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_PathPoint_getX00
static int tolua_LuaFramework_PathPoint_getX00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"PathPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  PathPoint* self = (PathPoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getX'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getX();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getX'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getY of class  PathPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_PathPoint_getY00
static int tolua_LuaFramework_PathPoint_getY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"PathPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  PathPoint* self = (PathPoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getY'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getY();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_new00
static int tolua_LuaFramework_SpriteMove_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SpriteMove* tolua_ret = (SpriteMove*)  Mtolua_new((SpriteMove)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SpriteMove");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_new00_local
static int tolua_LuaFramework_SpriteMove_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SpriteMove* tolua_ret = (SpriteMove*)  Mtolua_new((SpriteMove)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SpriteMove");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_delete00
static int tolua_LuaFramework_SpriteMove_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SpriteMove* self = (SpriteMove*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: CreatePath of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_CreatePath00
static int tolua_LuaFramework_SpriteMove_CreatePath00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SpriteMove* self = (SpriteMove*)  tolua_tousertype(tolua_S,1,0);
  int fromx = ((int)  tolua_tonumber(tolua_S,2,0));
  int fromy = ((int)  tolua_tonumber(tolua_S,3,0));
  int fromdir = ((int)  tolua_tonumber(tolua_S,4,0));
  int tox = ((int)  tolua_tonumber(tolua_S,5,0));
  int toy = ((int)  tolua_tonumber(tolua_S,6,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CreatePath'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->CreatePath(fromx,fromy,fromdir,tox,toy);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CreatePath'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ClearPath of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_ClearPath00
static int tolua_LuaFramework_SpriteMove_ClearPath00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SpriteMove* self = (SpriteMove*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ClearPath'", NULL);
#endif
  {
   self->ClearPath();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ClearPath'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSpeed of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_SetSpeed00
static int tolua_LuaFramework_SpriteMove_SetSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SpriteMove* self = (SpriteMove*)  tolua_tousertype(tolua_S,1,0);
  int speed = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSpeed'", NULL);
#endif
  {
   self->SetSpeed(speed);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSpeed of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_GetSpeed00
static int tolua_LuaFramework_SpriteMove_GetSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SpriteMove* self = (SpriteMove*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSpeed'", NULL);
#endif
  {
   int tolua_ret = (int)  self->GetSpeed();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetEndXY of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_GetEndXY00
static int tolua_LuaFramework_SpriteMove_GetEndXY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SpriteMove* self = (SpriteMove*)  tolua_tousertype(tolua_S,1,0);
  int endX = ((int)  tolua_tonumber(tolua_S,2,0));
  int endY = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetEndXY'", NULL);
#endif
  {
   self->GetEndXY(endX,endY);
   tolua_pushnumber(tolua_S,(lua_Number)endX);
   tolua_pushnumber(tolua_S,(lua_Number)endY);
  }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetEndXY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMovePoints of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_getMovePoints00
static int tolua_LuaFramework_SpriteMove_getMovePoints00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SpriteMove* self = (SpriteMove*)  tolua_tousertype(tolua_S,1,0);
  int fromx = ((int)  tolua_tonumber(tolua_S,2,0));
  int fromy = ((int)  tolua_tonumber(tolua_S,3,0));
  int tox = ((int)  tolua_tonumber(tolua_S,4,0));
  int toy = ((int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMovePoints'", NULL);
#endif
  {
   CCArray* tolua_ret = (CCArray*)  self->getMovePoints(fromx,fromy,tox,toy);
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCArray");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMovePoints'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Tick of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_Tick00
static int tolua_LuaFramework_SpriteMove_Tick00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SpriteMove* self = (SpriteMove*)  tolua_tousertype(tolua_S,1,0);
  int curX = ((int)  tolua_tonumber(tolua_S,2,0));
  int curY = ((int)  tolua_tonumber(tolua_S,3,0));
  int dir = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Tick'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Tick(curX,curY,dir);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
   tolua_pushnumber(tolua_S,(lua_Number)curX);
   tolua_pushnumber(tolua_S,(lua_Number)curY);
   tolua_pushnumber(tolua_S,(lua_Number)dir);
  }
 }
 return 4;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Tick'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Init of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_Init00
static int tolua_LuaFramework_SpriteMove_Init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SpriteMove::Init();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: BlockChanged of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_BlockChanged00
static int tolua_LuaFramework_SpriteMove_BlockChanged00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"cocos2d::MemoryStream",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  cocos2d::MemoryStream* stream = ((cocos2d::MemoryStream*)  tolua_tousertype(tolua_S,2,0));
  {
   SpriteMove::BlockChanged(*stream);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'BlockChanged'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: End of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_End00
static int tolua_LuaFramework_SpriteMove_End00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SpriteMove::End();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'End'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsBlock of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_IsBlock00
static int tolua_LuaFramework_SpriteMove_IsBlock00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   bool tolua_ret = (bool)  SpriteMove::IsBlock(x,y);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsBlock'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsHaveBlock of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_IsHaveBlock00
static int tolua_LuaFramework_SpriteMove_IsHaveBlock00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int startX = ((int)  tolua_tonumber(tolua_S,2,0));
  int startY = ((int)  tolua_tonumber(tolua_S,3,0));
  int endX = ((int)  tolua_tonumber(tolua_S,4,0));
  int endY = ((int)  tolua_tonumber(tolua_S,5,0));
  {
   bool tolua_ret = (bool)  SpriteMove::IsHaveBlock(startX,startY,endX,endY);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsHaveBlock'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getX of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_getX00
static int tolua_LuaFramework_SpriteMove_getX00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SpriteMove* self = (SpriteMove*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getX'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getX();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getX'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getY of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_getY00
static int tolua_LuaFramework_SpriteMove_getY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SpriteMove* self = (SpriteMove*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getY'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getY();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDir of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_getDir00
static int tolua_LuaFramework_SpriteMove_getDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SpriteMove* self = (SpriteMove*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDir'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getDir();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getEndX of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_getEndX00
static int tolua_LuaFramework_SpriteMove_getEndX00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SpriteMove* self = (SpriteMove*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getEndX'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getEndX();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getEndX'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getEndY of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_getEndY00
static int tolua_LuaFramework_SpriteMove_getEndY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SpriteMove* self = (SpriteMove*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getEndY'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getEndY();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getEndY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SpriteMove */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SpriteMove_create00
static int tolua_LuaFramework_SpriteMove_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SpriteMove",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SpriteMove* tolua_ret = (SpriteMove*)  SpriteMove::create();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SpriteMove");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: cellFromGrid of class  SFGridBoxDataSource */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBoxDataSource_cellFromGrid00
static int tolua_LuaFramework_SFGridBoxDataSource_cellFromGrid00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBoxDataSource",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFGridBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBoxDataSource* self = (SFGridBoxDataSource*)  tolua_tousertype(tolua_S,1,0);
  SFGridBox* gridBox = ((SFGridBox*)  tolua_tousertype(tolua_S,2,0));
  int index = ((int)  tolua_tonumber(tolua_S,3,0));
  CCSize* gridSize = ((CCSize*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'cellFromGrid'", NULL);
#endif
  {
   CCNode* tolua_ret = (CCNode*)  self->cellFromGrid(gridBox,index,*gridSize);
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'cellFromGrid'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: didClickItem of class  SFGridBoxDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBoxDelegate_didClickItem00
static int tolua_LuaFramework_SFGridBoxDelegate_didClickItem00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBoxDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFGridBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBoxDelegate* self = (SFGridBoxDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFGridBox* gridBox = ((SFGridBox*)  tolua_tousertype(tolua_S,2,0));
  int index = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'didClickItem'", NULL);
#endif
  {
   self->didClickItem(gridBox,index);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'didClickItem'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: didDoubleClickItem of class  SFGridBoxDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBoxDelegate_didDoubleClickItem00
static int tolua_LuaFramework_SFGridBoxDelegate_didDoubleClickItem00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBoxDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFGridBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBoxDelegate* self = (SFGridBoxDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFGridBox* gridBox = ((SFGridBox*)  tolua_tousertype(tolua_S,2,0));
  int index = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'didDoubleClickItem'", NULL);
#endif
  {
   self->didDoubleClickItem(gridBox,index);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'didDoubleClickItem'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: didLongPressItem of class  SFGridBoxDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBoxDelegate_didLongPressItem00
static int tolua_LuaFramework_SFGridBoxDelegate_didLongPressItem00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBoxDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFGridBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBoxDelegate* self = (SFGridBoxDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFGridBox* gridBox = ((SFGridBox*)  tolua_tousertype(tolua_S,2,0));
  int index = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'didLongPressItem'", NULL);
#endif
  {
   self->didLongPressItem(gridBox,index);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'didLongPressItem'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: didMoveItem of class  SFGridBoxDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBoxDelegate_didMoveItem00
static int tolua_LuaFramework_SFGridBoxDelegate_didMoveItem00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBoxDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFGridBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,5,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBoxDelegate* self = (SFGridBoxDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFGridBox* gridBox = ((SFGridBox*)  tolua_tousertype(tolua_S,2,0));
  int index = ((int)  tolua_tonumber(tolua_S,3,0));
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,4,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'didMoveItem'", NULL);
#endif
  {
   self->didMoveItem(gridBox,index,pTouch,pEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'didMoveItem'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: didTouchEndItem of class  SFGridBoxDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBoxDelegate_didTouchEndItem00
static int tolua_LuaFramework_SFGridBoxDelegate_didTouchEndItem00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBoxDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFGridBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"CCTouch",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,5,"CCEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBoxDelegate* self = (SFGridBoxDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFGridBox* gridBox = ((SFGridBox*)  tolua_tousertype(tolua_S,2,0));
  int index = ((int)  tolua_tonumber(tolua_S,3,0));
  CCTouch* pTouch = ((CCTouch*)  tolua_tousertype(tolua_S,4,0));
  CCEvent* pEvent = ((CCEvent*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'didTouchEndItem'", NULL);
#endif
  {
   self->didTouchEndItem(gridBox,index,pTouch,pEvent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'didTouchEndItem'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_delete00
static int tolua_LuaFramework_SFGridBox_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSize of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_getSize00
static int tolua_LuaFramework_SFGridBox_getSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSize'", NULL);
#endif
  {
   CCSize tolua_ret = (CCSize)  self->getSize();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCSize)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCSize));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_create00
static int tolua_LuaFramework_SFGridBox_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int columns = ((int)  tolua_tonumber(tolua_S,2,0));
  CCSize gridSize = *((CCSize*)  tolua_tousertype(tolua_S,3,0));
  {
   SFGridBox* tolua_ret = (SFGridBox*)  SFGridBox::create(columns,gridSize);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGridBox");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_init00
static int tolua_LuaFramework_SFGridBox_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
  int columns = ((int)  tolua_tonumber(tolua_S,2,0));
  CCSize boxSize = *((CCSize*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init(columns,boxSize);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addGrid of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_addGrid00
static int tolua_LuaFramework_SFGridBox_addGrid00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
  int count = ((int)  tolua_tonumber(tolua_S,2,1));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addGrid'", NULL);
#endif
  {
   self->addGrid(count);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addGrid'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeGrid of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_removeGrid00
static int tolua_LuaFramework_SFGridBox_removeGrid00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
  int count = ((int)  tolua_tonumber(tolua_S,2,1));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeGrid'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->removeGrid(count);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeGrid'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSelIndex of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_getSelIndex00
static int tolua_LuaFramework_SFGridBox_getSelIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSelIndex'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getSelIndex();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSelIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSelIndex of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_setSelIndex00
static int tolua_LuaFramework_SFGridBox_setSelIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
  unsigned int index = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSelIndex'", NULL);
#endif
  {
   self->setSelIndex(index);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSelIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAllMargin of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_setAllMargin00
static int tolua_LuaFramework_SFGridBox_setAllMargin00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
  int margin = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAllMargin'", NULL);
#endif
  {
   self->setAllMargin(margin);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAllMargin'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setHeightMargin of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_setHeightMargin00
static int tolua_LuaFramework_SFGridBox_setHeightMargin00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
  int margin = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setHeightMargin'", NULL);
#endif
  {
   self->setHeightMargin(margin);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setHeightMargin'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setWidthMargin of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_setWidthMargin00
static int tolua_LuaFramework_SFGridBox_setWidthMargin00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
  int margin = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setWidthMargin'", NULL);
#endif
  {
   self->setWidthMargin(margin);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setWidthMargin'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGridSize of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_getGridSize00
static int tolua_LuaFramework_SFGridBox_getGridSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGridSize'", NULL);
#endif
  {
   CCSize tolua_ret = (CCSize)  self->getGridSize();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCSize)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCSize));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGridSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGridCount of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_getGridCount00
static int tolua_LuaFramework_SFGridBox_getGridCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGridCount'", NULL);
#endif
  {
   unsigned tolua_ret = (unsigned)  self->getGridCount();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGridCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: reloadGridBox of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_reloadGridBox00
static int tolua_LuaFramework_SFGridBox_reloadGridBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reloadGridBox'", NULL);
#endif
  {
   self->reloadGridBox();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'reloadGridBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: reloadCellWithIndex of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_reloadCellWithIndex00
static int tolua_LuaFramework_SFGridBox_reloadCellWithIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reloadCellWithIndex'", NULL);
#endif
  {
   self->reloadCellWithIndex(index);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'reloadCellWithIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onEnter of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_onEnter00
static int tolua_LuaFramework_SFGridBox_onEnter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onEnter'", NULL);
#endif
  {
   self->onEnter();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onEnter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onExit of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_onExit00
static int tolua_LuaFramework_SFGridBox_onExit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onExit'", NULL);
#endif
  {
   self->onExit();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onExit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDelegate of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_setDelegate00
static int tolua_LuaFramework_SFGridBox_setDelegate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFGridBoxDelegate",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
  SFGridBoxDelegate* delegate = ((SFGridBoxDelegate*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDelegate'", NULL);
#endif
  {
   self->setDelegate(delegate);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDelegate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDelegateHandler of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_setDelegateHandler00
static int tolua_LuaFramework_SFGridBox_setDelegateHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION nHandler = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDelegateHandler'", NULL);
#endif
  {
   self->setDelegateHandler(nHandler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDelegateHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDataSource of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_setDataSource00
static int tolua_LuaFramework_SFGridBox_setDataSource00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFGridBoxDataSource",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
  SFGridBoxDataSource* dataSource = ((SFGridBoxDataSource*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDataSource'", NULL);
#endif
  {
   self->setDataSource(dataSource);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDataSource'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDataSourceHandler of class  SFGridBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGridBox_setDataSourceHandler00
static int tolua_LuaFramework_SFGridBox_setDataSourceHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGridBox",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGridBox* self = (SFGridBox*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION nHandler = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDataSourceHandler'", NULL);
#endif
  {
   self->setDataSourceHandler(nHandler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDataSourceHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFTimeAxis */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTimeAxis_new00
static int tolua_LuaFramework_SFTimeAxis_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFTimeAxis",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFTimeAxis* tolua_ret = (SFTimeAxis*)  Mtolua_new((SFTimeAxis)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTimeAxis");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFTimeAxis */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTimeAxis_new00_local
static int tolua_LuaFramework_SFTimeAxis_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFTimeAxis",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFTimeAxis* tolua_ret = (SFTimeAxis*)  Mtolua_new((SFTimeAxis)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTimeAxis");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFTimeAxis */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTimeAxis_delete00
static int tolua_LuaFramework_SFTimeAxis_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTimeAxis",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTimeAxis* self = (SFTimeAxis*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Instance of class  SFTimeAxis */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTimeAxis_Instance00
static int tolua_LuaFramework_SFTimeAxis_Instance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFTimeAxis",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFTimeAxis* tolua_ret = (SFTimeAxis*)  SFTimeAxis::Instance();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTimeAxis");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Instance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDelayTime of class  SFTimeAxis */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTimeAxis_getDelayTime00
static int tolua_LuaFramework_SFTimeAxis_getDelayTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTimeAxis",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTimeAxis* self = (SFTimeAxis*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDelayTime'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getDelayTime();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDelayTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getClientTime of class  SFTimeAxis */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTimeAxis_getClientTime00
static int tolua_LuaFramework_SFTimeAxis_getClientTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTimeAxis",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTimeAxis* self = (SFTimeAxis*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getClientTime'", NULL);
#endif
  {
   long long tolua_ret = (long long)  self->getClientTime();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getClientTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: advance of class  SFTimeAxis */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTimeAxis_advance00
static int tolua_LuaFramework_SFTimeAxis_advance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTimeAxis",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTimeAxis* self = (SFTimeAxis*)  tolua_tousertype(tolua_S,1,0);
  int delay = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'advance'", NULL);
#endif
  {
   self->advance(delay);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'advance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRequSyneClientTime of class  SFTimeAxis */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTimeAxis_setRequSyneClientTime00
static int tolua_LuaFramework_SFTimeAxis_setRequSyneClientTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTimeAxis",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTimeAxis* self = (SFTimeAxis*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRequSyneClientTime'", NULL);
#endif
  {
   self->setRequSyneClientTime();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRequSyneClientTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCrtServerTime of class  SFTimeAxis */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTimeAxis_getCrtServerTime00
static int tolua_LuaFramework_SFTimeAxis_getCrtServerTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTimeAxis",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTimeAxis* self = (SFTimeAxis*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCrtServerTime'", NULL);
#endif
  {
   long long tolua_ret = (long long)  self->getCrtServerTime();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCrtServerTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCrtServerTime of class  SFTimeAxis */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTimeAxis_setCrtServerTime00
static int tolua_LuaFramework_SFTimeAxis_setCrtServerTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTimeAxis",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTimeAxis* self = (SFTimeAxis*)  tolua_tousertype(tolua_S,1,0);
  long long serverTime = ((long long)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCrtServerTime'", NULL);
#endif
  {
   self->setCrtServerTime(serverTime);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCrtServerTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBackgroundPauseTime of class  SFTimeAxis */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTimeAxis_getBackgroundPauseTime00
static int tolua_LuaFramework_SFTimeAxis_getBackgroundPauseTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTimeAxis",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTimeAxis* self = (SFTimeAxis*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBackgroundPauseTime'", NULL);
#endif
  {
   long long tolua_ret = (long long)  self->getBackgroundPauseTime();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBackgroundPauseTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: singleTouch of class  SFTouchProtocol */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchProtocol_singleTouch00
static int tolua_LuaFramework_SFTouchProtocol_singleTouch00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTouchProtocol",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCPoint",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTouchProtocol* self = (SFTouchProtocol*)  tolua_tousertype(tolua_S,1,0);
  CCPoint touchPosition = *((CCPoint*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'singleTouch'", NULL);
#endif
  {
   self->singleTouch(touchPosition);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'singleTouch'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: doubleTouch of class  SFTouchProtocol */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchProtocol_doubleTouch00
static int tolua_LuaFramework_SFTouchProtocol_doubleTouch00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTouchProtocol",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCPoint",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTouchProtocol* self = (SFTouchProtocol*)  tolua_tousertype(tolua_S,1,0);
  CCPoint touchPosition = *((CCPoint*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'doubleTouch'", NULL);
#endif
  {
   self->doubleTouch(touchPosition);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'doubleTouch'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: longTouch of class  SFTouchProtocol */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchProtocol_longTouch00
static int tolua_LuaFramework_SFTouchProtocol_longTouch00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTouchProtocol",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCPoint",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTouchProtocol* self = (SFTouchProtocol*)  tolua_tousertype(tolua_S,1,0);
  CCPoint touchPosition = *((CCPoint*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'longTouch'", NULL);
#endif
  {
   self->longTouch(touchPosition);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'longTouch'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFTouchLayer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchLayer_new00
static int tolua_LuaFramework_SFTouchLayer_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFTouchLayer",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFTouchLayer* tolua_ret = (SFTouchLayer*)  Mtolua_new((SFTouchLayer)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTouchLayer");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFTouchLayer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchLayer_new00_local
static int tolua_LuaFramework_SFTouchLayer_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFTouchLayer",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFTouchLayer* tolua_ret = (SFTouchLayer*)  Mtolua_new((SFTouchLayer)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTouchLayer");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFTouchLayer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchLayer_delete00
static int tolua_LuaFramework_SFTouchLayer_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTouchLayer",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTouchLayer* self = (SFTouchLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFTouchLayer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchLayer_create00
static int tolua_LuaFramework_SFTouchLayer_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFTouchLayer",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFTouchLayer* tolua_ret = (SFTouchLayer*)  SFTouchLayer::create();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFTouchLayer");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  SFTouchLayer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchLayer_init00
static int tolua_LuaFramework_SFTouchLayer_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTouchLayer",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTouchLayer* self = (SFTouchLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onExit of class  SFTouchLayer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchLayer_onExit00
static int tolua_LuaFramework_SFTouchLayer_onExit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTouchLayer",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTouchLayer* self = (SFTouchLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onExit'", NULL);
#endif
  {
   self->onExit();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onExit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSwallow of class  SFTouchLayer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchLayer_setSwallow00
static int tolua_LuaFramework_SFTouchLayer_setSwallow00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTouchLayer",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTouchLayer* self = (SFTouchLayer*)  tolua_tousertype(tolua_S,1,0);
  bool swallow = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSwallow'", NULL);
#endif
  {
   self->setSwallow(swallow);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSwallow'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: catchScreen of class  SFTouchLayer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchLayer_catchScreen00
static int tolua_LuaFramework_SFTouchLayer_catchScreen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTouchLayer",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTouchLayer* self = (SFTouchLayer*)  tolua_tousertype(tolua_S,1,0);
  bool isCatch = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'catchScreen'", NULL);
#endif
  {
   self->catchScreen(isCatch);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'catchScreen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setExpandAction of class  SFTouchLayer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchLayer_setExpandAction00
static int tolua_LuaFramework_SFTouchLayer_setExpandAction00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTouchLayer",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTouchLayer* self = (SFTouchLayer*)  tolua_tousertype(tolua_S,1,0);
  bool bExpand = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setExpandAction'", NULL);
#endif
  {
   self->setExpandAction(bExpand);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setExpandAction'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: passHandle of class  SFTouchLayer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFTouchLayer_passHandle00
static int tolua_LuaFramework_SFTouchLayer_passHandle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFTouchLayer",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouchDelegate",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFTouchLayer* self = (SFTouchLayer*)  tolua_tousertype(tolua_S,1,0);
  CCTouchDelegate* touchHandle = ((CCTouchDelegate*)  tolua_tousertype(tolua_S,2,0));
  int distance = ((int)  tolua_tonumber(tolua_S,3,10));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'passHandle'", NULL);
#endif
  {
   self->passHandle(touchHandle,distance);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'passHandle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: __SFTouchProtocol__ of class  SFTouchLayer */
#ifndef TOLUA_DISABLE_tolua_get_SFTouchLayer___SFTouchProtocol__
static int tolua_get_SFTouchLayer___SFTouchProtocol__(lua_State* tolua_S)
{
  SFTouchLayer* self = (SFTouchLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable '__SFTouchProtocol__'",NULL);
#endif
#ifdef __cplusplus
   tolua_pushusertype(tolua_S,(void*)static_cast<SFTouchProtocol*>(self), "SFTouchProtocol");
#else
   tolua_pushusertype(tolua_S,(void*)((SFTouchProtocol*)self), "SFTouchProtocol");
#endif
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: rockerDirection of class  SFJoyRockerDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFJoyRockerDelegate_rockerDirection00
static int tolua_LuaFramework_SFJoyRockerDelegate_rockerDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFJoyRockerDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFJoyRocker",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFJoyRockerDelegate* self = (SFJoyRockerDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFJoyRocker* rocker = ((SFJoyRocker*)  tolua_tousertype(tolua_S,2,0));
  RockerDirection direction = ((RockerDirection) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rockerDirection'", NULL);
#endif
  {
   self->rockerDirection(rocker,direction);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rockerDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rockerFinish of class  SFJoyRockerDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFJoyRockerDelegate_rockerFinish00
static int tolua_LuaFramework_SFJoyRockerDelegate_rockerFinish00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFJoyRockerDelegate",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFJoyRocker",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFJoyRockerDelegate* self = (SFJoyRockerDelegate*)  tolua_tousertype(tolua_S,1,0);
  SFJoyRocker* rocker = ((SFJoyRocker*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rockerFinish'", NULL);
#endif
  {
   self->rockerFinish(rocker);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rockerFinish'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: JoyRockerWithCenter of class  SFJoyRocker */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFJoyRocker_JoyRockerWithCenter00
static int tolua_LuaFramework_SFJoyRocker_JoyRockerWithCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFJoyRocker",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCSprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"CCSprite",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  float aRadius = ((float)  tolua_tonumber(tolua_S,2,0));
  CCSprite* aJsSprite = ((CCSprite*)  tolua_tousertype(tolua_S,3,0));
  CCSprite* aJsBg = ((CCSprite*)  tolua_tousertype(tolua_S,4,0));
  bool _isFollowRole = ((bool)  tolua_toboolean(tolua_S,5,0));
  {
   SFJoyRocker* tolua_ret = (SFJoyRocker*)  SFJoyRocker::JoyRockerWithCenter(aRadius,aJsSprite,aJsBg,_isFollowRole);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFJoyRocker");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'JoyRockerWithCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithCenter of class  SFJoyRocker */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFJoyRocker_initWithCenter00
static int tolua_LuaFramework_SFJoyRocker_initWithCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFJoyRocker",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCSprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"CCSprite",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFJoyRocker* self = (SFJoyRocker*)  tolua_tousertype(tolua_S,1,0);
  float aRadius = ((float)  tolua_tonumber(tolua_S,2,0));
  CCSprite* aJsSprite = ((CCSprite*)  tolua_tousertype(tolua_S,3,0));
  CCSprite* aJsBg = ((CCSprite*)  tolua_tousertype(tolua_S,4,0));
  bool _isFollowRole = ((bool)  tolua_toboolean(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithCenter'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithCenter(aRadius,aJsSprite,aJsBg,_isFollowRole);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setActive of class  SFJoyRocker */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFJoyRocker_setActive00
static int tolua_LuaFramework_SFJoyRocker_setActive00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFJoyRocker",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFJoyRocker* self = (SFJoyRocker*)  tolua_tousertype(tolua_S,1,0);
  bool isActive = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setActive'", NULL);
#endif
  {
   self->setActive(isActive);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setActive'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isActive of class  SFJoyRocker */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFJoyRocker_isActive00
static int tolua_LuaFramework_SFJoyRocker_isActive00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFJoyRocker",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFJoyRocker* self = (SFJoyRocker*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isActive'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isActive();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isActive'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: hideRocker of class  SFJoyRocker */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFJoyRocker_hideRocker00
static int tolua_LuaFramework_SFJoyRocker_hideRocker00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFJoyRocker",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFJoyRocker* self = (SFJoyRocker*)  tolua_tousertype(tolua_S,1,0);
  bool hidden = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'hideRocker'", NULL);
#endif
  {
   self->hideRocker(hidden);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'hideRocker'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDelegate of class  SFJoyRocker */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFJoyRocker_setDelegate00
static int tolua_LuaFramework_SFJoyRocker_setDelegate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFJoyRocker",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFJoyRockerDelegate",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFJoyRocker* self = (SFJoyRocker*)  tolua_tousertype(tolua_S,1,0);
  SFJoyRockerDelegate* delegate = ((SFJoyRockerDelegate*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDelegate'", NULL);
#endif
  {
   self->setDelegate(delegate);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDelegate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDelegateHandler of class  SFJoyRocker */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFJoyRocker_setDelegateHandler00
static int tolua_LuaFramework_SFJoyRocker_setDelegateHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFJoyRocker",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFJoyRocker* self = (SFJoyRocker*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION nHandler = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDelegateHandler'", NULL);
#endif
  {
   self->setDelegateHandler(nHandler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDelegateHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeDelegate of class  SFJoyRocker */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFJoyRocker_removeDelegate00
static int tolua_LuaFramework_SFJoyRocker_removeDelegate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFJoyRocker",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFJoyRocker* self = (SFJoyRocker*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeDelegate'", NULL);
#endif
  {
   self->removeDelegate();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeDelegate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setInActiveRadius of class  SFJoyRocker */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFJoyRocker_setInActiveRadius00
static int tolua_LuaFramework_SFJoyRocker_setInActiveRadius00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFJoyRocker",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFJoyRocker* self = (SFJoyRocker*)  tolua_tousertype(tolua_S,1,0);
  float r = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setInActiveRadius'", NULL);
#endif
  {
   self->setInActiveRadius(r);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setInActiveRadius'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFProgressBar */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFProgressBar_create00
static int tolua_LuaFramework_SFProgressBar_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFProgressBar",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScale9Sprite",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCScale9Sprite* pBarImage = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,2,0));
  CCSize sizeBar = *((CCSize*)  tolua_tousertype(tolua_S,3,0));
  {
   SFProgressBar* tolua_ret = (SFProgressBar*)  SFProgressBar::create(pBarImage,sizeBar);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFProgressBar");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  SFProgressBar */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFProgressBar_init00
static int tolua_LuaFramework_SFProgressBar_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFProgressBar",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFProgressBar* self = (SFProgressBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBackground of class  SFProgressBar */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFProgressBar_setBackground00
static int tolua_LuaFramework_SFProgressBar_setBackground00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFProgressBar",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFProgressBar* self = (SFProgressBar*)  tolua_tousertype(tolua_S,1,0);
  CCScale9Sprite* pBarBg = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBackground'", NULL);
#endif
  {
   self->setBackground(pBarBg);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBackground'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setNumberVisible of class  SFProgressBar */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFProgressBar_setNumberVisible00
static int tolua_LuaFramework_SFProgressBar_setNumberVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFProgressBar",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFProgressBar* self = (SFProgressBar*)  tolua_tousertype(tolua_S,1,0);
  bool bVisible = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setNumberVisible'", NULL);
#endif
  {
   self->setNumberVisible(bVisible);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setNumberVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTextParam of class  SFProgressBar */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFProgressBar_setTextParam00
static int tolua_LuaFramework_SFProgressBar_setTextParam00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFProgressBar",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"ccColor3B",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"ccColor3B",1,&tolua_err)) ||
     !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFProgressBar* self = (SFProgressBar*)  tolua_tousertype(tolua_S,1,0);
  const char* pFontName = ((const char*)  tolua_tostring(tolua_S,2,0));
  int fontSize = ((int)  tolua_tonumber(tolua_S,3,0));
  ccColor3B fontColor = *((ccColor3B*)  tolua_tousertype(tolua_S,4,0));
  const ccColor3B clr = ccBLACK;
  ccColor3B strokeColor = *((ccColor3B*) tolua_tousertype(tolua_S,5,(void*)&clr));
  int stroleSize = ((int)  tolua_tonumber(tolua_S,6,-1));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTextParam'", NULL);
#endif
  {
   self->setTextParam(pFontName,fontSize,fontColor,strokeColor,stroleSize);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTextParam'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaxNumber of class  SFProgressBar */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFProgressBar_setMaxNumber00
static int tolua_LuaFramework_SFProgressBar_setMaxNumber00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFProgressBar",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFProgressBar* self = (SFProgressBar*)  tolua_tousertype(tolua_S,1,0);
  int number = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaxNumber'", NULL);
#endif
  {
   self->setMaxNumber(number);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaxNumber'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaxNumber of class  SFProgressBar */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFProgressBar_getMaxNumber00
static int tolua_LuaFramework_SFProgressBar_getMaxNumber00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFProgressBar",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFProgressBar* self = (SFProgressBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaxNumber'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getMaxNumber();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaxNumber'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCurrentNumber of class  SFProgressBar */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFProgressBar_setCurrentNumber00
static int tolua_LuaFramework_SFProgressBar_setCurrentNumber00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFProgressBar",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFProgressBar* self = (SFProgressBar*)  tolua_tousertype(tolua_S,1,0);
  int number = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCurrentNumber'", NULL);
#endif
  {
   self->setCurrentNumber(number);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCurrentNumber'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCurrentNumber of class  SFProgressBar */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFProgressBar_getCurrentNumber00
static int tolua_LuaFramework_SFProgressBar_getCurrentNumber00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFProgressBar",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFProgressBar* self = (SFProgressBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCurrentNumber'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getCurrentNumber();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurrentNumber'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPercentage of class  SFProgressBar */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFProgressBar_setPercentage00
static int tolua_LuaFramework_SFProgressBar_setPercentage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFProgressBar",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFProgressBar* self = (SFProgressBar*)  tolua_tousertype(tolua_S,1,0);
  int number = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPercentage'", NULL);
#endif
  {
   self->setPercentage(number);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPercentage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPercentage of class  SFProgressBar */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFProgressBar_getPercentage00
static int tolua_LuaFramework_SFProgressBar_getPercentage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFProgressBar",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFProgressBar* self = (SFProgressBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPercentage'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getPercentage();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPercentage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFRichLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRichLabel_create00
static int tolua_LuaFramework_SFRichLabel_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFRichLabel",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFRichLabel* tolua_ret = (SFRichLabel*)  SFRichLabel::create();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFRichLabel");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: appendFormatText of class  SFRichLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRichLabel_appendFormatText00
static int tolua_LuaFramework_SFRichLabel_appendFormatText00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRichLabel",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRichLabel* self = (SFRichLabel*)  tolua_tousertype(tolua_S,1,0);
  const char* pText = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'appendFormatText'", NULL);
#endif
  {
   self->appendFormatText(pText);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'appendFormatText'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clearAll of class  SFRichLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRichLabel_clearAll00
static int tolua_LuaFramework_SFRichLabel_clearAll00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRichLabel",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRichLabel* self = (SFRichLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clearAll'", NULL);
#endif
  {
   self->clearAll();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clearAll'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEventHandler of class  SFRichLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRichLabel_setEventHandler00
static int tolua_LuaFramework_SFRichLabel_setEventHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRichLabel",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRichLabel* self = (SFRichLabel*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION nHandler = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEventHandler'", NULL);
#endif
  {
   self->setEventHandler(nHandler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEventHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFont of class  SFRichLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRichLabel_setFont00
static int tolua_LuaFramework_SFRichLabel_setFont00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRichLabel",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRichLabel* self = (SFRichLabel*)  tolua_tousertype(tolua_S,1,0);
  const char* font = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFont'", NULL);
#endif
  {
   self->setFont(font);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFont'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFontSize of class  SFRichLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRichLabel_setFontSize00
static int tolua_LuaFramework_SFRichLabel_setFontSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRichLabel",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRichLabel* self = (SFRichLabel*)  tolua_tousertype(tolua_S,1,0);
  int size = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFontSize'", NULL);
#endif
  {
   self->setFontSize(size);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFontSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setGaps of class  SFRichLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRichLabel_setGaps00
static int tolua_LuaFramework_SFRichLabel_setGaps00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRichLabel",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRichLabel* self = (SFRichLabel*)  tolua_tousertype(tolua_S,1,0);
  float gap = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setGaps'", NULL);
#endif
  {
   self->setGaps(gap);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setGaps'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGaps of class  SFRichLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRichLabel_getGaps00
static int tolua_LuaFramework_SFRichLabel_getGaps00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRichLabel",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRichLabel* self = (SFRichLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGaps'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getGaps();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGaps'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDimensions of class  SFRichLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRichLabel_getDimensions00
static int tolua_LuaFramework_SFRichLabel_getDimensions00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRichLabel",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRichLabel* self = (SFRichLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDimensions'", NULL);
#endif
  {
   CCSize tolua_ret = (CCSize)  self->getDimensions();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCSize)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCSize));
     tolua_pushusertype(tolua_S,tolua_obj,"CCSize");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDimensions'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDimensions of class  SFRichLabel */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRichLabel_setDimensions00
static int tolua_LuaFramework_SFRichLabel_setDimensions00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRichLabel",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRichLabel* self = (SFRichLabel*)  tolua_tousertype(tolua_S,1,0);
  CCSize var = *((CCSize*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDimensions'", NULL);
#endif
  {
   self->setDimensions(var);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDimensions'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFCheckBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFCheckBox_new00
static int tolua_LuaFramework_SFCheckBox_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFCheckBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFCheckBox* tolua_ret = (SFCheckBox*)  Mtolua_new((SFCheckBox)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFCheckBox");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFCheckBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFCheckBox_new00_local
static int tolua_LuaFramework_SFCheckBox_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFCheckBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFCheckBox* tolua_ret = (SFCheckBox*)  Mtolua_new((SFCheckBox)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFCheckBox");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFCheckBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFCheckBox_delete00
static int tolua_LuaFramework_SFCheckBox_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFCheckBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFCheckBox* self = (SFCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFCheckBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFCheckBox_create00
static int tolua_LuaFramework_SFCheckBox_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFCheckBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFCheckBox* tolua_ret = (SFCheckBox*)  SFCheckBox::create();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFCheckBox");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initControl of class  SFCheckBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFCheckBox_initControl00
static int tolua_LuaFramework_SFCheckBox_initControl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFCheckBox",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !toluafix_isfunction(tolua_S,4,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFCheckBox* self = (SFCheckBox*)  tolua_tousertype(tolua_S,1,0);
  const char* normal = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* select = ((const char*)  tolua_tostring(tolua_S,3,0));
  LUA_FUNCTION nHandler = (  toluafix_ref_function(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initControl'", NULL);
#endif
  {
   self->initControl(normal,select,nHandler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initControl'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSelect of class  SFCheckBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFCheckBox_setSelect00
static int tolua_LuaFramework_SFCheckBox_setSelect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFCheckBox",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFCheckBox* self = (SFCheckBox*)  tolua_tousertype(tolua_S,1,0);
  bool bSelect = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSelect'", NULL);
#endif
  {
   self->setSelect(bSelect);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSelect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSelect of class  SFCheckBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFCheckBox_getSelect00
static int tolua_LuaFramework_SFCheckBox_getSelect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFCheckBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFCheckBox* self = (SFCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSelect'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getSelect();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSelect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEnable of class  SFCheckBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFCheckBox_setEnable00
static int tolua_LuaFramework_SFCheckBox_setEnable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFCheckBox",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFCheckBox* self = (SFCheckBox*)  tolua_tousertype(tolua_S,1,0);
  bool bEnable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEnable'", NULL);
#endif
  {
   self->setEnable(bEnable);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEnable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getEnable of class  SFCheckBox */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFCheckBox_getEnable00
static int tolua_LuaFramework_SFCheckBox_getEnable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFCheckBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFCheckBox* self = (SFCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getEnable'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getEnable();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getEnable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithTexture of class  SFGraySprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGraySprite_initWithTexture00
static int tolua_LuaFramework_SFGraySprite_initWithTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGraySprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTexture2D",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const CCRect",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGraySprite* self = (SFGraySprite*)  tolua_tousertype(tolua_S,1,0);
  CCTexture2D* texture = ((CCTexture2D*)  tolua_tousertype(tolua_S,2,0));
  const CCRect* rect = ((const CCRect*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithTexture'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithTexture(texture,*rect);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: draw of class  SFGraySprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGraySprite_draw00
static int tolua_LuaFramework_SFGraySprite_draw00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGraySprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGraySprite* self = (SFGraySprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'draw'", NULL);
#endif
  {
   self->draw();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'draw'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initProgram of class  SFGraySprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGraySprite_initProgram00
static int tolua_LuaFramework_SFGraySprite_initProgram00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGraySprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGraySprite* self = (SFGraySprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initProgram'", NULL);
#endif
  {
   self->initProgram();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initProgram'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: listenBackToForeground of class  SFGraySprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGraySprite_listenBackToForeground00
static int tolua_LuaFramework_SFGraySprite_listenBackToForeground00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGraySprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGraySprite* self = (SFGraySprite*)  tolua_tousertype(tolua_S,1,0);
  CCObject* obj = ((CCObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'listenBackToForeground'", NULL);
#endif
  {
   self->listenBackToForeground(obj);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'listenBackToForeground'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFGraySprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGraySprite_create00
static int tolua_LuaFramework_SFGraySprite_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGraySprite",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* pszFileName = ((const char*)  tolua_tostring(tolua_S,2,0));
  {
   SFGraySprite* tolua_ret = (SFGraySprite*)  SFGraySprite::create(pszFileName);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGraySprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createRenderSprite of class  SFRenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRenderSprite_createRenderSprite00
static int tolua_LuaFramework_SFRenderSprite_createRenderSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFRenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  unsigned int modelId = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
  unsigned int defaultId = ((unsigned int)  tolua_tonumber(tolua_S,3,0));
  {
   SFRenderSprite* tolua_ret = (SFRenderSprite*)  SFRenderSprite::createRenderSprite(modelId,defaultId);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFRenderSprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createRenderSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  SFRenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRenderSprite_init00
static int tolua_LuaFramework_SFRenderSprite_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRenderSprite* self = (SFRenderSprite*)  tolua_tousertype(tolua_S,1,0);
  unsigned int modelId = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init(modelId);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: changeModel of class  SFRenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRenderSprite_changeModel00
static int tolua_LuaFramework_SFRenderSprite_changeModel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRenderSprite* self = (SFRenderSprite*)  tolua_tousertype(tolua_S,1,0);
  unsigned int modelId = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
  bool gender = ((bool)  tolua_toboolean(tolua_S,3,false));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'changeModel'", NULL);
#endif
  {
   self->changeModel(modelId,gender);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'changeModel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: changeModelPart of class  SFRenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRenderSprite_changeModelPart00
static int tolua_LuaFramework_SFRenderSprite_changeModelPart00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRenderSprite* self = (SFRenderSprite*)  tolua_tousertype(tolua_S,1,0);
  int partId = ((int)  tolua_tonumber(tolua_S,2,0));
  unsigned int modelId = ((unsigned int)  tolua_tonumber(tolua_S,3,0));
  bool visible = ((bool)  tolua_toboolean(tolua_S,4,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'changeModelPart'", NULL);
#endif
  {
   self->changeModelPart(partId,modelId,visible);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'changeModelPart'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: changeModelPart of class  SFRenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRenderSprite_changeModelPart01
static int tolua_LuaFramework_SFRenderSprite_changeModelPart01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const CCPoint",0,&tolua_err)) ||
     !tolua_isboolean(tolua_S,5,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,6,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFRenderSprite* self = (SFRenderSprite*)  tolua_tousertype(tolua_S,1,0);
  int partId = ((int)  tolua_tonumber(tolua_S,2,0));
  unsigned int modelId = ((unsigned int)  tolua_tonumber(tolua_S,3,0));
  const CCPoint* position = ((const CCPoint*)  tolua_tousertype(tolua_S,4,0));
  bool visible = ((bool)  tolua_toboolean(tolua_S,5,true));
  bool gender = ((bool)  tolua_toboolean(tolua_S,6,false));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'changeModelPart'", NULL);
#endif
  {
   self->changeModelPart(partId,modelId,*position,visible,gender);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_SFRenderSprite_changeModelPart00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setScriptHandler of class  SFRenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRenderSprite_setScriptHandler00
static int tolua_LuaFramework_SFRenderSprite_setScriptHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRenderSprite",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRenderSprite* self = (SFRenderSprite*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION scriptHander = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setScriptHandler'", NULL);
#endif
  {
   self->setScriptHandler(scriptHander);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setScriptHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimationSpeed of class  SFRenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRenderSprite_setAnimationSpeed00
static int tolua_LuaFramework_SFRenderSprite_setAnimationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRenderSprite* self = (SFRenderSprite*)  tolua_tousertype(tolua_S,1,0);
  float speed = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimationSpeed'", NULL);
#endif
  {
   self->setAnimationSpeed(speed);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getModelId of class  SFRenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRenderSprite_getModelId00
static int tolua_LuaFramework_SFRenderSprite_getModelId00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRenderSprite* self = (SFRenderSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getModelId'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getModelId();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getModelId'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getContentSize of class  SFRenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRenderSprite_getContentSize00
static int tolua_LuaFramework_SFRenderSprite_getContentSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRenderSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRenderSprite* self = (SFRenderSprite*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getContentSize'", NULL);
#endif
  {
   const CCSize& tolua_ret = (const CCSize&)  self->getContentSize();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const CCSize");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getContentSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createRenderSprite of class  SFRenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRenderSprite_createRenderSprite01
static int tolua_LuaFramework_SFRenderSprite_createRenderSprite01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFRenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isstring(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  unsigned int modelId = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
  int actionId = ((int)  tolua_tonumber(tolua_S,3,0));
  const char* path = ((const char*)  tolua_tostring(tolua_S,4,0));
  {
   SFRenderSprite* tolua_ret = (SFRenderSprite*)  SFRenderSprite::createRenderSprite(modelId,actionId,path);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFRenderSprite");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFRenderSprite_createRenderSprite00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  SFRenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRenderSprite_init01
static int tolua_LuaFramework_SFRenderSprite_init01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isstring(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  SFRenderSprite* self = (SFRenderSprite*)  tolua_tousertype(tolua_S,1,0);
  unsigned int modelId = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
  int actionId = ((int)  tolua_tonumber(tolua_S,3,0));
  const char* path = ((const char*)  tolua_tostring(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init(modelId,actionId,path);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFRenderSprite_init00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: playByIndexLua of class  SFRenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRenderSprite_playByIndexLua00
static int tolua_LuaFramework_SFRenderSprite_playByIndexLua00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRenderSprite* self = (SFRenderSprite*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'playByIndexLua'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->playByIndexLua(index);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'playByIndexLua'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: playByDirLua of class  SFRenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRenderSprite_playByDirLua00
static int tolua_LuaFramework_SFRenderSprite_playByDirLua00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRenderSprite* self = (SFRenderSprite*)  tolua_tousertype(tolua_S,1,0);
  int dir = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'playByDirLua'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->playByDirLua(dir);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'playByDirLua'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOpacity of class  SFRenderSprite */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFRenderSprite_setOpacity00
static int tolua_LuaFramework_SFRenderSprite_setOpacity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFRenderSprite",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFRenderSprite* self = (SFRenderSprite*)  tolua_tousertype(tolua_S,1,0);
  unsigned char opacity = ((unsigned char)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOpacity'", NULL);
#endif
  {
   self->setOpacity(opacity);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOpacity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getValue of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_getValue00
static int tolua_LuaFramework_CCControlSlider_getValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlSlider* self = (const CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getValue'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getValue();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setValue of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_setValue00
static int tolua_LuaFramework_CCControlSlider_setValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlSlider* self = (CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
  float val = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setValue'", NULL);
#endif
  {
   self->setValue(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMinimumValue of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_getMinimumValue00
static int tolua_LuaFramework_CCControlSlider_getMinimumValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlSlider* self = (const CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMinimumValue'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getMinimumValue();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMinimumValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMinimumValue of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_setMinimumValue00
static int tolua_LuaFramework_CCControlSlider_setMinimumValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlSlider* self = (CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
  float val = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMinimumValue'", NULL);
#endif
  {
   self->setMinimumValue(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMinimumValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaximumValue of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_getMaximumValue00
static int tolua_LuaFramework_CCControlSlider_getMaximumValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlSlider* self = (const CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaximumValue'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getMaximumValue();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaximumValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaximumValue of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_setMaximumValue00
static int tolua_LuaFramework_CCControlSlider_setMaximumValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlSlider* self = (CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
  float val = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaximumValue'", NULL);
#endif
  {
   self->setMaximumValue(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaximumValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaximumValue of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_setMaximumValue01
static int tolua_LuaFramework_CCControlSlider_setMaximumValue01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCControlSlider* self = (CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
  float val = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaximumValue'", NULL);
#endif
  {
   self->setMaximumValue(val);
  }
 }
 return 0;
tolua_lerror:
 return tolua_LuaFramework_CCControlSlider_setMaximumValue00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEnabled of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_setEnabled00
static int tolua_LuaFramework_CCControlSlider_setEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlSlider* self = (CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
  bool enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEnabled'", NULL);
#endif
  {
   self->setEnabled(enabled);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isTouchInside of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_isTouchInside00
static int tolua_LuaFramework_CCControlSlider_isTouchInside00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlSlider* self = (CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* touch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isTouchInside'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isTouchInside(touch);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isTouchInside'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: locationFromTouch of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_locationFromTouch00
static int tolua_LuaFramework_CCControlSlider_locationFromTouch00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlSlider* self = (CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* touch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'locationFromTouch'", NULL);
#endif
  {
   CCPoint tolua_ret = (CCPoint)  self->locationFromTouch(touch);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCPoint)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCPoint));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'locationFromTouch'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMinimumAllowedValue of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_getMinimumAllowedValue00
static int tolua_LuaFramework_CCControlSlider_getMinimumAllowedValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlSlider* self = (const CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMinimumAllowedValue'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getMinimumAllowedValue();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMinimumAllowedValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMinimumAllowedValue of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_setMinimumAllowedValue00
static int tolua_LuaFramework_CCControlSlider_setMinimumAllowedValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlSlider* self = (CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
  float val = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMinimumAllowedValue'", NULL);
#endif
  {
   self->setMinimumAllowedValue(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMinimumAllowedValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaximumAllowedValue of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_getMaximumAllowedValue00
static int tolua_LuaFramework_CCControlSlider_getMaximumAllowedValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlSlider* self = (const CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaximumAllowedValue'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getMaximumAllowedValue();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaximumAllowedValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaximumAllowedValue of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_setMaximumAllowedValue00
static int tolua_LuaFramework_CCControlSlider_setMaximumAllowedValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlSlider* self = (CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
  float val = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaximumAllowedValue'", NULL);
#endif
  {
   self->setMaximumAllowedValue(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaximumAllowedValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getThumbSprite of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_getThumbSprite00
static int tolua_LuaFramework_CCControlSlider_getThumbSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlSlider* self = (const CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getThumbSprite'", NULL);
#endif
  {
   CCSprite* tolua_ret = (CCSprite*)  self->getThumbSprite();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCSprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getThumbSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setThumbSprite of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_setThumbSprite00
static int tolua_LuaFramework_CCControlSlider_setThumbSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlSlider* self = (CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
  CCSprite* val = ((CCSprite*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setThumbSprite'", NULL);
#endif
  {
   self->setThumbSprite(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setThumbSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getProgressSprite of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_getProgressSprite00
static int tolua_LuaFramework_CCControlSlider_getProgressSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlSlider* self = (const CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getProgressSprite'", NULL);
#endif
  {
   CCSprite* tolua_ret = (CCSprite*)  self->getProgressSprite();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCSprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getProgressSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setProgressSprite of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_setProgressSprite00
static int tolua_LuaFramework_CCControlSlider_setProgressSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlSlider* self = (CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
  CCSprite* val = ((CCSprite*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setProgressSprite'", NULL);
#endif
  {
   self->setProgressSprite(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setProgressSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBackgroundSprite of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_getBackgroundSprite00
static int tolua_LuaFramework_CCControlSlider_getBackgroundSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCControlSlider* self = (const CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBackgroundSprite'", NULL);
#endif
  {
   CCSprite* tolua_ret = (CCSprite*)  self->getBackgroundSprite();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCSprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBackgroundSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBackgroundSprite of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_setBackgroundSprite00
static int tolua_LuaFramework_CCControlSlider_setBackgroundSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlSlider* self = (CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
  CCSprite* val = ((CCSprite*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBackgroundSprite'", NULL);
#endif
  {
   self->setBackgroundSprite(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBackgroundSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_new00
static int tolua_LuaFramework_CCControlSlider_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCControlSlider* tolua_ret = (CCControlSlider*)  Mtolua_new((CCControlSlider)());
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCControlSlider");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_new00_local
static int tolua_LuaFramework_CCControlSlider_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCControlSlider* tolua_ret = (CCControlSlider*)  Mtolua_new((CCControlSlider)());
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCControlSlider");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_delete00
static int tolua_LuaFramework_CCControlSlider_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlSlider* self = (CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithSprites of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_initWithSprites00
static int tolua_LuaFramework_CCControlSlider_initWithSprites00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCSprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCSprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"CCSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlSlider* self = (CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
  CCSprite* backgroundSprite = ((CCSprite*)  tolua_tousertype(tolua_S,2,0));
  CCSprite* progressSprite = ((CCSprite*)  tolua_tousertype(tolua_S,3,0));
  CCSprite* thumbSprite = ((CCSprite*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithSprites'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithSprites(backgroundSprite,progressSprite,thumbSprite);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithSprites'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_create00
static int tolua_LuaFramework_CCControlSlider_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isstring(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* bgFile = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* progressFile = ((const char*)  tolua_tostring(tolua_S,3,0));
  const char* thumbFile = ((const char*)  tolua_tostring(tolua_S,4,0));
  {
   CCControlSlider* tolua_ret = (CCControlSlider*)  CCControlSlider::create(bgFile,progressFile,thumbFile);
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCControlSlider");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_create01
static int tolua_LuaFramework_CCControlSlider_create01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCSprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCSprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"CCSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCSprite* backgroundSprite = ((CCSprite*)  tolua_tousertype(tolua_S,2,0));
  CCSprite* pogressSprite = ((CCSprite*)  tolua_tousertype(tolua_S,3,0));
  CCSprite* thumbSprite = ((CCSprite*)  tolua_tousertype(tolua_S,4,0));
  {
   CCControlSlider* tolua_ret = (CCControlSlider*)  CCControlSlider::create(backgroundSprite,pogressSprite,thumbSprite);
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCControlSlider");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCControlSlider_create00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: needsLayout of class  CCControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCControlSlider_needsLayout00
static int tolua_LuaFramework_CCControlSlider_needsLayout00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCControlSlider* self = (CCControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'needsLayout'", NULL);
#endif
  {
   self->needsLayout();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'needsLayout'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_new00
static int tolua_LuaFramework_CCGLProgram_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCGLProgram* tolua_ret = (CCGLProgram*)  Mtolua_new((CCGLProgram)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCGLProgram");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_new00_local
static int tolua_LuaFramework_CCGLProgram_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCGLProgram* tolua_ret = (CCGLProgram*)  Mtolua_new((CCGLProgram)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCGLProgram");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_delete00
static int tolua_LuaFramework_CCGLProgram_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithVertexShaderByteArray of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_initWithVertexShaderByteArray00
static int tolua_LuaFramework_CCGLProgram_initWithVertexShaderByteArray00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  const char* vShaderByteArray = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* fShaderByteArray = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithVertexShaderByteArray'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithVertexShaderByteArray(vShaderByteArray,fShaderByteArray);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithVertexShaderByteArray'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithVertexShaderFilename of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_initWithVertexShaderFilename00
static int tolua_LuaFramework_CCGLProgram_initWithVertexShaderFilename00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  const char* vShaderFilename = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* fShaderFilename = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithVertexShaderFilename'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithVertexShaderFilename(vShaderFilename,fShaderFilename);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithVertexShaderFilename'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addAttribute of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_addAttribute00
static int tolua_LuaFramework_CCGLProgram_addAttribute00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  const char* attributeName = ((const char*)  tolua_tostring(tolua_S,2,0));
  int index = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addAttribute'", NULL);
#endif
  {
   self->addAttribute(attributeName,index);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addAttribute'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: link of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_link00
static int tolua_LuaFramework_CCGLProgram_link00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'link'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->link();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'link'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: use of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_use00
static int tolua_LuaFramework_CCGLProgram_use00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'use'", NULL);
#endif
  {
   self->use();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'use'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: updateUniforms of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_updateUniforms00
static int tolua_LuaFramework_CCGLProgram_updateUniforms00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'updateUniforms'", NULL);
#endif
  {
   self->updateUniforms();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'updateUniforms'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getUniformLocationForName of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_getUniformLocationForName00
static int tolua_LuaFramework_CCGLProgram_getUniformLocationForName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getUniformLocationForName'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getUniformLocationForName(name);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getUniformLocationForName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformLocationWith1i of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_setUniformLocationWith1i00
static int tolua_LuaFramework_CCGLProgram_setUniformLocationWith1i00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  int location = ((int)  tolua_tonumber(tolua_S,2,0));
  int i1 = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformLocationWith1i'", NULL);
#endif
  {
   self->setUniformLocationWith1i(location,i1);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformLocationWith1i'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformLocationWith2i of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_setUniformLocationWith2i00
static int tolua_LuaFramework_CCGLProgram_setUniformLocationWith2i00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  int location = ((int)  tolua_tonumber(tolua_S,2,0));
  int i1 = ((int)  tolua_tonumber(tolua_S,3,0));
  int i2 = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformLocationWith2i'", NULL);
#endif
  {
   self->setUniformLocationWith2i(location,i1,i2);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformLocationWith2i'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformLocationWith3i of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_setUniformLocationWith3i00
static int tolua_LuaFramework_CCGLProgram_setUniformLocationWith3i00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  int location = ((int)  tolua_tonumber(tolua_S,2,0));
  int i1 = ((int)  tolua_tonumber(tolua_S,3,0));
  int i2 = ((int)  tolua_tonumber(tolua_S,4,0));
  int i3 = ((int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformLocationWith3i'", NULL);
#endif
  {
   self->setUniformLocationWith3i(location,i1,i2,i3);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformLocationWith3i'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformLocationWith4i of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_setUniformLocationWith4i00
static int tolua_LuaFramework_CCGLProgram_setUniformLocationWith4i00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  int location = ((int)  tolua_tonumber(tolua_S,2,0));
  int i1 = ((int)  tolua_tonumber(tolua_S,3,0));
  int i2 = ((int)  tolua_tonumber(tolua_S,4,0));
  int i3 = ((int)  tolua_tonumber(tolua_S,5,0));
  int i4 = ((int)  tolua_tonumber(tolua_S,6,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformLocationWith4i'", NULL);
#endif
  {
   self->setUniformLocationWith4i(location,i1,i2,i3,i4);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformLocationWith4i'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformLocationWith2iv of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_setUniformLocationWith2iv00
static int tolua_LuaFramework_CCGLProgram_setUniformLocationWith2iv00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  int location = ((int)  tolua_tonumber(tolua_S,2,0));
  int ints = ((int)  tolua_tonumber(tolua_S,3,0));
  unsigned int numberOfArrays = ((unsigned int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformLocationWith2iv'", NULL);
#endif
  {
   self->setUniformLocationWith2iv(location,&ints,numberOfArrays);
   tolua_pushnumber(tolua_S,(lua_Number)ints);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformLocationWith2iv'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformLocationWith3iv of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_setUniformLocationWith3iv00
static int tolua_LuaFramework_CCGLProgram_setUniformLocationWith3iv00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  int location = ((int)  tolua_tonumber(tolua_S,2,0));
  int ints = ((int)  tolua_tonumber(tolua_S,3,0));
  unsigned int numberOfArrays = ((unsigned int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformLocationWith3iv'", NULL);
#endif
  {
   self->setUniformLocationWith3iv(location,&ints,numberOfArrays);
   tolua_pushnumber(tolua_S,(lua_Number)ints);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformLocationWith3iv'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformLocationWith4iv of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_setUniformLocationWith4iv00
static int tolua_LuaFramework_CCGLProgram_setUniformLocationWith4iv00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  int location = ((int)  tolua_tonumber(tolua_S,2,0));
  int ints = ((int)  tolua_tonumber(tolua_S,3,0));
  unsigned int numberOfArrays = ((unsigned int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformLocationWith4iv'", NULL);
#endif
  {
   self->setUniformLocationWith4iv(location,&ints,numberOfArrays);
   tolua_pushnumber(tolua_S,(lua_Number)ints);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformLocationWith4iv'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformLocationWith1f of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_setUniformLocationWith1f00
static int tolua_LuaFramework_CCGLProgram_setUniformLocationWith1f00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  int location = ((int)  tolua_tonumber(tolua_S,2,0));
  float f1 = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformLocationWith1f'", NULL);
#endif
  {
   self->setUniformLocationWith1f(location,f1);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformLocationWith1f'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformLocationWith2f of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_setUniformLocationWith2f00
static int tolua_LuaFramework_CCGLProgram_setUniformLocationWith2f00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  int location = ((int)  tolua_tonumber(tolua_S,2,0));
  float f1 = ((float)  tolua_tonumber(tolua_S,3,0));
  float f2 = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformLocationWith2f'", NULL);
#endif
  {
   self->setUniformLocationWith2f(location,f1,f2);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformLocationWith2f'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformLocationWith3f of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_setUniformLocationWith3f00
static int tolua_LuaFramework_CCGLProgram_setUniformLocationWith3f00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  int location = ((int)  tolua_tonumber(tolua_S,2,0));
  float f1 = ((float)  tolua_tonumber(tolua_S,3,0));
  float f2 = ((float)  tolua_tonumber(tolua_S,4,0));
  float f3 = ((float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformLocationWith3f'", NULL);
#endif
  {
   self->setUniformLocationWith3f(location,f1,f2,f3);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformLocationWith3f'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformLocationWith4f of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_setUniformLocationWith4f00
static int tolua_LuaFramework_CCGLProgram_setUniformLocationWith4f00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  int location = ((int)  tolua_tonumber(tolua_S,2,0));
  float f1 = ((float)  tolua_tonumber(tolua_S,3,0));
  float f2 = ((float)  tolua_tonumber(tolua_S,4,0));
  float f3 = ((float)  tolua_tonumber(tolua_S,5,0));
  float f4 = ((float)  tolua_tonumber(tolua_S,6,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformLocationWith4f'", NULL);
#endif
  {
   self->setUniformLocationWith4f(location,f1,f2,f3,f4);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformLocationWith4f'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformLocationWith2fv of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_setUniformLocationWith2fv00
static int tolua_LuaFramework_CCGLProgram_setUniformLocationWith2fv00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  int location = ((int)  tolua_tonumber(tolua_S,2,0));
  float floats = ((float)  tolua_tonumber(tolua_S,3,0));
  unsigned int numberOfArrays = ((unsigned int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformLocationWith2fv'", NULL);
#endif
  {
   self->setUniformLocationWith2fv(location,&floats,numberOfArrays);
   tolua_pushnumber(tolua_S,(lua_Number)floats);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformLocationWith2fv'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformLocationWith3fv of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_setUniformLocationWith3fv00
static int tolua_LuaFramework_CCGLProgram_setUniformLocationWith3fv00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  int location = ((int)  tolua_tonumber(tolua_S,2,0));
  float floats = ((float)  tolua_tonumber(tolua_S,3,0));
  unsigned int numberOfArrays = ((unsigned int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformLocationWith3fv'", NULL);
#endif
  {
   self->setUniformLocationWith3fv(location,&floats,numberOfArrays);
   tolua_pushnumber(tolua_S,(lua_Number)floats);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformLocationWith3fv'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformLocationWith4fv of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_setUniformLocationWith4fv00
static int tolua_LuaFramework_CCGLProgram_setUniformLocationWith4fv00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  int location = ((int)  tolua_tonumber(tolua_S,2,0));
  float floats = ((float)  tolua_tonumber(tolua_S,3,0));
  unsigned int numberOfArrays = ((unsigned int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformLocationWith4fv'", NULL);
#endif
  {
   self->setUniformLocationWith4fv(location,&floats,numberOfArrays);
   tolua_pushnumber(tolua_S,(lua_Number)floats);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformLocationWith4fv'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformLocationWithMatrix4fv of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_setUniformLocationWithMatrix4fv00
static int tolua_LuaFramework_CCGLProgram_setUniformLocationWithMatrix4fv00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
  int location = ((int)  tolua_tonumber(tolua_S,2,0));
  float matrixArray = ((float)  tolua_tonumber(tolua_S,3,0));
  unsigned int numberOfMatrices = ((unsigned int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformLocationWithMatrix4fv'", NULL);
#endif
  {
   self->setUniformLocationWithMatrix4fv(location,&matrixArray,numberOfMatrices);
   tolua_pushnumber(tolua_S,(lua_Number)matrixArray);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformLocationWithMatrix4fv'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformsForBuiltins of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_setUniformsForBuiltins00
static int tolua_LuaFramework_CCGLProgram_setUniformsForBuiltins00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformsForBuiltins'", NULL);
#endif
  {
   self->setUniformsForBuiltins();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformsForBuiltins'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: vertexShaderLog of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_vertexShaderLog00
static int tolua_LuaFramework_CCGLProgram_vertexShaderLog00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'vertexShaderLog'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->vertexShaderLog();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'vertexShaderLog'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: fragmentShaderLog of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_fragmentShaderLog00
static int tolua_LuaFramework_CCGLProgram_fragmentShaderLog00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'fragmentShaderLog'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->fragmentShaderLog();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'fragmentShaderLog'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: programLog of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_programLog00
static int tolua_LuaFramework_CCGLProgram_programLog00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'programLog'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->programLog();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'programLog'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: reset of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_reset00
static int tolua_LuaFramework_CCGLProgram_reset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reset'", NULL);
#endif
  {
   self->reset();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'reset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getProgram of class  CCGLProgram */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCGLProgram_getProgram00
static int tolua_LuaFramework_CCGLProgram_getProgram00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCGLProgram",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCGLProgram* self = (CCGLProgram*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getProgram'", NULL);
#endif
  {
   const int tolua_ret = (const int)  self->getProgram();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getProgram'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  CCShaderCache */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderCache_new00
static int tolua_LuaFramework_CCShaderCache_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCShaderCache",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCShaderCache* tolua_ret = (CCShaderCache*)  Mtolua_new((CCShaderCache)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCShaderCache");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  CCShaderCache */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderCache_new00_local
static int tolua_LuaFramework_CCShaderCache_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCShaderCache",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCShaderCache* tolua_ret = (CCShaderCache*)  Mtolua_new((CCShaderCache)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCShaderCache");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  CCShaderCache */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderCache_delete00
static int tolua_LuaFramework_CCShaderCache_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCShaderCache",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCShaderCache* self = (CCShaderCache*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: sharedShaderCache of class  CCShaderCache */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderCache_sharedShaderCache00
static int tolua_LuaFramework_CCShaderCache_sharedShaderCache00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCShaderCache",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCShaderCache* tolua_ret = (CCShaderCache*)  CCShaderCache::sharedShaderCache();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCShaderCache");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'sharedShaderCache'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: purgeSharedShaderCache of class  CCShaderCache */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderCache_purgeSharedShaderCache00
static int tolua_LuaFramework_CCShaderCache_purgeSharedShaderCache00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCShaderCache",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCShaderCache::purgeSharedShaderCache();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'purgeSharedShaderCache'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: loadDefaultShaders of class  CCShaderCache */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderCache_loadDefaultShaders00
static int tolua_LuaFramework_CCShaderCache_loadDefaultShaders00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCShaderCache",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCShaderCache* self = (CCShaderCache*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'loadDefaultShaders'", NULL);
#endif
  {
   self->loadDefaultShaders();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'loadDefaultShaders'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: reloadDefaultShaders of class  CCShaderCache */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderCache_reloadDefaultShaders00
static int tolua_LuaFramework_CCShaderCache_reloadDefaultShaders00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCShaderCache",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCShaderCache* self = (CCShaderCache*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reloadDefaultShaders'", NULL);
#endif
  {
   self->reloadDefaultShaders();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'reloadDefaultShaders'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: programForKey of class  CCShaderCache */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderCache_programForKey00
static int tolua_LuaFramework_CCShaderCache_programForKey00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCShaderCache",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCShaderCache* self = (CCShaderCache*)  tolua_tousertype(tolua_S,1,0);
  const char* key = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'programForKey'", NULL);
#endif
  {
   CCGLProgram* tolua_ret = (CCGLProgram*)  self->programForKey(key);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCGLProgram");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'programForKey'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addProgram of class  CCShaderCache */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderCache_addProgram00
static int tolua_LuaFramework_CCShaderCache_addProgram00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCShaderCache",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCGLProgram",0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCShaderCache* self = (CCShaderCache*)  tolua_tousertype(tolua_S,1,0);
  CCGLProgram* program = ((CCGLProgram*)  tolua_tousertype(tolua_S,2,0));
  const char* key = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addProgram'", NULL);
#endif
  {
   self->addProgram(program,key);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addProgram'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCShaderColorFadeIn */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderColorFadeIn_create00
static int tolua_LuaFramework_CCShaderColorFadeIn_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCShaderColorFadeIn",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const ccColor3B",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  float time = ((float)  tolua_tonumber(tolua_S,2,0));
  const ccColor3B* color = ((const ccColor3B*)  tolua_tousertype(tolua_S,3,0));
  {
   CCShaderColorFadeIn* tolua_ret = (CCShaderColorFadeIn*)  CCShaderColorFadeIn::create(time,*color);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCShaderColorFadeIn");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithDuration of class  CCShaderColorFadeIn */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderColorFadeIn_initWithDuration00
static int tolua_LuaFramework_CCShaderColorFadeIn_initWithDuration00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCShaderColorFadeIn",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const ccColor3B",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCShaderColorFadeIn* self = (CCShaderColorFadeIn*)  tolua_tousertype(tolua_S,1,0);
  float time = ((float)  tolua_tonumber(tolua_S,2,0));
  const ccColor3B* color = ((const ccColor3B*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithDuration'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithDuration(time,*color);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithDuration'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: startWithTarget of class  CCShaderColorFadeIn */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderColorFadeIn_startWithTarget00
static int tolua_LuaFramework_CCShaderColorFadeIn_startWithTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCShaderColorFadeIn",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCShaderColorFadeIn* self = (CCShaderColorFadeIn*)  tolua_tousertype(tolua_S,1,0);
  CCNode* pTarget = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'startWithTarget'", NULL);
#endif
  {
   self->startWithTarget(pTarget);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'startWithTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: stop of class  CCShaderColorFadeIn */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderColorFadeIn_stop00
static int tolua_LuaFramework_CCShaderColorFadeIn_stop00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCShaderColorFadeIn",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCShaderColorFadeIn* self = (CCShaderColorFadeIn*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'stop'", NULL);
#endif
  {
   self->stop();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'stop'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: update of class  CCShaderColorFadeIn */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderColorFadeIn_update00
static int tolua_LuaFramework_CCShaderColorFadeIn_update00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCShaderColorFadeIn",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCShaderColorFadeIn* self = (CCShaderColorFadeIn*)  tolua_tousertype(tolua_S,1,0);
  float time = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'update'", NULL);
#endif
  {
   self->update(time);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'update'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCShaderColorFadeOut */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderColorFadeOut_create00
static int tolua_LuaFramework_CCShaderColorFadeOut_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCShaderColorFadeOut",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const ccColor3B",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  float time = ((float)  tolua_tonumber(tolua_S,2,0));
  const ccColor3B* color = ((const ccColor3B*)  tolua_tousertype(tolua_S,3,0));
  {
   CCShaderColorFadeOut* tolua_ret = (CCShaderColorFadeOut*)  CCShaderColorFadeOut::create(time,*color);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCShaderColorFadeOut");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithDuration of class  CCShaderColorFadeOut */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderColorFadeOut_initWithDuration00
static int tolua_LuaFramework_CCShaderColorFadeOut_initWithDuration00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCShaderColorFadeOut",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const ccColor3B",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCShaderColorFadeOut* self = (CCShaderColorFadeOut*)  tolua_tousertype(tolua_S,1,0);
  float time = ((float)  tolua_tonumber(tolua_S,2,0));
  const ccColor3B* color = ((const ccColor3B*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithDuration'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithDuration(time,*color);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithDuration'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: startWithTarget of class  CCShaderColorFadeOut */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderColorFadeOut_startWithTarget00
static int tolua_LuaFramework_CCShaderColorFadeOut_startWithTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCShaderColorFadeOut",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCShaderColorFadeOut* self = (CCShaderColorFadeOut*)  tolua_tousertype(tolua_S,1,0);
  CCNode* pTarget = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'startWithTarget'", NULL);
#endif
  {
   self->startWithTarget(pTarget);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'startWithTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: stop of class  CCShaderColorFadeOut */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderColorFadeOut_stop00
static int tolua_LuaFramework_CCShaderColorFadeOut_stop00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCShaderColorFadeOut",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCShaderColorFadeOut* self = (CCShaderColorFadeOut*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'stop'", NULL);
#endif
  {
   self->stop();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'stop'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: update of class  CCShaderColorFadeOut */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCShaderColorFadeOut_update00
static int tolua_LuaFramework_CCShaderColorFadeOut_update00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCShaderColorFadeOut",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCShaderColorFadeOut* self = (CCShaderColorFadeOut*)  tolua_tousertype(tolua_S,1,0);
  float time = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'update'", NULL);
#endif
  {
   self->update(time);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'update'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getExtStoragePath of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_getExtStoragePath00
static int tolua_LuaFramework_SFGameHelper_getExtStoragePath00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   std::string tolua_ret = (std::string)  SFGameHelper::getExtStoragePath();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getExtStoragePath'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isDirExist of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_isDirExist00
static int tolua_LuaFramework_SFGameHelper_isDirExist00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* path = ((const char*)  tolua_tostring(tolua_S,2,0));
  {
   bool tolua_ret = (bool)  SFGameHelper::isDirExist(path);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isDirExist'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createDir of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_createDir00
static int tolua_LuaFramework_SFGameHelper_createDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* path = ((const char*)  tolua_tostring(tolua_S,2,0));
  {
   bool tolua_ret = (bool)  SFGameHelper::createDir(path);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: copyResouce of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_copyResouce00
static int tolua_LuaFramework_SFGameHelper_copyResouce00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !toluafix_isfunction(tolua_S,4,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* resPath = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* destPath = ((const char*)  tolua_tostring(tolua_S,3,0));
  LUA_FUNCTION handler = (  toluafix_ref_function(tolua_S,4,0));
  {
   SFGameHelper::copyResouce(resPath,destPath,handler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'copyResouce'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getClientVersion of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_getClientVersion00
static int tolua_LuaFramework_SFGameHelper_getClientVersion00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   std::string tolua_ret = (std::string)  SFGameHelper::getClientVersion();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getClientVersion'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: updateClient of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_updateClient00
static int tolua_LuaFramework_SFGameHelper_updateClient00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* pszUrl = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* pszNewVersion = ((const char*)  tolua_tostring(tolua_S,3,0));
  bool bForce = ((bool)  tolua_toboolean(tolua_S,4,0));
  {
   SFGameHelper::updateClient(pszUrl,pszNewVersion,bForce);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'updateClient'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMainVersion of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_getMainVersion00
static int tolua_LuaFramework_SFGameHelper_getMainVersion00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   int tolua_ret = (int)  SFGameHelper::getMainVersion();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMainVersion'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSubVersion of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_getSubVersion00
static int tolua_LuaFramework_SFGameHelper_getSubVersion00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   int tolua_ret = (int)  SFGameHelper::getSubVersion();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSubVersion'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCurrentNetWork of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_getCurrentNetWork00
static int tolua_LuaFramework_SFGameHelper_getCurrentNetWork00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   int tolua_ret = (int)  SFGameHelper::getCurrentNetWork();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurrentNetWork'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: moveFile of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_moveFile00
static int tolua_LuaFramework_SFGameHelper_moveFile00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !toluafix_isfunction(tolua_S,4,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* resPath = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* destPath = ((const char*)  tolua_tostring(tolua_S,3,0));
  LUA_FUNCTION handler = (  toluafix_ref_function(tolua_S,4,0));
  {
   SFGameHelper::moveFile(resPath,destPath,handler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'moveFile'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: deleteFile of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_deleteFile00
static int tolua_LuaFramework_SFGameHelper_deleteFile00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !toluafix_isfunction(tolua_S,3,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* resPath = ((const char*)  tolua_tostring(tolua_S,2,0));
  LUA_FUNCTION handler = (  toluafix_ref_function(tolua_S,3,0));
  {
   SFGameHelper::deleteFile(resPath,handler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'deleteFile'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTag of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_setTag00
static int tolua_LuaFramework_SFGameHelper_setTag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCArray",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCArray* tags = ((CCArray*)  tolua_tousertype(tolua_S,2,0));
  {
   SFGameHelper::setTag(tags);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeTag of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_removeTag00
static int tolua_LuaFramework_SFGameHelper_removeTag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* tag = ((const char*)  tolua_tostring(tolua_S,2,0));
  {
   SFGameHelper::removeTag(tag);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeTag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: startPush of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_startPush00
static int tolua_LuaFramework_SFGameHelper_startPush00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFGameHelper::startPush();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'startPush'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: stopPush of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_stopPush00
static int tolua_LuaFramework_SFGameHelper_stopPush00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFGameHelper::stopPush();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'stopPush'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: showMenu of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_showMenu00
static int tolua_LuaFramework_SFGameHelper_showMenu00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isstring(tolua_S,4,0,&tolua_err) ||
     !tolua_isstring(tolua_S,5,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !toluafix_isfunction(tolua_S,6,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* title = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* content = ((const char*)  tolua_tostring(tolua_S,3,0));
  const char* linkUrl = ((const char*)  tolua_tostring(tolua_S,4,0));
  const char* imgUrl = ((const char*)  tolua_tostring(tolua_S,5,0));
  LUA_FUNCTION handler = (  toluafix_ref_function(tolua_S,6,0));
  {
   SFGameHelper::showMenu(title,content,linkUrl,imgUrl,handler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'showMenu'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: share of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_share00
static int tolua_LuaFramework_SFGameHelper_share00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     !tolua_isstring(tolua_S,4,0,&tolua_err) ||
     !tolua_isstring(tolua_S,5,0,&tolua_err) ||
     !tolua_isstring(tolua_S,6,0,&tolua_err) ||
     !tolua_isstring(tolua_S,7,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,8,&tolua_err) || !toluafix_isfunction(tolua_S,8,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,9,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* platform = ((const char*)  tolua_tostring(tolua_S,2,0));
  bool bEdit = ((bool)  tolua_toboolean(tolua_S,3,0));
  const char* title = ((const char*)  tolua_tostring(tolua_S,4,0));
  const char* content = ((const char*)  tolua_tostring(tolua_S,5,0));
  const char* linkUrl = ((const char*)  tolua_tostring(tolua_S,6,0));
  const char* imgUrl = ((const char*)  tolua_tostring(tolua_S,7,0));
  LUA_FUNCTION handler = (  toluafix_ref_function(tolua_S,8,0));
  {
   SFGameHelper::share(platform,bEdit,title,content,linkUrl,imgUrl,handler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'share'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSessionTimeout of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_setSessionTimeout00
static int tolua_LuaFramework_SFGameHelper_setSessionTimeout00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int timeout = ((int)  tolua_tonumber(tolua_S,2,0));
  {
   SFGameHelper::setSessionTimeout(timeout);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSessionTimeout'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: enableExceptionLog of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_enableExceptionLog00
static int tolua_LuaFramework_SFGameHelper_enableExceptionLog00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFGameHelper::enableExceptionLog();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'enableExceptionLog'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: startStatistics of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_startStatistics00
static int tolua_LuaFramework_SFGameHelper_startStatistics00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* reportId = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* channelId = ((const char*)  tolua_tostring(tolua_S,3,0));
  {
   SFGameHelper::startStatistics(reportId,channelId);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'startStatistics'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: copy2PasteBoard of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_copy2PasteBoard00
static int tolua_LuaFramework_SFGameHelper_copy2PasteBoard00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* str = ((const char*)  tolua_tostring(tolua_S,2,0));
  {
   SFGameHelper::copy2PasteBoard(str);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'copy2PasteBoard'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDensity of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_getDensity00
static int tolua_LuaFramework_SFGameHelper_getDensity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   float tolua_ret = (float)  SFGameHelper::getDensity();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDensity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDensityDpi of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_getDensityDpi00
static int tolua_LuaFramework_SFGameHelper_getDensityDpi00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   int tolua_ret = (int)  SFGameHelper::getDensityDpi();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDensityDpi'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getManuFactuer of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_getManuFactuer00
static int tolua_LuaFramework_SFGameHelper_getManuFactuer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   std::string tolua_ret = (std::string)  SFGameHelper::getManuFactuer();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getManuFactuer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getModel of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_getModel00
static int tolua_LuaFramework_SFGameHelper_getModel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   std::string tolua_ret = (std::string)  SFGameHelper::getModel();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getModel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSystemVer of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_getSystemVer00
static int tolua_LuaFramework_SFGameHelper_getSystemVer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   std::string tolua_ret = (std::string)  SFGameHelper::getSystemVer();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSystemVer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAppUpdateType of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_setAppUpdateType00
static int tolua_LuaFramework_SFGameHelper_setAppUpdateType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int type = ((int)  tolua_tonumber(tolua_S,2,0));
  int tag = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   SFGameHelper::setAppUpdateType(type,tag);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAppUpdateType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAppCallback of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_setAppCallback00
static int tolua_LuaFramework_SFGameHelper_setAppCallback00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  LUA_FUNCTION handler = (  toluafix_ref_function(tolua_S,2,0));
  {
   SFGameHelper::setAppCallback(handler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAppCallback'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: urlEncode of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_urlEncode00
static int tolua_LuaFramework_SFGameHelper_urlEncode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* str = ((const char*)  tolua_tostring(tolua_S,2,0));
  {
   std::string tolua_ret = (std::string)  SFGameHelper::urlEncode(str);
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'urlEncode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: urlDecode of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_urlDecode00
static int tolua_LuaFramework_SFGameHelper_urlDecode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* str = ((const char*)  tolua_tostring(tolua_S,2,0));
  {
   std::string tolua_ret = (std::string)  SFGameHelper::urlDecode(str);
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'urlDecode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: base64Encode of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_base64Encode00
static int tolua_LuaFramework_SFGameHelper_base64Encode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* str = ((const char*)  tolua_tostring(tolua_S,2,0));
  {
   std::string tolua_ret = (std::string)  SFGameHelper::base64Encode(str);
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'base64Encode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: base64Decode of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_base64Decode00
static int tolua_LuaFramework_SFGameHelper_base64Decode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* str = ((const char*)  tolua_tostring(tolua_S,2,0));
  {
   std::string tolua_ret = (std::string)  SFGameHelper::base64Decode(str);
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'base64Decode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFloatBtnVisible of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_setFloatBtnVisible00
static int tolua_LuaFramework_SFGameHelper_setFloatBtnVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  bool bVisible = ((bool)  tolua_toboolean(tolua_S,2,0));
  {
   SFGameHelper::setFloatBtnVisible(bVisible);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFloatBtnVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRomFreeSpace of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_getRomFreeSpace00
static int tolua_LuaFramework_SFGameHelper_getRomFreeSpace00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   long long tolua_ret = (long long)  SFGameHelper::getRomFreeSpace();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRomFreeSpace'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRamSpace of class  SFGameHelper */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameHelper_getRamSpace00
static int tolua_LuaFramework_SFGameHelper_getRamSpace00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameHelper",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   long long tolua_ret = (long long)  SFGameHelper::getRamSpace();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRamSpace'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  pathPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_pathPoint_new00
static int tolua_LuaFramework_pathPoint_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"pathPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   pathPoint* tolua_ret = (pathPoint*)  Mtolua_new((pathPoint)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"pathPoint");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  pathPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_pathPoint_new00_local
static int tolua_LuaFramework_pathPoint_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"pathPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   pathPoint* tolua_ret = (pathPoint*)  Mtolua_new((pathPoint)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"pathPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  pathPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_pathPoint_delete00
static int tolua_LuaFramework_pathPoint_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"pathPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  pathPoint* self = (pathPoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  pathPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_pathPoint_create00
static int tolua_LuaFramework_pathPoint_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"pathPoint",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   pathPoint* tolua_ret = (pathPoint*)  pathPoint::create(x,y);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"pathPoint");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: copy of class  pathPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_pathPoint_copy00
static int tolua_LuaFramework_pathPoint_copy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"pathPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  pathPoint* self = (pathPoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'copy'", NULL);
#endif
  {
   CCObject* tolua_ret = (CCObject*)  self->copy();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCObject");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'copy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getX of class  pathPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_pathPoint_getX00
static int tolua_LuaFramework_pathPoint_getX00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"pathPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  pathPoint* self = (pathPoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getX'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getX();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getX'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getY of class  pathPoint */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_pathPoint_getY00
static int tolua_LuaFramework_pathPoint_getY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"pathPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  pathPoint* self = (pathPoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getY'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getY();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  LogicFinder */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_LogicFinder_new00
static int tolua_LuaFramework_LogicFinder_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"LogicFinder",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   LogicFinder* tolua_ret = (LogicFinder*)  Mtolua_new((LogicFinder)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"LogicFinder");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  LogicFinder */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_LogicFinder_new00_local
static int tolua_LuaFramework_LogicFinder_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"LogicFinder",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   LogicFinder* tolua_ret = (LogicFinder*)  Mtolua_new((LogicFinder)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"LogicFinder");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  LogicFinder */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_LogicFinder_delete00
static int tolua_LuaFramework_LogicFinder_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"LogicFinder",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  LogicFinder* self = (LogicFinder*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReLoad of class  LogicFinder */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_LogicFinder_ReLoad00
static int tolua_LuaFramework_LogicFinder_ReLoad00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"LogicFinder",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const LogicBlock",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  LogicFinder* self = (LogicFinder*)  tolua_tousertype(tolua_S,1,0);
  const LogicBlock* block = ((const LogicBlock*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReLoad'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->ReLoad(*block);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReLoad'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: findPath of class  LogicFinder */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_LogicFinder_findPath00
static int tolua_LuaFramework_LogicFinder_findPath00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"LogicFinder",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const IntPoint",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const IntPoint",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  LogicFinder* self = (LogicFinder*)  tolua_tousertype(tolua_S,1,0);
  const IntPoint* begin = ((const IntPoint*)  tolua_tousertype(tolua_S,2,0));
  const IntPoint* end = ((const IntPoint*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'findPath'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->findPath(*begin,*end);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'findPath'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetPoint of class  LogicFinder */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_LogicFinder_GetPoint00
static int tolua_LuaFramework_LogicFinder_GetPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"LogicFinder",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"IntPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  LogicFinder* self = (LogicFinder*)  tolua_tousertype(tolua_S,1,0);
  IntPoint* out = ((IntPoint*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetPoint'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->GetPoint(out);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPathPoints of class  LogicFinder */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_LogicFinder_getPathPoints00
static int tolua_LuaFramework_LogicFinder_getPathPoints00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"LogicFinder",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  LogicFinder* self = (LogicFinder*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPathPoints'", NULL);
#endif
  {
   CCArray* tolua_ret = (CCArray*)  self->getPathPoints();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCArray");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPathPoints'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInstance of class  HttpTools */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_HttpTools_getInstance00
static int tolua_LuaFramework_HttpTools_getInstance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"HttpTools",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   HttpTools* tolua_ret = (HttpTools*)  HttpTools::getInstance();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"HttpTools");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInstance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: send of class  HttpTools */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_HttpTools_send00
static int tolua_LuaFramework_HttpTools_send00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"HttpTools",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isstring(tolua_S,4,0,&tolua_err) ||
     !tolua_isstring(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  HttpTools* self = (HttpTools*)  tolua_tousertype(tolua_S,1,0);
  const char* url = ((const char*)  tolua_tostring(tolua_S,2,0));
  int type = ((int)  tolua_tonumber(tolua_S,3,0));
  const char* tag = ((const char*)  tolua_tostring(tolua_S,4,0));
  const char* userData = ((const char*)  tolua_tostring(tolua_S,5,0));
  int len = ((int)  tolua_tonumber(tolua_S,6,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'send'", NULL);
#endif
  {
   self->send(url,type,tag,userData,len);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'send'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: requestCallBack of class  HttpTools */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_HttpTools_requestCallBack00
static int tolua_LuaFramework_HttpTools_requestCallBack00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"HttpTools",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCObject",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  HttpTools* self = (HttpTools*)  tolua_tousertype(tolua_S,1,0);
  CCObject* sender = ((CCObject*)  tolua_tousertype(tolua_S,2,0));
  void* data = ((void*)  tolua_touserdata(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'requestCallBack'", NULL);
#endif
  {
   self->requestCallBack(sender,data);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'requestCallBack'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: registLuaCallBack of class  HttpTools */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_HttpTools_registLuaCallBack00
static int tolua_LuaFramework_HttpTools_registLuaCallBack00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"HttpTools",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  HttpTools* self = (HttpTools*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION nhandler = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'registLuaCallBack'", NULL);
#endif
  {
   self->registLuaCallBack(nhandler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'registLuaCallBack'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  HttpTools */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_HttpTools_new00
static int tolua_LuaFramework_HttpTools_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"HttpTools",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   HttpTools* tolua_ret = (HttpTools*)  Mtolua_new((HttpTools)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"HttpTools");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  HttpTools */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_HttpTools_new00_local
static int tolua_LuaFramework_HttpTools_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"HttpTools",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   HttpTools* tolua_ret = (HttpTools*)  Mtolua_new((HttpTools)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"HttpTools");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  HttpTools */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_HttpTools_delete00
static int tolua_LuaFramework_HttpTools_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"HttpTools",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  HttpTools* self = (HttpTools*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInstance of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_getInstance00
static int tolua_LuaFramework_SFLoginManager_getInstance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFLoginManager* tolua_ret = (SFLoginManager*)  SFLoginManager::getInstance();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFLoginManager");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInstance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_delete00
static int tolua_LuaFramework_SFLoginManager_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: requestLogin of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_requestLogin00
static int tolua_LuaFramework_SFLoginManager_requestLogin00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'requestLogin'", NULL);
#endif
  {
   self->requestLogin();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'requestLogin'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLuaCallback of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_setLuaCallback00
static int tolua_LuaFramework_SFLoginManager_setLuaCallback00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION handler = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLuaCallback'", NULL);
#endif
  {
   self->setLuaCallback(handler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLuaCallback'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onLoginResult of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_onLoginResult00
static int tolua_LuaFramework_SFLoginManager_onLoginResult00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
  int errCode = ((int)  tolua_tonumber(tolua_S,2,0));
  const char* data = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onLoginResult'", NULL);
#endif
  {
   self->onLoginResult(errCode,data);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onLoginResult'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: requestServerList of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_requestServerList00
static int tolua_LuaFramework_SFLoginManager_requestServerList00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'requestServerList'", NULL);
#endif
  {
   self->requestServerList();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'requestServerList'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLuaRequestServerListCB of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_setLuaRequestServerListCB00
static int tolua_LuaFramework_SFLoginManager_setLuaRequestServerListCB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION handler = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLuaRequestServerListCB'", NULL);
#endif
  {
   self->setLuaRequestServerListCB(handler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLuaRequestServerListCB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getServerListSuccess of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_getServerListSuccess00
static int tolua_LuaFramework_SFLoginManager_getServerListSuccess00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
  char* data = ((char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getServerListSuccess'", NULL);
#endif
  {
   self->getServerListSuccess(data);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getServerListSuccess'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: gotoBridgeAuth of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_gotoBridgeAuth00
static int tolua_LuaFramework_SFLoginManager_gotoBridgeAuth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'gotoBridgeAuth'", NULL);
#endif
  {
   self->gotoBridgeAuth();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'gotoBridgeAuth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAuthData of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_getAuthData00
static int tolua_LuaFramework_SFLoginManager_getAuthData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAuthData'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getAuthData();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAuthData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLuaBridgeAuthCB of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_setLuaBridgeAuthCB00
static int tolua_LuaFramework_SFLoginManager_setLuaBridgeAuthCB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION handler = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLuaBridgeAuthCB'", NULL);
#endif
  {
   self->setLuaBridgeAuthCB(handler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLuaBridgeAuthCB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBridgeUrl of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_getBridgeUrl00
static int tolua_LuaFramework_SFLoginManager_getBridgeUrl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBridgeUrl'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getBridgeUrl();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBridgeUrl'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: bridgeAuthSuccess of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_bridgeAuthSuccess00
static int tolua_LuaFramework_SFLoginManager_bridgeAuthSuccess00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
  const char* response = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'bridgeAuthSuccess'", NULL);
#endif
  {
   self->bridgeAuthSuccess(response);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'bridgeAuthSuccess'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: submitExtendData of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_submitExtendData00
static int tolua_LuaFramework_SFLoginManager_submitExtendData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
  const char* extendData = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'submitExtendData'", NULL);
#endif
  {
   self->submitExtendData(extendData);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'submitExtendData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLoginSettingUrl of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_getLoginSettingUrl00
static int tolua_LuaFramework_SFLoginManager_getLoginSettingUrl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLoginSettingUrl'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getLoginSettingUrl();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLoginSettingUrl'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getQDCode1 of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_getQDCode100
static int tolua_LuaFramework_SFLoginManager_getQDCode100(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getQDCode1'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getQDCode1();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getQDCode1'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getQDCode2 of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_getQDCode200
static int tolua_LuaFramework_SFLoginManager_getQDCode200(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getQDCode2'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getQDCode2();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getQDCode2'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: showWaitView of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_showWaitView00
static int tolua_LuaFramework_SFLoginManager_showWaitView00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
  int time = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'showWaitView'", NULL);
#endif
  {
   self->showWaitView(time);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'showWaitView'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: hideWaitView of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_hideWaitView00
static int tolua_LuaFramework_SFLoginManager_hideWaitView00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'hideWaitView'", NULL);
#endif
  {
   self->hideWaitView();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'hideWaitView'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLuaWaitViewCB of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_setLuaWaitViewCB00
static int tolua_LuaFramework_SFLoginManager_setLuaWaitViewCB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION handler = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLuaWaitViewCB'", NULL);
#endif
  {
   self->setLuaWaitViewCB(handler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLuaWaitViewCB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getUUid of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_getUUid00
static int tolua_LuaFramework_SFLoginManager_getUUid00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getUUid'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getUUid();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getUUid'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: openPay of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_openPay00
static int tolua_LuaFramework_SFLoginManager_openPay00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !toluafix_isfunction(tolua_S,3,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
  char* rechargeChannelJson = ((char*)  tolua_tostring(tolua_S,2,0));
  LUA_FUNCTION handler = (  toluafix_ref_function(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'openPay'", NULL);
#endif
  {
   self->openPay(rechargeChannelJson,handler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'openPay'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: executePayCallback of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_executePayCallback00
static int tolua_LuaFramework_SFLoginManager_executePayCallback00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION handler = (  toluafix_ref_function(tolua_S,2,0));
  int state = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'executePayCallback'", NULL);
#endif
  {
   self->executePayCallback(handler,state);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'executePayCallback'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameKey of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_getGameKey00
static int tolua_LuaFramework_SFLoginManager_getGameKey00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameKey'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getGameKey();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameKey'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPlatform of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_getPlatform00
static int tolua_LuaFramework_SFLoginManager_getPlatform00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPlatform'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getPlatform();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPlatform'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getQDKey of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_getQDKey00
static int tolua_LuaFramework_SFLoginManager_getQDKey00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getQDKey'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getQDKey();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getQDKey'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSuffix of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_getSuffix00
static int tolua_LuaFramework_SFLoginManager_getSuffix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSuffix'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getSuffix();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSuffix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAppKey of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_getAppKey00
static int tolua_LuaFramework_SFLoginManager_getAppKey00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAppKey'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getAppKey();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAppKey'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getClientKey of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_getClientKey00
static int tolua_LuaFramework_SFLoginManager_getClientKey00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getClientKey'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getClientKey();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getClientKey'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPlayerId of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_setPlayerId00
static int tolua_LuaFramework_SFLoginManager_setPlayerId00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
  const char* playerId = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPlayerId'", NULL);
#endif
  {
   self->setPlayerId(playerId);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPlayerId'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPlayerId of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_getPlayerId00
static int tolua_LuaFramework_SFLoginManager_getPlayerId00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPlayerId'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->getPlayerId();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPlayerId'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setServerId of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_setServerId00
static int tolua_LuaFramework_SFLoginManager_setServerId00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
  const char* serverId = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setServerId'", NULL);
#endif
  {
   self->setServerId(serverId);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setServerId'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getServerId of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_getServerId00
static int tolua_LuaFramework_SFLoginManager_getServerId00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getServerId'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->getServerId();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getServerId'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: needShowUserCenter of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_needShowUserCenter00
static int tolua_LuaFramework_SFLoginManager_needShowUserCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'needShowUserCenter'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->needShowUserCenter();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'needShowUserCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: showUserCenter of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_showUserCenter00
static int tolua_LuaFramework_SFLoginManager_showUserCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'showUserCenter'", NULL);
#endif
  {
   self->showUserCenter();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'showUserCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: logout of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_logout00
static int tolua_LuaFramework_SFLoginManager_logout00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'logout'", NULL);
#endif
  {
   self->logout();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'logout'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: needShowCustomTopupView of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_needShowCustomTopupView00
static int tolua_LuaFramework_SFLoginManager_needShowCustomTopupView00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'needShowCustomTopupView'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->needShowCustomTopupView();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'needShowCustomTopupView'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: openPayWithCustomAmount of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_openPayWithCustomAmount00
static int tolua_LuaFramework_SFLoginManager_openPayWithCustomAmount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
  char* dataJson = ((char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'openPayWithCustomAmount'", NULL);
#endif
  {
   self->openPayWithCustomAmount(dataJson);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'openPayWithCustomAmount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLogOutHandler of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_setLogOutHandler00
static int tolua_LuaFramework_SFLoginManager_setLogOutHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION handler = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLogOutHandler'", NULL);
#endif
  {
   self->setLogOutHandler(handler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLogOutHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: excuteLogOutCallBack of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_excuteLogOutCallBack00
static int tolua_LuaFramework_SFLoginManager_excuteLogOutCallBack00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'excuteLogOutCallBack'", NULL);
#endif
  {
   self->excuteLogOutCallBack();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'excuteLogOutCallBack'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initPaymentObserver of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_initPaymentObserver00
static int tolua_LuaFramework_SFLoginManager_initPaymentObserver00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initPaymentObserver'", NULL);
#endif
  {
   self->initPaymentObserver();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initPaymentObserver'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPlayerName of class  SFLoginManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFLoginManager_setPlayerName00
static int tolua_LuaFramework_SFLoginManager_setPlayerName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFLoginManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFLoginManager* self = (SFLoginManager*)  tolua_tousertype(tolua_S,1,0);
  const char* playerName = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPlayerName'", NULL);
#endif
  {
   self->setPlayerName(playerName);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPlayerName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onPatchProgress of class  SFPackgePatchDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackgePatchDelegate_onPatchProgress00
static int tolua_LuaFramework_SFPackgePatchDelegate_onPatchProgress00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackgePatchDelegate",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackgePatchDelegate* self = (SFPackgePatchDelegate*)  tolua_tousertype(tolua_S,1,0);
  int current = ((int)  tolua_tonumber(tolua_S,2,0));
  int total = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onPatchProgress'", NULL);
#endif
  {
   self->onPatchProgress(current,total);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onPatchProgress'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onPatchError of class  SFPackgePatchDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackgePatchDelegate_onPatchError00
static int tolua_LuaFramework_SFPackgePatchDelegate_onPatchError00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackgePatchDelegate",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackgePatchDelegate* self = (SFPackgePatchDelegate*)  tolua_tousertype(tolua_S,1,0);
  int errorCode = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onPatchError'", NULL);
#endif
  {
   self->onPatchError(errorCode);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onPatchError'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onSuccess of class  SFPackgePatchDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackgePatchDelegate_onSuccess00
static int tolua_LuaFramework_SFPackgePatchDelegate_onSuccess00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackgePatchDelegate",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackgePatchDelegate* self = (SFPackgePatchDelegate*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onSuccess'", NULL);
#endif
  {
   self->onSuccess();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onSuccess'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFPackgePatchLuaDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackgePatchLuaDelegate_new00
static int tolua_LuaFramework_SFPackgePatchLuaDelegate_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFPackgePatchLuaDelegate",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFPackgePatchLuaDelegate* tolua_ret = (SFPackgePatchLuaDelegate*)  Mtolua_new((SFPackgePatchLuaDelegate)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFPackgePatchLuaDelegate");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFPackgePatchLuaDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackgePatchLuaDelegate_new00_local
static int tolua_LuaFramework_SFPackgePatchLuaDelegate_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFPackgePatchLuaDelegate",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFPackgePatchLuaDelegate* tolua_ret = (SFPackgePatchLuaDelegate*)  Mtolua_new((SFPackgePatchLuaDelegate)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFPackgePatchLuaDelegate");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFPackgePatchLuaDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackgePatchLuaDelegate_delete00
static int tolua_LuaFramework_SFPackgePatchLuaDelegate_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackgePatchLuaDelegate",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackgePatchLuaDelegate* self = (SFPackgePatchLuaDelegate*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onPatchProgress of class  SFPackgePatchLuaDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackgePatchLuaDelegate_onPatchProgress00
static int tolua_LuaFramework_SFPackgePatchLuaDelegate_onPatchProgress00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackgePatchLuaDelegate",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackgePatchLuaDelegate* self = (SFPackgePatchLuaDelegate*)  tolua_tousertype(tolua_S,1,0);
  int current = ((int)  tolua_tonumber(tolua_S,2,0));
  int total = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onPatchProgress'", NULL);
#endif
  {
   self->onPatchProgress(current,total);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onPatchProgress'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onPatchError of class  SFPackgePatchLuaDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackgePatchLuaDelegate_onPatchError00
static int tolua_LuaFramework_SFPackgePatchLuaDelegate_onPatchError00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackgePatchLuaDelegate",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackgePatchLuaDelegate* self = (SFPackgePatchLuaDelegate*)  tolua_tousertype(tolua_S,1,0);
  int errorCode = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onPatchError'", NULL);
#endif
  {
   self->onPatchError(errorCode);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onPatchError'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onSuccess of class  SFPackgePatchLuaDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackgePatchLuaDelegate_onSuccess00
static int tolua_LuaFramework_SFPackgePatchLuaDelegate_onSuccess00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackgePatchLuaDelegate",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackgePatchLuaDelegate* self = (SFPackgePatchLuaDelegate*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onSuccess'", NULL);
#endif
  {
   self->onSuccess();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onSuccess'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLuaHandler of class  SFPackgePatchLuaDelegate */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackgePatchLuaDelegate_setLuaHandler00
static int tolua_LuaFramework_SFPackgePatchLuaDelegate_setLuaHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackgePatchLuaDelegate",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackgePatchLuaDelegate* self = (SFPackgePatchLuaDelegate*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION nHandler = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLuaHandler'", NULL);
#endif
  {
   self->setLuaHandler(nHandler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLuaHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: mainVersion of class  SFPackageVersion */
#ifndef TOLUA_DISABLE_tolua_get_SFPackageVersion_mainVersion
static int tolua_get_SFPackageVersion_mainVersion(lua_State* tolua_S)
{
  SFPackageVersion* self = (SFPackageVersion*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'mainVersion'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->mainVersion);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: mainVersion of class  SFPackageVersion */
#ifndef TOLUA_DISABLE_tolua_set_SFPackageVersion_mainVersion
static int tolua_set_SFPackageVersion_mainVersion(lua_State* tolua_S)
{
  SFPackageVersion* self = (SFPackageVersion*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'mainVersion'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->mainVersion = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: subVersion of class  SFPackageVersion */
#ifndef TOLUA_DISABLE_tolua_get_SFPackageVersion_subVersion
static int tolua_get_SFPackageVersion_subVersion(lua_State* tolua_S)
{
  SFPackageVersion* self = (SFPackageVersion*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'subVersion'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->subVersion);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: subVersion of class  SFPackageVersion */
#ifndef TOLUA_DISABLE_tolua_set_SFPackageVersion_subVersion
static int tolua_set_SFPackageVersion_subVersion(lua_State* tolua_S)
{
  SFPackageVersion* self = (SFPackageVersion*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'subVersion'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->subVersion = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: format of class  SFPackageVersion */
#ifndef TOLUA_DISABLE_tolua_get_SFPackageVersion_format
static int tolua_get_SFPackageVersion_format(lua_State* tolua_S)
{
  SFPackageVersion* self = (SFPackageVersion*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'format'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->format);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: format of class  SFPackageVersion */
#ifndef TOLUA_DISABLE_tolua_set_SFPackageVersion_format
static int tolua_set_SFPackageVersion_format(lua_State* tolua_S)
{
  SFPackageVersion* self = (SFPackageVersion*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'format'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->format = ((char)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFPackageManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackageManager_delete00
static int tolua_LuaFramework_SFPackageManager_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackageManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackageManager* self = (SFPackageManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Instance of class  SFPackageManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackageManager_Instance00
static int tolua_LuaFramework_SFPackageManager_Instance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFPackageManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFPackageManager* tolua_ret = (SFPackageManager*)  SFPackageManager::Instance();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFPackageManager");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Instance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setResourcePath of class  SFPackageManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackageManager_setResourcePath00
static int tolua_LuaFramework_SFPackageManager_setResourcePath00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackageManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackageManager* self = (SFPackageManager*)  tolua_tousertype(tolua_S,1,0);
  const char* path = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setResourcePath'", NULL);
#endif
  {
   self->setResourcePath(path);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setResourcePath'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addPackageName of class  SFPackageManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackageManager_addPackageName00
static int tolua_LuaFramework_SFPackageManager_addPackageName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackageManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackageManager* self = (SFPackageManager*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addPackageName'", NULL);
#endif
  {
   SFPackageVersion tolua_ret = (SFPackageVersion)  self->addPackageName(name);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((SFPackageVersion)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"SFPackageVersion");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(SFPackageVersion));
     tolua_pushusertype(tolua_S,tolua_obj,"SFPackageVersion");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addPackageName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: releaseLoadPackage of class  SFPackageManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackageManager_releaseLoadPackage00
static int tolua_LuaFramework_SFPackageManager_releaseLoadPackage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackageManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackageManager* self = (SFPackageManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'releaseLoadPackage'", NULL);
#endif
  {
   self->releaseLoadPackage();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'releaseLoadPackage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPackageDelegateProtocl of class  SFPackageManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackageManager_setPackageDelegateProtocl00
static int tolua_LuaFramework_SFPackageManager_setPackageDelegateProtocl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackageManager",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFPackgePatchDelegate",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackageManager* self = (SFPackageManager*)  tolua_tousertype(tolua_S,1,0);
  SFPackgePatchDelegate* delegate = ((SFPackgePatchDelegate*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPackageDelegateProtocl'", NULL);
#endif
  {
   self->setPackageDelegateProtocl(delegate);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPackageDelegateProtocl'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: mergePackage of class  SFPackageManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackageManager_mergePackage00
static int tolua_LuaFramework_SFPackageManager_mergePackage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackageManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackageManager* self = (SFPackageManager*)  tolua_tousertype(tolua_S,1,0);
  const char* patchPackage = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'mergePackage'", NULL);
#endif
  {
   self->mergePackage(patchPackage);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'mergePackage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: startMerge of class  SFPackageManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackageManager_startMerge00
static int tolua_LuaFramework_SFPackageManager_startMerge00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackageManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackageManager* self = (SFPackageManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'startMerge'", NULL);
#endif
  {
   self->startMerge();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'startMerge'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: completePackage of class  SFPackageManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackageManager_completePackage00
static int tolua_LuaFramework_SFPackageManager_completePackage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackageManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackageManager* self = (SFPackageManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'completePackage'", NULL);
#endif
  {
   self->completePackage();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'completePackage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: canLoad of class  SFPackageManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackageManager_canLoad00
static int tolua_LuaFramework_SFPackageManager_canLoad00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackageManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackageManager* self = (SFPackageManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'canLoad'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->canLoad();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'canLoad'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isFileExist of class  SFPackageManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackageManager_isFileExist00
static int tolua_LuaFramework_SFPackageManager_isFileExist00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackageManager",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackageManager* self = (SFPackageManager*)  tolua_tousertype(tolua_S,1,0);
  std::string filePath = ((std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isFileExist'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isFileExist(filePath);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
   tolua_pushcppstring(tolua_S,(const char*)filePath);
  }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isFileExist'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFileLength of class  SFPackageManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackageManager_getFileLength00
static int tolua_LuaFramework_SFPackageManager_getFileLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackageManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackageManager* self = (SFPackageManager*)  tolua_tousertype(tolua_S,1,0);
  const char* filePath = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFileLength'", NULL);
#endif
  {
   long tolua_ret = (long)  self->getFileLength(filePath);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFileLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFileData of class  SFPackageManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackageManager_getFileData00
static int tolua_LuaFramework_SFPackageManager_getFileData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackageManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackageManager* self = (SFPackageManager*)  tolua_tousertype(tolua_S,1,0);
  const char* filePath = ((const char*)  tolua_tostring(tolua_S,2,0));
  long length = ((long)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFileData'", NULL);
#endif
  {
   unsigned char* tolua_ret = (unsigned char*)  self->getFileData(filePath,&length);
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
   tolua_pushnumber(tolua_S,(lua_Number)length);
  }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFileData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFileStringContent of class  SFPackageManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFPackageManager_getFileStringContent00
static int tolua_LuaFramework_SFPackageManager_getFileStringContent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFPackageManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFPackageManager* self = (SFPackageManager*)  tolua_tousertype(tolua_S,1,0);
  const char* filePath = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFileStringContent'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getFileStringContent(filePath);
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFileStringContent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: shareScriptManager of class  SFScriptManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScriptManager_shareScriptManager00
static int tolua_LuaFramework_SFScriptManager_shareScriptManager00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFScriptManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFScriptManager* tolua_ret = (SFScriptManager*)  SFScriptManager::shareScriptManager();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFScriptManager");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'shareScriptManager'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: excuteZpkLua of class  SFScriptManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScriptManager_excuteZpkLua00
static int tolua_LuaFramework_SFScriptManager_excuteZpkLua00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScriptManager",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScriptManager* self = (SFScriptManager*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'excuteZpkLua'", NULL);
#endif
  {
   int tolua_ret = (int)  self->excuteZpkLua(name);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'excuteZpkLua'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setZpkSupport of class  SFScriptManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScriptManager_setZpkSupport00
static int tolua_LuaFramework_SFScriptManager_setZpkSupport00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScriptManager",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScriptManager* self = (SFScriptManager*)  tolua_tousertype(tolua_S,1,0);
  bool bSupport = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setZpkSupport'", NULL);
#endif
  {
   self->setZpkSupport(bSupport);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setZpkSupport'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isSearchZpk of class  SFScriptManager */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFScriptManager_isSearchZpk00
static int tolua_LuaFramework_SFScriptManager_isSearchZpk00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFScriptManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFScriptManager* self = (SFScriptManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isSearchZpk'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isSearchZpk();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isSearchZpk'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isFileExist of class  CCFileUtils */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCFileUtils_isFileExist00
static int tolua_LuaFramework_CCFileUtils_isFileExist00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCFileUtils",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCFileUtils* self = (CCFileUtils*)  tolua_tousertype(tolua_S,1,0);
  std::string strFilePath = ((std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isFileExist'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isFileExist(strFilePath);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
   tolua_pushcppstring(tolua_S,(const char*)strFilePath);
  }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isFileExist'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFDownLoadDelegateLua */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFDownLoadDelegateLua_new00
static int tolua_LuaFramework_SFDownLoadDelegateLua_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFDownLoadDelegateLua",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFDownLoadDelegateLua* tolua_ret = (SFDownLoadDelegateLua*)  Mtolua_new((SFDownLoadDelegateLua)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFDownLoadDelegateLua");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFDownLoadDelegateLua */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFDownLoadDelegateLua_new00_local
static int tolua_LuaFramework_SFDownLoadDelegateLua_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFDownLoadDelegateLua",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFDownLoadDelegateLua* tolua_ret = (SFDownLoadDelegateLua*)  Mtolua_new((SFDownLoadDelegateLua)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFDownLoadDelegateLua");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFDownLoadDelegateLua */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFDownLoadDelegateLua_delete00
static int tolua_LuaFramework_SFDownLoadDelegateLua_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFDownLoadDelegateLua",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFDownLoadDelegateLua* self = (SFDownLoadDelegateLua*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setHandler of class  SFDownLoadDelegateLua */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFDownLoadDelegateLua_setHandler00
static int tolua_LuaFramework_SFDownLoadDelegateLua_setHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFDownLoadDelegateLua",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFDownLoadDelegateLua* self = (SFDownLoadDelegateLua*)  tolua_tousertype(tolua_S,1,0);
  LUA_FUNCTION nHnader = (  toluafix_ref_function(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setHandler'", NULL);
#endif
  {
   self->setHandler(nHnader);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setHandler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFDownload */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFDownload_new00
static int tolua_LuaFramework_SFDownload_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFDownload",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFDownload* tolua_ret = (SFDownload*)  Mtolua_new((SFDownload)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFDownload");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFDownload */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFDownload_new00_local
static int tolua_LuaFramework_SFDownload_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFDownload",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFDownload* tolua_ret = (SFDownload*)  Mtolua_new((SFDownload)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFDownload");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFDownload */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFDownload_delete00
static int tolua_LuaFramework_SFDownload_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFDownload",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFDownload* self = (SFDownload*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDelegate of class  SFDownload */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFDownload_setDelegate00
static int tolua_LuaFramework_SFDownload_setDelegate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFDownload",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFDownloadDelegateProtocl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFDownload* self = (SFDownload*)  tolua_tousertype(tolua_S,1,0);
  SFDownloadDelegateProtocl* delegate = ((SFDownloadDelegateProtocl*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDelegate'", NULL);
#endif
  {
   self->setDelegate(delegate);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDelegate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setConnectionTimeout of class  SFDownload */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFDownload_setConnectionTimeout00
static int tolua_LuaFramework_SFDownload_setConnectionTimeout00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFDownload",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFDownload* self = (SFDownload*)  tolua_tousertype(tolua_S,1,0);
  unsigned int timeout = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setConnectionTimeout'", NULL);
#endif
  {
   self->setConnectionTimeout(timeout);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setConnectionTimeout'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getConnectionTimeout of class  SFDownload */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFDownload_getConnectionTimeout00
static int tolua_LuaFramework_SFDownload_getConnectionTimeout00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFDownload",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFDownload* self = (SFDownload*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getConnectionTimeout'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getConnectionTimeout();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getConnectionTimeout'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setStoragePath of class  SFDownload */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFDownload_setStoragePath00
static int tolua_LuaFramework_SFDownload_setStoragePath00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFDownload",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFDownload* self = (SFDownload*)  tolua_tousertype(tolua_S,1,0);
  const char* storagePath = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setStoragePath'", NULL);
#endif
  {
   self->setStoragePath(storagePath);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setStoragePath'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getStoragePath of class  SFDownload */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFDownload_getStoragePath00
static int tolua_LuaFramework_SFDownload_getStoragePath00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFDownload",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFDownload* self = (SFDownload*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getStoragePath'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->getStoragePath();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getStoragePath'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addPackageUrl of class  SFDownload */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFDownload_addPackageUrl00
static int tolua_LuaFramework_SFDownload_addPackageUrl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFDownload",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFDownload* self = (SFDownload*)  tolua_tousertype(tolua_S,1,0);
  const char* url = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* md5 = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addPackageUrl'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->addPackageUrl(url,md5);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addPackageUrl'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: startDownload of class  SFDownload */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFDownload_startDownload00
static int tolua_LuaFramework_SFDownload_startDownload00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFDownload",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFDownload* self = (SFDownload*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'startDownload'", NULL);
#endif
  {
   self->startDownload();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'startDownload'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: stopDownLoad of class  SFDownload */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFDownload_stopDownLoad00
static int tolua_LuaFramework_SFDownload_stopDownLoad00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFDownload",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFDownload* self = (SFDownload*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'stopDownLoad'", NULL);
#endif
  {
   self->stopDownLoad();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'stopDownLoad'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getValue of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_getValue00
static int tolua_LuaFramework_SFControlSlider_getValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFControlSlider* self = (const SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getValue'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getValue();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setValue of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_setValue00
static int tolua_LuaFramework_SFControlSlider_setValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlSlider* self = (SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
  float val = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setValue'", NULL);
#endif
  {
   self->setValue(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMinimumValue of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_getMinimumValue00
static int tolua_LuaFramework_SFControlSlider_getMinimumValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFControlSlider* self = (const SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMinimumValue'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getMinimumValue();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMinimumValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMinimumValue of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_setMinimumValue00
static int tolua_LuaFramework_SFControlSlider_setMinimumValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlSlider* self = (SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
  float val = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMinimumValue'", NULL);
#endif
  {
   self->setMinimumValue(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMinimumValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaximumValue of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_getMaximumValue00
static int tolua_LuaFramework_SFControlSlider_getMaximumValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFControlSlider* self = (const SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaximumValue'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getMaximumValue();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaximumValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaximumValue of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_setMaximumValue00
static int tolua_LuaFramework_SFControlSlider_setMaximumValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlSlider* self = (SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
  float val = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaximumValue'", NULL);
#endif
  {
   self->setMaximumValue(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaximumValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEnabled of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_setEnabled00
static int tolua_LuaFramework_SFControlSlider_setEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlSlider* self = (SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
  bool enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEnabled'", NULL);
#endif
  {
   self->setEnabled(enabled);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isTouchInside of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_isTouchInside00
static int tolua_LuaFramework_SFControlSlider_isTouchInside00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlSlider* self = (SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* touch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isTouchInside'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isTouchInside(touch);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isTouchInside'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: locationFromTouch of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_locationFromTouch00
static int tolua_LuaFramework_SFControlSlider_locationFromTouch00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCTouch",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlSlider* self = (SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
  CCTouch* touch = ((CCTouch*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'locationFromTouch'", NULL);
#endif
  {
   CCPoint tolua_ret = (CCPoint)  self->locationFromTouch(touch);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((CCPoint)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(CCPoint));
     tolua_pushusertype(tolua_S,tolua_obj,"CCPoint");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'locationFromTouch'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMinimumAllowedValue of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_getMinimumAllowedValue00
static int tolua_LuaFramework_SFControlSlider_getMinimumAllowedValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFControlSlider* self = (const SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMinimumAllowedValue'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getMinimumAllowedValue();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMinimumAllowedValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMinimumAllowedValue of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_setMinimumAllowedValue00
static int tolua_LuaFramework_SFControlSlider_setMinimumAllowedValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlSlider* self = (SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
  float val = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMinimumAllowedValue'", NULL);
#endif
  {
   self->setMinimumAllowedValue(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMinimumAllowedValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaximumAllowedValue of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_getMaximumAllowedValue00
static int tolua_LuaFramework_SFControlSlider_getMaximumAllowedValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFControlSlider* self = (const SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaximumAllowedValue'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getMaximumAllowedValue();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaximumAllowedValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaximumAllowedValue of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_setMaximumAllowedValue00
static int tolua_LuaFramework_SFControlSlider_setMaximumAllowedValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlSlider* self = (SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
  float val = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaximumAllowedValue'", NULL);
#endif
  {
   self->setMaximumAllowedValue(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaximumAllowedValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getThumbSprite of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_getThumbSprite00
static int tolua_LuaFramework_SFControlSlider_getThumbSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFControlSlider* self = (const SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getThumbSprite'", NULL);
#endif
  {
   CCSprite* tolua_ret = (CCSprite*)  self->getThumbSprite();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCSprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getThumbSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setThumbSprite of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_setThumbSprite00
static int tolua_LuaFramework_SFControlSlider_setThumbSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCSprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlSlider* self = (SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
  CCSprite* val = ((CCSprite*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setThumbSprite'", NULL);
#endif
  {
   self->setThumbSprite(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setThumbSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getProgressSprite of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_getProgressSprite00
static int tolua_LuaFramework_SFControlSlider_getProgressSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFControlSlider* self = (const SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getProgressSprite'", NULL);
#endif
  {
   CCScale9Sprite* tolua_ret = (CCScale9Sprite*)  self->getProgressSprite();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScale9Sprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getProgressSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setProgressSprite of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_setProgressSprite00
static int tolua_LuaFramework_SFControlSlider_setProgressSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlSlider* self = (SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
  CCScale9Sprite* val = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setProgressSprite'", NULL);
#endif
  {
   self->setProgressSprite(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setProgressSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBackgroundSprite of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_getBackgroundSprite00
static int tolua_LuaFramework_SFControlSlider_getBackgroundSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFControlSlider* self = (const SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBackgroundSprite'", NULL);
#endif
  {
   CCScale9Sprite* tolua_ret = (CCScale9Sprite*)  self->getBackgroundSprite();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScale9Sprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBackgroundSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBackgroundSprite of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_setBackgroundSprite00
static int tolua_LuaFramework_SFControlSlider_setBackgroundSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlSlider* self = (SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
  CCScale9Sprite* val = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBackgroundSprite'", NULL);
#endif
  {
   self->setBackgroundSprite(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBackgroundSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getProgressBar of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_getProgressBar00
static int tolua_LuaFramework_SFControlSlider_getProgressBar00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFControlSlider* self = (const SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getProgressBar'", NULL);
#endif
  {
   SFProgressBar* tolua_ret = (SFProgressBar*)  self->getProgressBar();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFProgressBar");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getProgressBar'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setProgressBar of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_setProgressBar00
static int tolua_LuaFramework_SFControlSlider_setProgressBar00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"SFProgressBar",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlSlider* self = (SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
  SFProgressBar* val = ((SFProgressBar*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setProgressBar'", NULL);
#endif
  {
   self->setProgressBar(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setProgressBar'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getShadeSprite of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_getShadeSprite00
static int tolua_LuaFramework_SFControlSlider_getShadeSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const SFControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const SFControlSlider* self = (const SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getShadeSprite'", NULL);
#endif
  {
   CCScale9Sprite* tolua_ret = (CCScale9Sprite*)  self->getShadeSprite();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCScale9Sprite");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getShadeSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setShadeSprite of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_setShadeSprite00
static int tolua_LuaFramework_SFControlSlider_setShadeSprite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlSlider* self = (SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
  CCScale9Sprite* val = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setShadeSprite'", NULL);
#endif
  {
   self->setShadeSprite(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setShadeSprite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_new00
static int tolua_LuaFramework_SFControlSlider_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFControlSlider* tolua_ret = (SFControlSlider*)  Mtolua_new((SFControlSlider)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFControlSlider");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_new00_local
static int tolua_LuaFramework_SFControlSlider_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFControlSlider* tolua_ret = (SFControlSlider*)  Mtolua_new((SFControlSlider)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFControlSlider");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_delete00
static int tolua_LuaFramework_SFControlSlider_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlSlider* self = (SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: initWithSprites of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_initWithSprites00
static int tolua_LuaFramework_SFControlSlider_initWithSprites00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"CCSprite",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlSlider* self = (SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
  CCScale9Sprite* backgroundSprite = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,2,0));
  CCScale9Sprite* progressSprite = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,3,0));
  CCSprite* thumbSprite = ((CCSprite*)  tolua_tousertype(tolua_S,4,0));
  CCSize sizeBar = *((CCSize*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'initWithSprites'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->initWithSprites(backgroundSprite,progressSprite,thumbSprite,sizeBar);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initWithSprites'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_create00
static int tolua_LuaFramework_SFControlSlider_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isstring(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const char* bgFile = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* progressFile = ((const char*)  tolua_tostring(tolua_S,3,0));
  const char* thumbFile = ((const char*)  tolua_tostring(tolua_S,4,0));
  CCSize sizeBar = *((CCSize*)  tolua_tousertype(tolua_S,5,0));
  {
   SFControlSlider* tolua_ret = (SFControlSlider*)  SFControlSlider::create(bgFile,progressFile,thumbFile,sizeBar);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFControlSlider");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_create01
static int tolua_LuaFramework_SFControlSlider_create01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"CCSprite",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"CCSize",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCScale9Sprite* backgroundSprite = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,2,0));
  CCScale9Sprite* progressSprite = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,3,0));
  CCSprite* thumbSprite = ((CCSprite*)  tolua_tousertype(tolua_S,4,0));
  CCSize sizeBar = *((CCSize*)  tolua_tousertype(tolua_S,5,0));
  {
   SFControlSlider* tolua_ret = (SFControlSlider*)  SFControlSlider::create(backgroundSprite,progressSprite,thumbSprite,sizeBar);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFControlSlider");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_SFControlSlider_create00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: needsLayout of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_needsLayout00
static int tolua_LuaFramework_SFControlSlider_needsLayout00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlSlider* self = (SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'needsLayout'", NULL);
#endif
  {
   self->needsLayout();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'needsLayout'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setShade of class  SFControlSlider */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFControlSlider_setShade00
static int tolua_LuaFramework_SFControlSlider_setShade00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFControlSlider",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCScale9Sprite",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFControlSlider* self = (SFControlSlider*)  tolua_tousertype(tolua_S,1,0);
  CCScale9Sprite* shadeSprite = ((CCScale9Sprite*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setShade'", NULL);
#endif
  {
   self->setShade(shadeSprite);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setShade'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCClippingNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCClippingNode_create00
static int tolua_LuaFramework_CCClippingNode_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCClippingNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCClippingNode* tolua_ret = (CCClippingNode*)  CCClippingNode::create();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCClippingNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCClippingNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCClippingNode_create01
static int tolua_LuaFramework_CCClippingNode_create01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCClippingNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCNode* pStencil = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
  {
   CCClippingNode* tolua_ret = (CCClippingNode*)  CCClippingNode::create(pStencil);
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCClippingNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCClippingNode_create00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  CCClippingNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCClippingNode_delete00
static int tolua_LuaFramework_CCClippingNode_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCClippingNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCClippingNode* self = (CCClippingNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  CCClippingNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCClippingNode_init00
static int tolua_LuaFramework_CCClippingNode_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCClippingNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCClippingNode* self = (CCClippingNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  CCClippingNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCClippingNode_init01
static int tolua_LuaFramework_CCClippingNode_init01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCClippingNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  CCClippingNode* self = (CCClippingNode*)  tolua_tousertype(tolua_S,1,0);
  CCNode* pStencil = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init(pStencil);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_LuaFramework_CCClippingNode_init00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: onEnter of class  CCClippingNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCClippingNode_onEnter00
static int tolua_LuaFramework_CCClippingNode_onEnter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCClippingNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCClippingNode* self = (CCClippingNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onEnter'", NULL);
#endif
  {
   self->onEnter();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onEnter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onEnterTransitionDidFinish of class  CCClippingNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCClippingNode_onEnterTransitionDidFinish00
static int tolua_LuaFramework_CCClippingNode_onEnterTransitionDidFinish00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCClippingNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCClippingNode* self = (CCClippingNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onEnterTransitionDidFinish'", NULL);
#endif
  {
   self->onEnterTransitionDidFinish();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onEnterTransitionDidFinish'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onExitTransitionDidStart of class  CCClippingNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCClippingNode_onExitTransitionDidStart00
static int tolua_LuaFramework_CCClippingNode_onExitTransitionDidStart00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCClippingNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCClippingNode* self = (CCClippingNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onExitTransitionDidStart'", NULL);
#endif
  {
   self->onExitTransitionDidStart();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onExitTransitionDidStart'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onExit of class  CCClippingNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCClippingNode_onExit00
static int tolua_LuaFramework_CCClippingNode_onExit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCClippingNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCClippingNode* self = (CCClippingNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onExit'", NULL);
#endif
  {
   self->onExit();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onExit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: visit of class  CCClippingNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCClippingNode_visit00
static int tolua_LuaFramework_CCClippingNode_visit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCClippingNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCClippingNode* self = (CCClippingNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'visit'", NULL);
#endif
  {
   self->visit();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'visit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getStencil of class  CCClippingNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCClippingNode_getStencil00
static int tolua_LuaFramework_CCClippingNode_getStencil00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCClippingNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCClippingNode* self = (const CCClippingNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getStencil'", NULL);
#endif
  {
   CCNode* tolua_ret = (CCNode*)  self->getStencil();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getStencil'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setStencil of class  CCClippingNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCClippingNode_setStencil00
static int tolua_LuaFramework_CCClippingNode_setStencil00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCClippingNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCClippingNode* self = (CCClippingNode*)  tolua_tousertype(tolua_S,1,0);
  CCNode* pStencil = ((CCNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setStencil'", NULL);
#endif
  {
   self->setStencil(pStencil);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setStencil'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAlphaThreshold of class  CCClippingNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCClippingNode_getAlphaThreshold00
static int tolua_LuaFramework_CCClippingNode_getAlphaThreshold00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCClippingNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCClippingNode* self = (const CCClippingNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAlphaThreshold'", NULL);
#endif
  {
   GLfloat tolua_ret = (GLfloat)  self->getAlphaThreshold();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((GLfloat)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"GLfloat");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(GLfloat));
     tolua_pushusertype(tolua_S,tolua_obj,"GLfloat");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAlphaThreshold'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAlphaThreshold of class  CCClippingNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCClippingNode_setAlphaThreshold00
static int tolua_LuaFramework_CCClippingNode_setAlphaThreshold00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCClippingNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"GLfloat",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCClippingNode* self = (CCClippingNode*)  tolua_tousertype(tolua_S,1,0);
  GLfloat fAlphaThreshold = *((GLfloat*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAlphaThreshold'", NULL);
#endif
  {
   self->setAlphaThreshold(fAlphaThreshold);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAlphaThreshold'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isInverted of class  CCClippingNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCClippingNode_isInverted00
static int tolua_LuaFramework_CCClippingNode_isInverted00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCClippingNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCClippingNode* self = (const CCClippingNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isInverted'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isInverted();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isInverted'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setInverted of class  CCClippingNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCClippingNode_setInverted00
static int tolua_LuaFramework_CCClippingNode_setInverted00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCClippingNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCClippingNode* self = (CCClippingNode*)  tolua_tousertype(tolua_S,1,0);
  bool bInverted = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setInverted'", NULL);
#endif
  {
   self->setInverted(bInverted);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setInverted'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  CCDrawNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCDrawNode_create00
static int tolua_LuaFramework_CCDrawNode_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCDrawNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCDrawNode* tolua_ret = (CCDrawNode*)  CCDrawNode::create();
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCDrawNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  CCDrawNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCDrawNode_delete00
static int tolua_LuaFramework_CCDrawNode_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCDrawNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCDrawNode* self = (CCDrawNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: init of class  CCDrawNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCDrawNode_init00
static int tolua_LuaFramework_CCDrawNode_init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCDrawNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCDrawNode* self = (CCDrawNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'init'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->init();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: draw of class  CCDrawNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCDrawNode_draw00
static int tolua_LuaFramework_CCDrawNode_draw00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCDrawNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCDrawNode* self = (CCDrawNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'draw'", NULL);
#endif
  {
   self->draw();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'draw'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: drawDot of class  CCDrawNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCDrawNode_drawDot00
static int tolua_LuaFramework_CCDrawNode_drawDot00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCDrawNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const CCPoint",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const ccColor4F",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCDrawNode* self = (CCDrawNode*)  tolua_tousertype(tolua_S,1,0);
  const CCPoint* pos = ((const CCPoint*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  const ccColor4F* color = ((const ccColor4F*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'drawDot'", NULL);
#endif
  {
   self->drawDot(*pos,radius,*color);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'drawDot'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: drawSegment of class  CCDrawNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCDrawNode_drawSegment00
static int tolua_LuaFramework_CCDrawNode_drawSegment00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCDrawNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const CCPoint",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const CCPoint",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const ccColor4F",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCDrawNode* self = (CCDrawNode*)  tolua_tousertype(tolua_S,1,0);
  const CCPoint* from = ((const CCPoint*)  tolua_tousertype(tolua_S,2,0));
  const CCPoint* to = ((const CCPoint*)  tolua_tousertype(tolua_S,3,0));
  float radius = ((float)  tolua_tonumber(tolua_S,4,0));
  const ccColor4F* color = ((const ccColor4F*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'drawSegment'", NULL);
#endif
  {
   self->drawSegment(*from,*to,radius,*color);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'drawSegment'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: drawPolygon of class  CCDrawNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCDrawNode_drawPolygon00
static int tolua_LuaFramework_CCDrawNode_drawPolygon00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCDrawNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCPoint",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const ccColor4F",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const ccColor4F",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCDrawNode* self = (CCDrawNode*)  tolua_tousertype(tolua_S,1,0);
  CCPoint* verts = ((CCPoint*)  tolua_tousertype(tolua_S,2,0));
  unsigned int count = ((unsigned int)  tolua_tonumber(tolua_S,3,0));
  const ccColor4F* fillColor = ((const ccColor4F*)  tolua_tousertype(tolua_S,4,0));
  float borderWidth = ((float)  tolua_tonumber(tolua_S,5,0));
  const ccColor4F* borderColor = ((const ccColor4F*)  tolua_tousertype(tolua_S,6,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'drawPolygon'", NULL);
#endif
  {
   self->drawPolygon(verts,count,*fillColor,borderWidth,*borderColor);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'drawPolygon'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: drawPolygonWithArray of class  CCDrawNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCDrawNode_drawPolygonWithArray00
static int tolua_LuaFramework_CCDrawNode_drawPolygonWithArray00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCDrawNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"CCPointArray",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const ccColor4F",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const ccColor4F",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCDrawNode* self = (CCDrawNode*)  tolua_tousertype(tolua_S,1,0);
  CCPointArray* pointArray = ((CCPointArray*)  tolua_tousertype(tolua_S,2,0));
  const ccColor4F* fillColor = ((const ccColor4F*)  tolua_tousertype(tolua_S,3,0));
  float borderWidth = ((float)  tolua_tonumber(tolua_S,4,0));
  const ccColor4F* borderColor = ((const ccColor4F*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'drawPolygonWithArray'", NULL);
#endif
  {
   self->drawPolygonWithArray(pointArray,*fillColor,borderWidth,*borderColor);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'drawPolygonWithArray'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clear of class  CCDrawNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCDrawNode_clear00
static int tolua_LuaFramework_CCDrawNode_clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCDrawNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCDrawNode* self = (CCDrawNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clear'", NULL);
#endif
  {
   self->clear();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clear'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBlendFunc of class  CCDrawNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCDrawNode_getBlendFunc00
static int tolua_LuaFramework_CCDrawNode_getBlendFunc00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const CCDrawNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const CCDrawNode* self = (const CCDrawNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBlendFunc'", NULL);
#endif
  {
   ccBlendFunc tolua_ret = (ccBlendFunc)  self->getBlendFunc();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((ccBlendFunc)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"ccBlendFunc");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(ccBlendFunc));
     tolua_pushusertype(tolua_S,tolua_obj,"ccBlendFunc");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBlendFunc'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBlendFunc of class  CCDrawNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCDrawNode_setBlendFunc00
static int tolua_LuaFramework_CCDrawNode_setBlendFunc00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"CCDrawNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const ccBlendFunc",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  CCDrawNode* self = (CCDrawNode*)  tolua_tousertype(tolua_S,1,0);
  const ccBlendFunc* blendFunc = ((const ccBlendFunc*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBlendFunc'", NULL);
#endif
  {
   self->setBlendFunc(*blendFunc);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBlendFunc'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  CCDrawNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCDrawNode_new00
static int tolua_LuaFramework_CCDrawNode_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCDrawNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCDrawNode* tolua_ret = (CCDrawNode*)  Mtolua_new((CCDrawNode)());
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCDrawNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  CCDrawNode */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_CCDrawNode_new00_local
static int tolua_LuaFramework_CCDrawNode_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"CCDrawNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   CCDrawNode* tolua_ret = (CCDrawNode*)  Mtolua_new((CCDrawNode)());
    int nID = (tolua_ret) ? (int)tolua_ret->m_uID : -1;
    int* pLuaID = (tolua_ret) ? &tolua_ret->m_nLuaID : NULL;
    toluafix_pushusertype_ccobject(tolua_S, nID, pLuaID, (void*)tolua_ret,"CCDrawNode");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFEasyMail */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFEasyMail_new00
static int tolua_LuaFramework_SFEasyMail_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFEasyMail",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,3,0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,4,0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const std::string strUser = ((const std::string)  tolua_tocppstring(tolua_S,2,0));
  const std::string strPsw = ((const std::string)  tolua_tocppstring(tolua_S,3,0));
  const std::string strSmtpServer = ((const std::string)  tolua_tocppstring(tolua_S,4,0));
  const std::string strMailFrom = ((const std::string)  tolua_tocppstring(tolua_S,5,0));
  {
   SFEasyMail* tolua_ret = (SFEasyMail*)  Mtolua_new((SFEasyMail)(strUser,strPsw,strSmtpServer,strMailFrom));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFEasyMail");
   tolua_pushcppstring(tolua_S,(const char*)strUser);
   tolua_pushcppstring(tolua_S,(const char*)strPsw);
   tolua_pushcppstring(tolua_S,(const char*)strSmtpServer);
   tolua_pushcppstring(tolua_S,(const char*)strMailFrom);
  }
 }
 return 5;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFEasyMail */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFEasyMail_new00_local
static int tolua_LuaFramework_SFEasyMail_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFEasyMail",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,3,0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,4,0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const std::string strUser = ((const std::string)  tolua_tocppstring(tolua_S,2,0));
  const std::string strPsw = ((const std::string)  tolua_tocppstring(tolua_S,3,0));
  const std::string strSmtpServer = ((const std::string)  tolua_tocppstring(tolua_S,4,0));
  const std::string strMailFrom = ((const std::string)  tolua_tocppstring(tolua_S,5,0));
  {
   SFEasyMail* tolua_ret = (SFEasyMail*)  Mtolua_new((SFEasyMail)(strUser,strPsw,strSmtpServer,strMailFrom));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFEasyMail");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
   tolua_pushcppstring(tolua_S,(const char*)strUser);
   tolua_pushcppstring(tolua_S,(const char*)strPsw);
   tolua_pushcppstring(tolua_S,(const char*)strSmtpServer);
   tolua_pushcppstring(tolua_S,(const char*)strMailFrom);
  }
 }
 return 5;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFEasyMail */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFEasyMail_delete00
static int tolua_LuaFramework_SFEasyMail_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFEasyMail",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFEasyMail* self = (SFEasyMail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMailContent of class  SFEasyMail */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFEasyMail_SetMailContent00
static int tolua_LuaFramework_SFEasyMail_SetMailContent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFEasyMail",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFEasyMail* self = (SFEasyMail*)  tolua_tousertype(tolua_S,1,0);
  const std::string strSubject = ((const std::string)  tolua_tocppstring(tolua_S,2,0));
  const std::string strContent = ((const std::string)  tolua_tocppstring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMailContent'", NULL);
#endif
  {
   self->SetMailContent(strSubject,strContent);
   tolua_pushcppstring(tolua_S,(const char*)strSubject);
   tolua_pushcppstring(tolua_S,(const char*)strContent);
  }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMailContent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SendMail of class  SFEasyMail */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFEasyMail_SendMail00
static int tolua_LuaFramework_SFEasyMail_SendMail00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFEasyMail",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFEasyMail* self = (SFEasyMail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SendMail'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->SendMail();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SendMail'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddRecipient of class  SFEasyMail */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFEasyMail_AddRecipient00
static int tolua_LuaFramework_SFEasyMail_AddRecipient00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFEasyMail",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFEasyMail* self = (SFEasyMail*)  tolua_tousertype(tolua_S,1,0);
  const std::string strMailTo = ((const std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddRecipient'", NULL);
#endif
  {
   self->AddRecipient(strMailTo);
   tolua_pushcppstring(tolua_S,(const char*)strMailTo);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddRecipient'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SendEasyMail of class  SFEasyMail */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFEasyMail_SendEasyMail00
static int tolua_LuaFramework_SFEasyMail_SendEasyMail00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFEasyMail",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,3,0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,4,0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,5,0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,6,0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,7,0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,8,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,9,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFEasyMail* self = (SFEasyMail*)  tolua_tousertype(tolua_S,1,0);
  const std::string strUser = ((const std::string)  tolua_tocppstring(tolua_S,2,0));
  const std::string strPsw = ((const std::string)  tolua_tocppstring(tolua_S,3,0));
  const std::string strSmtpServer = ((const std::string)  tolua_tocppstring(tolua_S,4,0));
  const std::string strMailFrom = ((const std::string)  tolua_tocppstring(tolua_S,5,0));
  const std::string strMailTo = ((const std::string)  tolua_tocppstring(tolua_S,6,0));
  const std::string strSubject = ((const std::string)  tolua_tocppstring(tolua_S,7,0));
  const std::string strContent = ((const std::string)  tolua_tocppstring(tolua_S,8,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SendEasyMail'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->SendEasyMail(strUser,strPsw,strSmtpServer,strMailFrom,strMailTo,strSubject,strContent);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
   tolua_pushcppstring(tolua_S,(const char*)strUser);
   tolua_pushcppstring(tolua_S,(const char*)strPsw);
   tolua_pushcppstring(tolua_S,(const char*)strSmtpServer);
   tolua_pushcppstring(tolua_S,(const char*)strMailFrom);
   tolua_pushcppstring(tolua_S,(const char*)strMailTo);
   tolua_pushcppstring(tolua_S,(const char*)strSubject);
   tolua_pushcppstring(tolua_S,(const char*)strContent);
  }
 }
 return 8;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SendEasyMail'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  SFGameAnalyzer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameAnalyzer_new00
static int tolua_LuaFramework_SFGameAnalyzer_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameAnalyzer",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFGameAnalyzer* tolua_ret = (SFGameAnalyzer*)  Mtolua_new((SFGameAnalyzer)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGameAnalyzer");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  SFGameAnalyzer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameAnalyzer_new00_local
static int tolua_LuaFramework_SFGameAnalyzer_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameAnalyzer",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SFGameAnalyzer* tolua_ret = (SFGameAnalyzer*)  Mtolua_new((SFGameAnalyzer)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SFGameAnalyzer");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  SFGameAnalyzer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameAnalyzer_delete00
static int tolua_LuaFramework_SFGameAnalyzer_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SFGameAnalyzer",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SFGameAnalyzer* self = (SFGameAnalyzer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: logGameEvent of class  SFGameAnalyzer */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_SFGameAnalyzer_logGameEvent00
static int tolua_LuaFramework_SFGameAnalyzer_logGameEvent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SFGameAnalyzer",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int eventId = ((int)  tolua_tonumber(tolua_S,2,0));
  std::string eventData = ((std::string)  tolua_tocppstring(tolua_S,3,0));
  {
   SFGameAnalyzer::logGameEvent(eventId,eventData);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'logGameEvent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: decode of class  Base64Code */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_Base64Code_decode00
static int tolua_LuaFramework_Base64Code_decode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Base64Code",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  std::string encodeString = ((std::string)  tolua_tocppstring(tolua_S,2,0));
  {
   std::string tolua_ret = (std::string)  Base64Code::decode(encodeString);
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'decode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: encode of class  Base64Code */
#ifndef TOLUA_DISABLE_tolua_LuaFramework_Base64Code_encode00
static int tolua_LuaFramework_Base64Code_encode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Base64Code",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  unsigned char* bytes_to_encode = ((unsigned char*)  tolua_tostring(tolua_S,2,0));
  unsigned int in_len = ((unsigned int)  tolua_tonumber(tolua_S,3,0));
  {
   std::string tolua_ret = (std::string)  Base64Code::encode(bytes_to_encode,in_len);
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'encode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* Open function */
TOLUA_API int tolua_LuaFramework_open (lua_State* tolua_S)
{
 tolua_open(tolua_S);
 tolua_reg_types(tolua_S);
 tolua_module(tolua_S,NULL,0);
 tolua_beginmodule(tolua_S,NULL);
  tolua_cclass(tolua_S,"CCTexture2D","CCTexture2D","CCObject",NULL);
  tolua_beginmodule(tolua_S,"CCTexture2D");
   tolua_function(tolua_S,"getName",tolua_LuaFramework_CCTexture2D_getName00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SFSharedFontManager","SFSharedFontManager","",NULL);
  tolua_beginmodule(tolua_S,"SFSharedFontManager");
   tolua_function(tolua_S,"sharedSFSharedFontManager",tolua_LuaFramework_SFSharedFontManager_sharedSFSharedFontManager00);
   tolua_function(tolua_S,"getSpriteList",tolua_LuaFramework_SFSharedFontManager_getSpriteList00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"iStream","iStream","",tolua_collect_iStream);
  #else
  tolua_cclass(tolua_S,"iStream","iStream","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"iStream");
   tolua_constant(tolua_S,"ReadAccess",iStream::ReadAccess);
   tolua_constant(tolua_S,"WriteAccess",iStream::WriteAccess);
   tolua_constant(tolua_S,"AppendAccess",iStream::AppendAccess);
   tolua_constant(tolua_S,"ReadWriteAccess",iStream::ReadWriteAccess);
   tolua_constant(tolua_S,"Random",iStream::Random);
   tolua_constant(tolua_S,"Sequential",iStream::Sequential);
   tolua_constant(tolua_S,"Begin",iStream::Begin);
   tolua_constant(tolua_S,"Current",iStream::Current);
   tolua_constant(tolua_S,"End",iStream::End);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_iStream_delete00);
   tolua_function(tolua_S,"CanRead",tolua_LuaFramework_iStream_CanRead00);
   tolua_function(tolua_S,"CanWrite",tolua_LuaFramework_iStream_CanWrite00);
   tolua_function(tolua_S,"CanSeek",tolua_LuaFramework_iStream_CanSeek00);
   tolua_function(tolua_S,"CanBeMapped",tolua_LuaFramework_iStream_CanBeMapped00);
   tolua_function(tolua_S,"SetSize",tolua_LuaFramework_iStream_SetSize00);
   tolua_function(tolua_S,"GetSize",tolua_LuaFramework_iStream_GetSize00);
   tolua_function(tolua_S,"GetPosition",tolua_LuaFramework_iStream_GetPosition00);
   tolua_function(tolua_S,"SetAccessMode",tolua_LuaFramework_iStream_SetAccessMode00);
   tolua_function(tolua_S,"GetAccessMode",tolua_LuaFramework_iStream_GetAccessMode00);
   tolua_function(tolua_S,"SetAccessPattern",tolua_LuaFramework_iStream_SetAccessPattern00);
   tolua_function(tolua_S,"GetAccessPattern",tolua_LuaFramework_iStream_GetAccessPattern00);
   tolua_function(tolua_S,"Open",tolua_LuaFramework_iStream_Open00);
   tolua_function(tolua_S,"Close",tolua_LuaFramework_iStream_Close00);
   tolua_function(tolua_S,"IsOpen",tolua_LuaFramework_iStream_IsOpen00);
   tolua_function(tolua_S,"Write",tolua_LuaFramework_iStream_Write00);
   tolua_function(tolua_S,"Read",tolua_LuaFramework_iStream_Read00);
   tolua_function(tolua_S,"Seek",tolua_LuaFramework_iStream_Seek00);
   tolua_function(tolua_S,"Flush",tolua_LuaFramework_iStream_Flush00);
   tolua_function(tolua_S,"Eof",tolua_LuaFramework_iStream_Eof00);
   tolua_function(tolua_S,"Map",tolua_LuaFramework_iStream_Map00);
   tolua_function(tolua_S,"Unmap",tolua_LuaFramework_iStream_Unmap00);
   tolua_function(tolua_S,"IsMapped",tolua_LuaFramework_iStream_IsMapped00);
   tolua_function(tolua_S,"Dump",tolua_LuaFramework_iStream_Dump00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"iMemoryStream","iMemoryStream","iStream",tolua_collect_iMemoryStream);
  #else
  tolua_cclass(tolua_S,"iMemoryStream","iMemoryStream","iStream",NULL);
  #endif
  tolua_beginmodule(tolua_S,"iMemoryStream");
   tolua_function(tolua_S,"delete",tolua_LuaFramework_iMemoryStream_delete00);
   tolua_function(tolua_S,"GetRawPointer",tolua_LuaFramework_iMemoryStream_GetRawPointer00);
   tolua_function(tolua_S,"InitRawPointer",tolua_LuaFramework_iMemoryStream_InitRawPointer00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"iStreamReader","iStreamReader","",tolua_collect_iStreamReader);
  #else
  tolua_cclass(tolua_S,"iStreamReader","iStreamReader","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"iStreamReader");
   tolua_function(tolua_S,"delete",tolua_LuaFramework_iStreamReader_delete00);
   tolua_function(tolua_S,"SetStream",tolua_LuaFramework_iStreamReader_SetStream00);
   tolua_function(tolua_S,"GetStream",tolua_LuaFramework_iStreamReader_GetStream00);
   tolua_function(tolua_S,"HasStream",tolua_LuaFramework_iStreamReader_HasStream00);
   tolua_function(tolua_S,"Eof",tolua_LuaFramework_iStreamReader_Eof00);
   tolua_function(tolua_S,"Open",tolua_LuaFramework_iStreamReader_Open00);
   tolua_function(tolua_S,"Close",tolua_LuaFramework_iStreamReader_Close00);
   tolua_function(tolua_S,"IsOpen",tolua_LuaFramework_iStreamReader_IsOpen00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"iBinaryReader","iBinaryReader","iStreamReader",tolua_collect_iBinaryReader);
  #else
  tolua_cclass(tolua_S,"iBinaryReader","iBinaryReader","iStreamReader",NULL);
  #endif
  tolua_beginmodule(tolua_S,"iBinaryReader");
   tolua_function(tolua_S,"delete",tolua_LuaFramework_iBinaryReader_delete00);
   tolua_function(tolua_S,"SetMemoryMappingEnabled",tolua_LuaFramework_iBinaryReader_SetMemoryMappingEnabled00);
   tolua_function(tolua_S,"IsMemoryMappingEnabled",tolua_LuaFramework_iBinaryReader_IsMemoryMappingEnabled00);
   tolua_function(tolua_S,"ReadChar",tolua_LuaFramework_iBinaryReader_ReadChar00);
   tolua_function(tolua_S,"ReadUChar",tolua_LuaFramework_iBinaryReader_ReadUChar00);
   tolua_function(tolua_S,"ReadShort",tolua_LuaFramework_iBinaryReader_ReadShort00);
   tolua_function(tolua_S,"ReadUShort",tolua_LuaFramework_iBinaryReader_ReadUShort00);
   tolua_function(tolua_S,"ReadInt",tolua_LuaFramework_iBinaryReader_ReadInt00);
   tolua_function(tolua_S,"ReadUInt",tolua_LuaFramework_iBinaryReader_ReadUInt00);
   tolua_function(tolua_S,"ReadFloat",tolua_LuaFramework_iBinaryReader_ReadFloat00);
   tolua_function(tolua_S,"ReadDouble",tolua_LuaFramework_iBinaryReader_ReadDouble00);
   tolua_function(tolua_S,"ReadBool",tolua_LuaFramework_iBinaryReader_ReadBool00);
   tolua_function(tolua_S,"ReadString",tolua_LuaFramework_iBinaryReader_ReadString00);
   tolua_function(tolua_S,"ReadStringNoLen",tolua_LuaFramework_iBinaryReader_ReadStringNoLen00);
   tolua_function(tolua_S,"ReadRawData",tolua_LuaFramework_iBinaryReader_ReadRawData00);
   tolua_function(tolua_S,"ReadLLong",tolua_LuaFramework_iBinaryReader_ReadLLong00);
   tolua_function(tolua_S,"ReadULLong",tolua_LuaFramework_iBinaryReader_ReadULLong00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"iStreamWriter","iStreamWriter","",tolua_collect_iStreamWriter);
  #else
  tolua_cclass(tolua_S,"iStreamWriter","iStreamWriter","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"iStreamWriter");
   tolua_function(tolua_S,"delete",tolua_LuaFramework_iStreamWriter_delete00);
   tolua_function(tolua_S,"SetStream",tolua_LuaFramework_iStreamWriter_SetStream00);
   tolua_function(tolua_S,"GetStream",tolua_LuaFramework_iStreamWriter_GetStream00);
   tolua_function(tolua_S,"HasStream",tolua_LuaFramework_iStreamWriter_HasStream00);
   tolua_function(tolua_S,"Open",tolua_LuaFramework_iStreamWriter_Open00);
   tolua_function(tolua_S,"Close",tolua_LuaFramework_iStreamWriter_Close00);
   tolua_function(tolua_S,"IsOpen",tolua_LuaFramework_iStreamWriter_IsOpen00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"iBinaryWriter","iBinaryWriter","iStreamWriter",tolua_collect_iBinaryWriter);
  #else
  tolua_cclass(tolua_S,"iBinaryWriter","iBinaryWriter","iStreamWriter",NULL);
  #endif
  tolua_beginmodule(tolua_S,"iBinaryWriter");
   tolua_function(tolua_S,"delete",tolua_LuaFramework_iBinaryWriter_delete00);
   tolua_function(tolua_S,"SetMemoryMappingEnabled",tolua_LuaFramework_iBinaryWriter_SetMemoryMappingEnabled00);
   tolua_function(tolua_S,"IsMemoryMappingEnabled",tolua_LuaFramework_iBinaryWriter_IsMemoryMappingEnabled00);
   tolua_function(tolua_S,"WriteChar",tolua_LuaFramework_iBinaryWriter_WriteChar00);
   tolua_function(tolua_S,"WriteUChar",tolua_LuaFramework_iBinaryWriter_WriteUChar00);
   tolua_function(tolua_S,"WriteShort",tolua_LuaFramework_iBinaryWriter_WriteShort00);
   tolua_function(tolua_S,"WriteUShort",tolua_LuaFramework_iBinaryWriter_WriteUShort00);
   tolua_function(tolua_S,"WriteInt",tolua_LuaFramework_iBinaryWriter_WriteInt00);
   tolua_function(tolua_S,"WriteUInt",tolua_LuaFramework_iBinaryWriter_WriteUInt00);
   tolua_function(tolua_S,"WriteFloat",tolua_LuaFramework_iBinaryWriter_WriteFloat00);
   tolua_function(tolua_S,"WriteDouble",tolua_LuaFramework_iBinaryWriter_WriteDouble00);
   tolua_function(tolua_S,"WriteBool",tolua_LuaFramework_iBinaryWriter_WriteBool00);
   tolua_function(tolua_S,"WriteString",tolua_LuaFramework_iBinaryWriter_WriteString00);
   tolua_function(tolua_S,"WriteStringNoLen",tolua_LuaFramework_iBinaryWriter_WriteStringNoLen00);
   tolua_function(tolua_S,"WriteRawData",tolua_LuaFramework_iBinaryWriter_WriteRawData00);
   tolua_function(tolua_S,"WriteLLong",tolua_LuaFramework_iBinaryWriter_WriteLLong00);
   tolua_function(tolua_S,"WriteULLong",tolua_LuaFramework_iBinaryWriter_WriteULLong00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"StreamDataAdapter","StreamDataAdapter","",NULL);
  tolua_beginmodule(tolua_S,"StreamDataAdapter");
   tolua_function(tolua_S,"WriteChar",tolua_LuaFramework_StreamDataAdapter_WriteChar00);
   tolua_function(tolua_S,"WriteUChar",tolua_LuaFramework_StreamDataAdapter_WriteUChar00);
   tolua_function(tolua_S,"WriteShort",tolua_LuaFramework_StreamDataAdapter_WriteShort00);
   tolua_function(tolua_S,"WriteUShort",tolua_LuaFramework_StreamDataAdapter_WriteUShort00);
   tolua_function(tolua_S,"WriteInt",tolua_LuaFramework_StreamDataAdapter_WriteInt00);
   tolua_function(tolua_S,"WriteUInt",tolua_LuaFramework_StreamDataAdapter_WriteUInt00);
   tolua_function(tolua_S,"WriteFloat",tolua_LuaFramework_StreamDataAdapter_WriteFloat00);
   tolua_function(tolua_S,"WriteLLong",tolua_LuaFramework_StreamDataAdapter_WriteLLong00);
   tolua_function(tolua_S,"WriteULLong",tolua_LuaFramework_StreamDataAdapter_WriteULLong00);
   tolua_function(tolua_S,"WriteStr",tolua_LuaFramework_StreamDataAdapter_WriteStr00);
   tolua_function(tolua_S,"ReadChar",tolua_LuaFramework_StreamDataAdapter_ReadChar00);
   tolua_function(tolua_S,"ReadUChar",tolua_LuaFramework_StreamDataAdapter_ReadUChar00);
   tolua_function(tolua_S,"ReadShort",tolua_LuaFramework_StreamDataAdapter_ReadShort00);
   tolua_function(tolua_S,"ReadUShort",tolua_LuaFramework_StreamDataAdapter_ReadUShort00);
   tolua_function(tolua_S,"ReadInt",tolua_LuaFramework_StreamDataAdapter_ReadInt00);
   tolua_function(tolua_S,"ReadUInt",tolua_LuaFramework_StreamDataAdapter_ReadUInt00);
   tolua_function(tolua_S,"ReadFloat",tolua_LuaFramework_StreamDataAdapter_ReadFloat00);
   tolua_function(tolua_S,"ReadStr",tolua_LuaFramework_StreamDataAdapter_ReadStr00);
   tolua_function(tolua_S,"ReadLLong",tolua_LuaFramework_StreamDataAdapter_ReadLLong00);
   tolua_function(tolua_S,"ReadULLong",tolua_LuaFramework_StreamDataAdapter_ReadULLong00);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"LAYOUT_CENTER",LAYOUT_CENTER);
  tolua_constant(tolua_S,"LAYOUT_TOP_INSIDE",LAYOUT_TOP_INSIDE);
  tolua_constant(tolua_S,"LAYOUT_BOTTOM_INSIDE",LAYOUT_BOTTOM_INSIDE);
  tolua_constant(tolua_S,"LAYOUT_LEFT_INSIDE",LAYOUT_LEFT_INSIDE);
  tolua_constant(tolua_S,"LAYOUT_RIGHT_INSIDE",LAYOUT_RIGHT_INSIDE);
  tolua_constant(tolua_S,"LAYOUT_TOP_OUTSIDE",LAYOUT_TOP_OUTSIDE);
  tolua_constant(tolua_S,"LAYOUT_BOTTOM_OUTSIDE",LAYOUT_BOTTOM_OUTSIDE);
  tolua_constant(tolua_S,"LAYOUT_LEFT_OUTSIDE",LAYOUT_LEFT_OUTSIDE);
  tolua_constant(tolua_S,"LAYOUT_RIGHT_OUTSIDE",LAYOUT_RIGHT_OUTSIDE);
  tolua_constant(tolua_S,"LAYOUT_CENTER_X",LAYOUT_CENTER_X);
  tolua_constant(tolua_S,"LAYOUT_CENTER_Y",LAYOUT_CENTER_Y);
  tolua_cclass(tolua_S,"VisibleRect","VisibleRect","",NULL);
  tolua_beginmodule(tolua_S,"VisibleRect");
   tolua_function(tolua_S,"rect",tolua_LuaFramework_VisibleRect_rect00);
   tolua_function(tolua_S,"center",tolua_LuaFramework_VisibleRect_center00);
   tolua_function(tolua_S,"top",tolua_LuaFramework_VisibleRect_top00);
   tolua_function(tolua_S,"topRight",tolua_LuaFramework_VisibleRect_topRight00);
   tolua_function(tolua_S,"right",tolua_LuaFramework_VisibleRect_right00);
   tolua_function(tolua_S,"bottomRight",tolua_LuaFramework_VisibleRect_bottomRight00);
   tolua_function(tolua_S,"bottom",tolua_LuaFramework_VisibleRect_bottom00);
   tolua_function(tolua_S,"bottomLeft",tolua_LuaFramework_VisibleRect_bottomLeft00);
   tolua_function(tolua_S,"left",tolua_LuaFramework_VisibleRect_left00);
   tolua_function(tolua_S,"topLeft",tolua_LuaFramework_VisibleRect_topLeft00);
   tolua_function(tolua_S,"getScaleXY",tolua_LuaFramework_VisibleRect_getScaleXY00);
   tolua_function(tolua_S,"getNodeScale",tolua_LuaFramework_VisibleRect_getNodeScale00);
   tolua_function(tolua_S,"autoScaleNode",tolua_LuaFramework_VisibleRect_autoScaleNode00);
   tolua_function(tolua_S,"SFGetScaleX",tolua_LuaFramework_VisibleRect_SFGetScaleX00);
   tolua_function(tolua_S,"SFGetScaleY",tolua_LuaFramework_VisibleRect_SFGetScaleY00);
   tolua_function(tolua_S,"SFGetScale",tolua_LuaFramework_VisibleRect_SFGetScale00);
   tolua_function(tolua_S,"SFGetScaleOverOne",tolua_LuaFramework_VisibleRect_SFGetScaleOverOne00);
   tolua_constant(tolua_S,"eScaleXY",VisibleRect::eScaleXY);
   tolua_constant(tolua_S,"eScaleMin",VisibleRect::eScaleMin);
   tolua_constant(tolua_S,"eScaleMax",VisibleRect::eScaleMax);
   tolua_function(tolua_S,"sizeToFix",tolua_LuaFramework_VisibleRect_sizeToFix00);
   tolua_function(tolua_S,"autoSizeNode",tolua_LuaFramework_VisibleRect_autoSizeNode00);
   tolua_function(tolua_S,"autoSizeNodeForSmall",tolua_LuaFramework_VisibleRect_autoSizeNodeForSmall00);
   tolua_function(tolua_S,"autoFontSize",tolua_LuaFramework_VisibleRect_autoFontSize00);
   tolua_function(tolua_S,"relativePosition",tolua_LuaFramework_VisibleRect_relativePosition00);
   tolua_function(tolua_S,"relativePosition",tolua_LuaFramework_VisibleRect_relativePosition01);
   tolua_function(tolua_S,"nodeSize",tolua_LuaFramework_VisibleRect_nodeSize00);
   tolua_function(tolua_S,"getScaleSize",tolua_LuaFramework_VisibleRect_getScaleSize00);
   tolua_function(tolua_S,"getScalePoint",tolua_LuaFramework_VisibleRect_getScalePoint00);
   tolua_function(tolua_S,"getScaleLength",tolua_LuaFramework_VisibleRect_getScaleLength00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFPriorityNotificationObserver","SFPriorityNotificationObserver","",tolua_collect_SFPriorityNotificationObserver);
  #else
  tolua_cclass(tolua_S,"SFPriorityNotificationObserver","SFPriorityNotificationObserver","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFPriorityNotificationObserver");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFPriorityNotificationObserver_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFPriorityNotificationObserver_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFPriorityNotificationObserver_new00_local);
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFPriorityNotificationObserver_new01);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFPriorityNotificationObserver_new01_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFPriorityNotificationObserver_new01_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFPriorityNotificationObserver_delete00);
   tolua_function(tolua_S,"performSelector",tolua_LuaFramework_SFPriorityNotificationObserver_performSelector00);
   tolua_function(tolua_S,"performSelector",tolua_LuaFramework_SFPriorityNotificationObserver_performSelector01);
   tolua_function(tolua_S,"getTarget",tolua_LuaFramework_SFPriorityNotificationObserver_getTarget00);
   tolua_function(tolua_S,"getSelector",tolua_LuaFramework_SFPriorityNotificationObserver_getSelector00);
   tolua_function(tolua_S,"getScriptHandler",tolua_LuaFramework_SFPriorityNotificationObserver_getScriptHandler00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFPriorityNotificationCenter","SFPriorityNotificationCenter","",tolua_collect_SFPriorityNotificationCenter);
  #else
  tolua_cclass(tolua_S,"SFPriorityNotificationCenter","SFPriorityNotificationCenter","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFPriorityNotificationCenter");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFPriorityNotificationCenter_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFPriorityNotificationCenter_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFPriorityNotificationCenter_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFPriorityNotificationCenter_delete00);
   tolua_function(tolua_S,"sharedPriorityNotificationCenter",tolua_LuaFramework_SFPriorityNotificationCenter_sharedPriorityNotificationCenter00);
   tolua_function(tolua_S,"purgePriorityNotificationCenter",tolua_LuaFramework_SFPriorityNotificationCenter_purgePriorityNotificationCenter00);
   tolua_function(tolua_S,"addObserver",tolua_LuaFramework_SFPriorityNotificationCenter_addObserver00);
   tolua_function(tolua_S,"removeObserver",tolua_LuaFramework_SFPriorityNotificationCenter_removeObserver00);
   tolua_function(tolua_S,"removeObserver",tolua_LuaFramework_SFPriorityNotificationCenter_removeObserver01);
   tolua_function(tolua_S,"postNotification",tolua_LuaFramework_SFPriorityNotificationCenter_postNotification00);
   tolua_function(tolua_S,"postNotification",tolua_LuaFramework_SFPriorityNotificationCenter_postNotification01);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFSpriteAnimNotifyEvent","SFSpriteAnimNotifyEvent","",tolua_collect_SFSpriteAnimNotifyEvent);
  #else
  tolua_cclass(tolua_S,"SFSpriteAnimNotifyEvent","SFSpriteAnimNotifyEvent","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFSpriteAnimNotifyEvent");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFSpriteAnimNotifyEvent_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFSpriteAnimNotifyEvent_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFSpriteAnimNotifyEvent_new00_local);
   tolua_function(tolua_S,"getCurAction",tolua_LuaFramework_SFSpriteAnimNotifyEvent_getCurAction00);
   tolua_function(tolua_S,"getNotify",tolua_LuaFramework_SFSpriteAnimNotifyEvent_getNotify00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFTouchEvent","SFTouchEvent","",tolua_collect_SFTouchEvent);
  #else
  tolua_cclass(tolua_S,"SFTouchEvent","SFTouchEvent","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFTouchEvent");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFTouchEvent_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFTouchEvent_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFTouchEvent_new00_local);
   tolua_function(tolua_S,"getMapX",tolua_LuaFramework_SFTouchEvent_getMapX00);
   tolua_function(tolua_S,"getMapY",tolua_LuaFramework_SFTouchEvent_getMapY00);
   tolua_function(tolua_S,"getMapCellX",tolua_LuaFramework_SFTouchEvent_getMapCellX00);
   tolua_function(tolua_S,"getMapCellY",tolua_LuaFramework_SFTouchEvent_getMapCellY00);
   tolua_function(tolua_S,"getScreenX",tolua_LuaFramework_SFTouchEvent_getScreenX00);
   tolua_function(tolua_S,"getScreenY",tolua_LuaFramework_SFTouchEvent_getScreenY00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFSpriteMovementEvent","SFSpriteMovementEvent","",tolua_collect_SFSpriteMovementEvent);
  #else
  tolua_cclass(tolua_S,"SFSpriteMovementEvent","SFSpriteMovementEvent","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFSpriteMovementEvent");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFSpriteMovementEvent_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFSpriteMovementEvent_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFSpriteMovementEvent_new00_local);
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFSpriteMovementEvent_new01);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFSpriteMovementEvent_new01_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFSpriteMovementEvent_new01_local);
   tolua_function(tolua_S,"getMapX",tolua_LuaFramework_SFSpriteMovementEvent_getMapX00);
   tolua_function(tolua_S,"getMapY",tolua_LuaFramework_SFSpriteMovementEvent_getMapY00);
   tolua_function(tolua_S,"isBeginGo",tolua_LuaFramework_SFSpriteMovementEvent_isBeginGo00);
   tolua_function(tolua_S,"isBeginStop",tolua_LuaFramework_SFSpriteMovementEvent_isBeginStop00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"CCObject","CCObject","",NULL);
  tolua_beginmodule(tolua_S,"CCObject");
   tolua_function(tolua_S,"release",tolua_LuaFramework_CCObject_release00);
   tolua_function(tolua_S,"retain",tolua_LuaFramework_CCObject_retain00);
   tolua_function(tolua_S,"isSingleReference",tolua_LuaFramework_CCObject_isSingleReference00);
   tolua_function(tolua_S,"retainCount",tolua_LuaFramework_CCObject_retainCount00);
   tolua_function(tolua_S,"isEqual",tolua_LuaFramework_CCObject_isEqual00);
   tolua_function(tolua_S,"copy",tolua_LuaFramework_CCObject_copy00);
   tolua_function(tolua_S,"autorelease",tolua_LuaFramework_CCObject_autorelease00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFPoint","SFPoint","",tolua_collect_SFPoint);
  #else
  tolua_cclass(tolua_S,"SFPoint","SFPoint","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFPoint");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFPoint_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFPoint_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFPoint_new00_local);
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFPoint_new01);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFPoint_new01_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFPoint_new01_local);
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFPoint_new02);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFPoint_new02_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFPoint_new02_local);
   tolua_function(tolua_S,"setPoint",tolua_LuaFramework_SFPoint_setPoint00);
   tolua_function(tolua_S,"getX",tolua_LuaFramework_SFPoint_getX00);
   tolua_function(tolua_S,"getY",tolua_LuaFramework_SFPoint_getY00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFSize","SFSize","",tolua_collect_SFSize);
  #else
  tolua_cclass(tolua_S,"SFSize","SFSize","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFSize");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFSize_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFSize_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFSize_new00_local);
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFSize_new01);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFSize_new01_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFSize_new01_local);
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFSize_new02);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFSize_new02_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFSize_new02_local);
   tolua_function(tolua_S,"setSize",tolua_LuaFramework_SFSize_setSize00);
   tolua_function(tolua_S,"getWidth",tolua_LuaFramework_SFSize_getWidth00);
   tolua_function(tolua_S,"getHeight",tolua_LuaFramework_SFSize_getHeight00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFRect","SFRect","",tolua_collect_SFRect);
  #else
  tolua_cclass(tolua_S,"SFRect","SFRect","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFRect");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFRect_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFRect_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFRect_new00_local);
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFRect_new01);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFRect_new01_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFRect_new01_local);
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFRect_new02);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFRect_new02_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFRect_new02_local);
   tolua_function(tolua_S,"setRect",tolua_LuaFramework_SFRect_setRect00);
   tolua_function(tolua_S,"getMinX",tolua_LuaFramework_SFRect_getMinX00);
   tolua_function(tolua_S,"getMidX",tolua_LuaFramework_SFRect_getMidX00);
   tolua_function(tolua_S,"getMaxX",tolua_LuaFramework_SFRect_getMaxX00);
   tolua_function(tolua_S,"getMinY",tolua_LuaFramework_SFRect_getMinY00);
   tolua_function(tolua_S,"getMidY",tolua_LuaFramework_SFRect_getMidY00);
   tolua_function(tolua_S,"getMaxY",tolua_LuaFramework_SFRect_getMaxY00);
   tolua_function(tolua_S,"setOrigin",tolua_LuaFramework_SFRect_setOrigin00);
   tolua_function(tolua_S,"setRect",tolua_LuaFramework_SFRect_setRect01);
   tolua_function(tolua_S,"containsPoint",tolua_LuaFramework_SFRect_containsPoint00);
   tolua_function(tolua_S,"containsPoint",tolua_LuaFramework_SFRect_containsPoint01);
   tolua_function(tolua_S,"intersectsRect",tolua_LuaFramework_SFRect_intersectsRect00);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"SFControlEventTouchEnd",SFControlEventTouchEnd);
  tolua_constant(tolua_S,"SFControlEventDoubleClick",SFControlEventDoubleClick);
  tolua_constant(tolua_S,"SFControlEventLongClick",SFControlEventLongClick);
  tolua_constant(tolua_S,"SFControlEventScrollViewScroll",SFControlEventScrollViewScroll);
  tolua_constant(tolua_S,"SFControlEventScrollViewZoom",SFControlEventScrollViewZoom);
  tolua_constant(tolua_S,"SFControlEventTouchMove",SFControlEventTouchMove);
  tolua_constant(tolua_S,"SFControlEventTouchBegin",SFControlEventTouchBegin);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFBaseControl","SFBaseControl","CCLayer",tolua_collect_SFBaseControl);
  #else
  tolua_cclass(tolua_S,"SFBaseControl","SFBaseControl","CCLayer",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFBaseControl");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFBaseControl_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFBaseControl_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFBaseControl_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFBaseControl_delete00);
   tolua_function(tolua_S,"getOpacity",tolua_LuaFramework_SFBaseControl_getOpacity00);
   tolua_function(tolua_S,"setOpacity",tolua_LuaFramework_SFBaseControl_setOpacity00);
   tolua_function(tolua_S,"getColor",tolua_LuaFramework_SFBaseControl_getColor00);
   tolua_function(tolua_S,"setColor",tolua_LuaFramework_SFBaseControl_setColor00);
   tolua_function(tolua_S,"isOpacityModifyRGB",tolua_LuaFramework_SFBaseControl_isOpacityModifyRGB00);
   tolua_function(tolua_S,"setOpacityModifyRGB",tolua_LuaFramework_SFBaseControl_setOpacityModifyRGB00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_SFBaseControl_init00);
   tolua_function(tolua_S,"setControlName",tolua_LuaFramework_SFBaseControl_setControlName00);
   tolua_function(tolua_S,"getControlName",tolua_LuaFramework_SFBaseControl_getControlName00);
   tolua_function(tolua_S,"setImageKey",tolua_LuaFramework_SFBaseControl_setImageKey00);
   tolua_function(tolua_S,"getImageKey",tolua_LuaFramework_SFBaseControl_getImageKey00);
   tolua_function(tolua_S,"setTitleKey",tolua_LuaFramework_SFBaseControl_setTitleKey00);
   tolua_function(tolua_S,"getTitleKey",tolua_LuaFramework_SFBaseControl_getTitleKey00);
   tolua_function(tolua_S,"addTargetWithActionForControlEvents",tolua_LuaFramework_SFBaseControl_addTargetWithActionForControlEvents00);
   tolua_function(tolua_S,"addTargetWithActionForControlEvents",tolua_LuaFramework_SFBaseControl_addTargetWithActionForControlEvents01);
   tolua_function(tolua_S,"sendActionsForControlEvents",tolua_LuaFramework_SFBaseControl_sendActionsForControlEvents00);
   tolua_function(tolua_S,"setTouchAreaDelta",tolua_LuaFramework_SFBaseControl_setTouchAreaDelta00);
   tolua_function(tolua_S,"setTouchAreaScale",tolua_LuaFramework_SFBaseControl_setTouchAreaScale00);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"kCCScrollViewDirectionNone",kCCScrollViewDirectionNone);
  tolua_constant(tolua_S,"kCCScrollViewDirectionHorizontal",kCCScrollViewDirectionHorizontal);
  tolua_constant(tolua_S,"kCCScrollViewDirectionVertical",kCCScrollViewDirectionVertical);
  tolua_constant(tolua_S,"kCCScrollViewDirectionBoth",kCCScrollViewDirectionBoth);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"CCScrollViewDelegate","CCScrollViewDelegate","",tolua_collect_CCScrollViewDelegate);
  #else
  tolua_cclass(tolua_S,"CCScrollViewDelegate","CCScrollViewDelegate","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"CCScrollViewDelegate");
   tolua_function(tolua_S,"delete",tolua_LuaFramework_CCScrollViewDelegate_delete00);
   tolua_function(tolua_S,"scrollViewDidScroll",tolua_LuaFramework_CCScrollViewDelegate_scrollViewDidScroll00);
   tolua_function(tolua_S,"scrollViewDidZoom",tolua_LuaFramework_CCScrollViewDelegate_scrollViewDidZoom00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"CCScrollView","CCScrollView","CCLayer",tolua_collect_CCScrollView);
  #else
  tolua_cclass(tolua_S,"CCScrollView","CCScrollView","CCLayer",NULL);
  #endif
  tolua_beginmodule(tolua_S,"CCScrollView");
   tolua_function(tolua_S,"new",tolua_LuaFramework_CCScrollView_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_CCScrollView_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_CCScrollView_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_CCScrollView_delete00);
   tolua_function(tolua_S,"onExit",tolua_LuaFramework_CCScrollView_onExit00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_CCScrollView_init00);
   tolua_function(tolua_S,"registerWithTouchDispatcher",tolua_LuaFramework_CCScrollView_registerWithTouchDispatcher00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCScrollView_create00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCScrollView_create01);
   tolua_function(tolua_S,"initWithViewSize",tolua_LuaFramework_CCScrollView_initWithViewSize00);
   tolua_function(tolua_S,"setContentOffset",tolua_LuaFramework_CCScrollView_setContentOffset00);
   tolua_function(tolua_S,"getContentOffset",tolua_LuaFramework_CCScrollView_getContentOffset00);
   tolua_function(tolua_S,"setContentOffsetInDuration",tolua_LuaFramework_CCScrollView_setContentOffsetInDuration00);
   tolua_function(tolua_S,"setZoomScale",tolua_LuaFramework_CCScrollView_setZoomScale00);
   tolua_function(tolua_S,"setZoomScale",tolua_LuaFramework_CCScrollView_setZoomScale01);
   tolua_function(tolua_S,"getZoomScale",tolua_LuaFramework_CCScrollView_getZoomScale00);
   tolua_function(tolua_S,"setZoomScaleInDuration",tolua_LuaFramework_CCScrollView_setZoomScaleInDuration00);
   tolua_function(tolua_S,"minContainerOffset",tolua_LuaFramework_CCScrollView_minContainerOffset00);
   tolua_function(tolua_S,"maxContainerOffset",tolua_LuaFramework_CCScrollView_maxContainerOffset00);
   tolua_function(tolua_S,"isNodeVisible",tolua_LuaFramework_CCScrollView_isNodeVisible00);
   tolua_function(tolua_S,"pause",tolua_LuaFramework_CCScrollView_pause00);
   tolua_function(tolua_S,"resume",tolua_LuaFramework_CCScrollView_resume00);
   tolua_function(tolua_S,"isDragging",tolua_LuaFramework_CCScrollView_isDragging00);
   tolua_function(tolua_S,"isTouchMoved",tolua_LuaFramework_CCScrollView_isTouchMoved00);
   tolua_function(tolua_S,"isBounceable",tolua_LuaFramework_CCScrollView_isBounceable00);
   tolua_function(tolua_S,"setBounceable",tolua_LuaFramework_CCScrollView_setBounceable00);
   tolua_function(tolua_S,"getViewSize",tolua_LuaFramework_CCScrollView_getViewSize00);
   tolua_function(tolua_S,"setViewSize",tolua_LuaFramework_CCScrollView_setViewSize00);
   tolua_function(tolua_S,"getContainer",tolua_LuaFramework_CCScrollView_getContainer00);
   tolua_function(tolua_S,"setContainer",tolua_LuaFramework_CCScrollView_setContainer00);
   tolua_function(tolua_S,"getDirection",tolua_LuaFramework_CCScrollView_getDirection00);
   tolua_function(tolua_S,"setDirection",tolua_LuaFramework_CCScrollView_setDirection00);
   tolua_function(tolua_S,"getDelegate",tolua_LuaFramework_CCScrollView_getDelegate00);
   tolua_function(tolua_S,"setDelegate",tolua_LuaFramework_CCScrollView_setDelegate00);
   tolua_function(tolua_S,"ccTouchBegan",tolua_LuaFramework_CCScrollView_ccTouchBegan00);
   tolua_function(tolua_S,"ccTouchMoved",tolua_LuaFramework_CCScrollView_ccTouchMoved00);
   tolua_function(tolua_S,"ccTouchEnded",tolua_LuaFramework_CCScrollView_ccTouchEnded00);
   tolua_function(tolua_S,"ccTouchCancelled",tolua_LuaFramework_CCScrollView_ccTouchCancelled00);
   tolua_function(tolua_S,"setContentSize",tolua_LuaFramework_CCScrollView_setContentSize00);
   tolua_function(tolua_S,"getContentSize",tolua_LuaFramework_CCScrollView_getContentSize00);
   tolua_function(tolua_S,"updateInset",tolua_LuaFramework_CCScrollView_updateInset00);
   tolua_function(tolua_S,"isClippingToBounds",tolua_LuaFramework_CCScrollView_isClippingToBounds00);
   tolua_function(tolua_S,"setClippingToBounds",tolua_LuaFramework_CCScrollView_setClippingToBounds00);
   tolua_function(tolua_S,"visit",tolua_LuaFramework_CCScrollView_visit00);
   tolua_function(tolua_S,"addChild",tolua_LuaFramework_CCScrollView_addChild00);
   tolua_function(tolua_S,"addChild",tolua_LuaFramework_CCScrollView_addChild01);
   tolua_function(tolua_S,"addChild",tolua_LuaFramework_CCScrollView_addChild02);
   tolua_function(tolua_S,"setTouchEnabled",tolua_LuaFramework_CCScrollView_setTouchEnabled00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"CCScale9Sprite","CCScale9Sprite","CCNodeRGBA",tolua_collect_CCScale9Sprite);
  #else
  tolua_cclass(tolua_S,"CCScale9Sprite","CCScale9Sprite","CCNodeRGBA",NULL);
  #endif
  tolua_beginmodule(tolua_S,"CCScale9Sprite");
   tolua_function(tolua_S,"new",tolua_LuaFramework_CCScale9Sprite_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_CCScale9Sprite_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_CCScale9Sprite_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_CCScale9Sprite_delete00);
   tolua_function(tolua_S,"getOriginalSize",tolua_LuaFramework_CCScale9Sprite_getOriginalSize00);
   tolua_function(tolua_S,"getPreferredSize",tolua_LuaFramework_CCScale9Sprite_getPreferredSize00);
   tolua_function(tolua_S,"setPreferredSize",tolua_LuaFramework_CCScale9Sprite_setPreferredSize00);
   tolua_function(tolua_S,"getCapInsets",tolua_LuaFramework_CCScale9Sprite_getCapInsets00);
   tolua_function(tolua_S,"setCapInsets",tolua_LuaFramework_CCScale9Sprite_setCapInsets00);
   tolua_function(tolua_S,"getInsetLeft",tolua_LuaFramework_CCScale9Sprite_getInsetLeft00);
   tolua_function(tolua_S,"setInsetLeft",tolua_LuaFramework_CCScale9Sprite_setInsetLeft00);
   tolua_function(tolua_S,"getInsetTop",tolua_LuaFramework_CCScale9Sprite_getInsetTop00);
   tolua_function(tolua_S,"setInsetTop",tolua_LuaFramework_CCScale9Sprite_setInsetTop00);
   tolua_function(tolua_S,"getInsetRight",tolua_LuaFramework_CCScale9Sprite_getInsetRight00);
   tolua_function(tolua_S,"setInsetRight",tolua_LuaFramework_CCScale9Sprite_setInsetRight00);
   tolua_function(tolua_S,"getInsetBottom",tolua_LuaFramework_CCScale9Sprite_getInsetBottom00);
   tolua_function(tolua_S,"setInsetBottom",tolua_LuaFramework_CCScale9Sprite_setInsetBottom00);
   tolua_function(tolua_S,"setContentSize",tolua_LuaFramework_CCScale9Sprite_setContentSize00);
   tolua_function(tolua_S,"visit",tolua_LuaFramework_CCScale9Sprite_visit00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_CCScale9Sprite_init00);
   tolua_function(tolua_S,"initWithBatchNode",tolua_LuaFramework_CCScale9Sprite_initWithBatchNode00);
   tolua_function(tolua_S,"initWithBatchNode",tolua_LuaFramework_CCScale9Sprite_initWithBatchNode01);
   tolua_function(tolua_S,"initWithFile",tolua_LuaFramework_CCScale9Sprite_initWithFile00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCScale9Sprite_create00);
   tolua_function(tolua_S,"initWithFile",tolua_LuaFramework_CCScale9Sprite_initWithFile01);
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCScale9Sprite_create01);
   tolua_function(tolua_S,"initWithFile",tolua_LuaFramework_CCScale9Sprite_initWithFile02);
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCScale9Sprite_create02);
   tolua_function(tolua_S,"initWithFile",tolua_LuaFramework_CCScale9Sprite_initWithFile03);
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCScale9Sprite_create03);
   tolua_function(tolua_S,"initWithSpriteFrame",tolua_LuaFramework_CCScale9Sprite_initWithSpriteFrame00);
   tolua_function(tolua_S,"createWithSpriteFrame",tolua_LuaFramework_CCScale9Sprite_createWithSpriteFrame00);
   tolua_function(tolua_S,"initWithSpriteFrame",tolua_LuaFramework_CCScale9Sprite_initWithSpriteFrame01);
   tolua_function(tolua_S,"createWithSpriteFrame",tolua_LuaFramework_CCScale9Sprite_createWithSpriteFrame01);
   tolua_function(tolua_S,"initWithSpriteFrameName",tolua_LuaFramework_CCScale9Sprite_initWithSpriteFrameName00);
   tolua_function(tolua_S,"createWithSpriteFrameName",tolua_LuaFramework_CCScale9Sprite_createWithSpriteFrameName00);
   tolua_function(tolua_S,"initWithSpriteFrameName",tolua_LuaFramework_CCScale9Sprite_initWithSpriteFrameName01);
   tolua_function(tolua_S,"createWithSpriteFrameName",tolua_LuaFramework_CCScale9Sprite_createWithSpriteFrameName01);
   tolua_function(tolua_S,"resizableSpriteWithCapInsets",tolua_LuaFramework_CCScale9Sprite_resizableSpriteWithCapInsets00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCScale9Sprite_create04);
   tolua_function(tolua_S,"setOpacityModifyRGB",tolua_LuaFramework_CCScale9Sprite_setOpacityModifyRGB00);
   tolua_function(tolua_S,"isOpacityModifyRGB",tolua_LuaFramework_CCScale9Sprite_isOpacityModifyRGB00);
   tolua_function(tolua_S,"setOpacity",tolua_LuaFramework_CCScale9Sprite_setOpacity00);
   tolua_function(tolua_S,"setColor",tolua_LuaFramework_CCScale9Sprite_setColor00);
   tolua_function(tolua_S,"updateWithBatchNode",tolua_LuaFramework_CCScale9Sprite_updateWithBatchNode00);
   tolua_function(tolua_S,"setSpriteFrame",tolua_LuaFramework_CCScale9Sprite_setSpriteFrame00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"CCNodeRGBA","CCNodeRGBA","CCNode",tolua_collect_CCNodeRGBA);
  #else
  tolua_cclass(tolua_S,"CCNodeRGBA","CCNodeRGBA","CCNode",NULL);
  #endif
  tolua_beginmodule(tolua_S,"CCNodeRGBA");
   tolua_function(tolua_S,"new",tolua_LuaFramework_CCNodeRGBA_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_CCNodeRGBA_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_CCNodeRGBA_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_CCNodeRGBA_delete00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_CCNodeRGBA_init00);
   tolua_function(tolua_S,"getOpacity",tolua_LuaFramework_CCNodeRGBA_getOpacity00);
   tolua_function(tolua_S,"getDisplayedOpacity",tolua_LuaFramework_CCNodeRGBA_getDisplayedOpacity00);
   tolua_function(tolua_S,"setOpacity",tolua_LuaFramework_CCNodeRGBA_setOpacity00);
   tolua_function(tolua_S,"updateDisplayedOpacity",tolua_LuaFramework_CCNodeRGBA_updateDisplayedOpacity00);
   tolua_function(tolua_S,"isCascadeOpacityEnabled",tolua_LuaFramework_CCNodeRGBA_isCascadeOpacityEnabled00);
   tolua_function(tolua_S,"setCascadeOpacityEnabled",tolua_LuaFramework_CCNodeRGBA_setCascadeOpacityEnabled00);
   tolua_function(tolua_S,"getColor",tolua_LuaFramework_CCNodeRGBA_getColor00);
   tolua_function(tolua_S,"getDisplayedColor",tolua_LuaFramework_CCNodeRGBA_getDisplayedColor00);
   tolua_function(tolua_S,"setColor",tolua_LuaFramework_CCNodeRGBA_setColor00);
   tolua_function(tolua_S,"updateDisplayedColor",tolua_LuaFramework_CCNodeRGBA_updateDisplayedColor00);
   tolua_function(tolua_S,"isCascadeColorEnabled",tolua_LuaFramework_CCNodeRGBA_isCascadeColorEnabled00);
   tolua_function(tolua_S,"setCascadeColorEnabled",tolua_LuaFramework_CCNodeRGBA_setCascadeColorEnabled00);
   tolua_function(tolua_S,"setOpacityModifyRGB",tolua_LuaFramework_CCNodeRGBA_setOpacityModifyRGB00);
   tolua_function(tolua_S,"isOpacityModifyRGB",tolua_LuaFramework_CCNodeRGBA_isOpacityModifyRGB00);
   tolua_variable(tolua_S,"__CCRGBAProtocol__",tolua_get_CCNodeRGBA___CCRGBAProtocol__,NULL);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"CCControlEventTouchDown",CCControlEventTouchDown);
  tolua_constant(tolua_S,"CCControlEventTouchDragInside",CCControlEventTouchDragInside);
  tolua_constant(tolua_S,"CCControlEventTouchDragOutside",CCControlEventTouchDragOutside);
  tolua_constant(tolua_S,"CCControlEventTouchDragEnter",CCControlEventTouchDragEnter);
  tolua_constant(tolua_S,"CCControlEventTouchDragExit",CCControlEventTouchDragExit);
  tolua_constant(tolua_S,"CCControlEventTouchUpInside",CCControlEventTouchUpInside);
  tolua_constant(tolua_S,"CCControlEventTouchUpOutside",CCControlEventTouchUpOutside);
  tolua_constant(tolua_S,"CCControlEventTouchCancel",CCControlEventTouchCancel);
  tolua_constant(tolua_S,"CCControlEventValueChanged",CCControlEventValueChanged);
  tolua_constant(tolua_S,"CCControlStateNormal",CCControlStateNormal);
  tolua_constant(tolua_S,"CCControlStateHighlighted",CCControlStateHighlighted);
  tolua_constant(tolua_S,"CCControlStateDisabled",CCControlStateDisabled);
  tolua_constant(tolua_S,"CCControlStateSelected",CCControlStateSelected);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"CCControl","CCControl","CCLayerRGBA",tolua_collect_CCControl);
  #else
  tolua_cclass(tolua_S,"CCControl","CCControl","CCLayerRGBA",NULL);
  #endif
  tolua_beginmodule(tolua_S,"CCControl");
   tolua_function(tolua_S,"getState",tolua_LuaFramework_CCControl_getState00);
   tolua_function(tolua_S,"setEnabled",tolua_LuaFramework_CCControl_setEnabled00);
   tolua_function(tolua_S,"isEnabled",tolua_LuaFramework_CCControl_isEnabled00);
   tolua_function(tolua_S,"setSelected",tolua_LuaFramework_CCControl_setSelected00);
   tolua_function(tolua_S,"isSelected",tolua_LuaFramework_CCControl_isSelected00);
   tolua_function(tolua_S,"setHighlighted",tolua_LuaFramework_CCControl_setHighlighted00);
   tolua_function(tolua_S,"isHighlighted",tolua_LuaFramework_CCControl_isHighlighted00);
   tolua_function(tolua_S,"hasVisibleParents",tolua_LuaFramework_CCControl_hasVisibleParents00);
   tolua_function(tolua_S,"needsLayout",tolua_LuaFramework_CCControl_needsLayout00);
   tolua_function(tolua_S,"isOpacityModifyRGB",tolua_LuaFramework_CCControl_isOpacityModifyRGB00);
   tolua_function(tolua_S,"setOpacityModifyRGB",tolua_LuaFramework_CCControl_setOpacityModifyRGB00);
   tolua_function(tolua_S,"new",tolua_LuaFramework_CCControl_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_CCControl_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_CCControl_new00_local);
   tolua_function(tolua_S,"init",tolua_LuaFramework_CCControl_init00);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_CCControl_delete00);
   tolua_function(tolua_S,"onEnter",tolua_LuaFramework_CCControl_onEnter00);
   tolua_function(tolua_S,"onExit",tolua_LuaFramework_CCControl_onExit00);
   tolua_function(tolua_S,"registerWithTouchDispatcher",tolua_LuaFramework_CCControl_registerWithTouchDispatcher00);
   tolua_function(tolua_S,"sendActionsForControlEvents",tolua_LuaFramework_CCControl_sendActionsForControlEvents00);
   tolua_function(tolua_S,"addTargetWithActionForControlEvents",tolua_LuaFramework_CCControl_addTargetWithActionForControlEvents00);
   tolua_function(tolua_S,"addTargetWithActionForControlEvents",tolua_LuaFramework_CCControl_addTargetWithActionForControlEvents01);
   tolua_function(tolua_S,"removeTargetWithActionForControlEvents",tolua_LuaFramework_CCControl_removeTargetWithActionForControlEvents00);
   tolua_function(tolua_S,"getTouchLocation",tolua_LuaFramework_CCControl_getTouchLocation00);
   tolua_function(tolua_S,"isTouchInside",tolua_LuaFramework_CCControl_isTouchInside00);
   tolua_function(tolua_S,"setTouchAreaDelta",tolua_LuaFramework_CCControl_setTouchAreaDelta00);
   tolua_function(tolua_S,"setTouchAreaScale",tolua_LuaFramework_CCControl_setTouchAreaScale00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"CCControlButton","CCControlButton","CCControl",tolua_collect_CCControlButton);
  #else
  tolua_cclass(tolua_S,"CCControlButton","CCControlButton","CCControl",NULL);
  #endif
  tolua_beginmodule(tolua_S,"CCControlButton");
   tolua_function(tolua_S,"new",tolua_LuaFramework_CCControlButton_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_CCControlButton_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_CCControlButton_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_CCControlButton_delete00);
   tolua_function(tolua_S,"needsLayout",tolua_LuaFramework_CCControlButton_needsLayout00);
   tolua_function(tolua_S,"setEnabled",tolua_LuaFramework_CCControlButton_setEnabled00);
   tolua_function(tolua_S,"setSelected",tolua_LuaFramework_CCControlButton_setSelected00);
   tolua_function(tolua_S,"setHighlighted",tolua_LuaFramework_CCControlButton_setHighlighted00);
   tolua_function(tolua_S,"getCurrentTitle",tolua_LuaFramework_CCControlButton_getCurrentTitle00);
   tolua_function(tolua_S,"getCurrentTitleColor",tolua_LuaFramework_CCControlButton_getCurrentTitleColor00);
   tolua_function(tolua_S,"doesAdjustBackgroundImage",tolua_LuaFramework_CCControlButton_doesAdjustBackgroundImage00);
   tolua_function(tolua_S,"setAdjustBackgroundImage",tolua_LuaFramework_CCControlButton_setAdjustBackgroundImage00);
   tolua_function(tolua_S,"getTitleLabel",tolua_LuaFramework_CCControlButton_getTitleLabel00);
   tolua_function(tolua_S,"setTitleLabel",tolua_LuaFramework_CCControlButton_setTitleLabel00);
   tolua_function(tolua_S,"getBackgroundSprite",tolua_LuaFramework_CCControlButton_getBackgroundSprite00);
   tolua_function(tolua_S,"setBackgroundSprite",tolua_LuaFramework_CCControlButton_setBackgroundSprite00);
   tolua_function(tolua_S,"getPreferredSize",tolua_LuaFramework_CCControlButton_getPreferredSize00);
   tolua_function(tolua_S,"setPreferredSize",tolua_LuaFramework_CCControlButton_setPreferredSize00);
   tolua_function(tolua_S,"getZoomOnTouchDown",tolua_LuaFramework_CCControlButton_getZoomOnTouchDown00);
   tolua_function(tolua_S,"setZoomOnTouchDown",tolua_LuaFramework_CCControlButton_setZoomOnTouchDown00);
   tolua_function(tolua_S,"getLabelAnchorPoint",tolua_LuaFramework_CCControlButton_getLabelAnchorPoint00);
   tolua_function(tolua_S,"setLabelAnchorPoint",tolua_LuaFramework_CCControlButton_setLabelAnchorPoint00);
   tolua_function(tolua_S,"getOpacity",tolua_LuaFramework_CCControlButton_getOpacity00);
   tolua_function(tolua_S,"setOpacity",tolua_LuaFramework_CCControlButton_setOpacity00);
   tolua_function(tolua_S,"isPushed",tolua_LuaFramework_CCControlButton_isPushed00);
   tolua_function(tolua_S,"getTitleDispatchTable",tolua_LuaFramework_CCControlButton_getTitleDispatchTable00);
   tolua_function(tolua_S,"setTitleDispatchTable",tolua_LuaFramework_CCControlButton_setTitleDispatchTable00);
   tolua_function(tolua_S,"getTitleColorDispatchTable",tolua_LuaFramework_CCControlButton_getTitleColorDispatchTable00);
   tolua_function(tolua_S,"setTitleColorDispatchTable",tolua_LuaFramework_CCControlButton_setTitleColorDispatchTable00);
   tolua_function(tolua_S,"getTitleLabelDispatchTable",tolua_LuaFramework_CCControlButton_getTitleLabelDispatchTable00);
   tolua_function(tolua_S,"setTitleLabelDispatchTable",tolua_LuaFramework_CCControlButton_setTitleLabelDispatchTable00);
   tolua_function(tolua_S,"getBackgroundSpriteDispatchTable",tolua_LuaFramework_CCControlButton_getBackgroundSpriteDispatchTable00);
   tolua_function(tolua_S,"setBackgroundSpriteDispatchTable",tolua_LuaFramework_CCControlButton_setBackgroundSpriteDispatchTable00);
   tolua_function(tolua_S,"getVerticalMargin",tolua_LuaFramework_CCControlButton_getVerticalMargin00);
   tolua_function(tolua_S,"getHorizontalOrigin",tolua_LuaFramework_CCControlButton_getHorizontalOrigin00);
   tolua_function(tolua_S,"setMargins",tolua_LuaFramework_CCControlButton_setMargins00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_CCControlButton_init00);
   tolua_function(tolua_S,"initWithLabelAndBackgroundSprite",tolua_LuaFramework_CCControlButton_initWithLabelAndBackgroundSprite00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCControlButton_create00);
   tolua_function(tolua_S,"initWithTitleAndFontNameAndFontSize",tolua_LuaFramework_CCControlButton_initWithTitleAndFontNameAndFontSize00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCControlButton_create01);
   tolua_function(tolua_S,"initWithBackgroundSprite",tolua_LuaFramework_CCControlButton_initWithBackgroundSprite00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCControlButton_create02);
   tolua_function(tolua_S,"ccTouchBegan",tolua_LuaFramework_CCControlButton_ccTouchBegan00);
   tolua_function(tolua_S,"ccTouchMoved",tolua_LuaFramework_CCControlButton_ccTouchMoved00);
   tolua_function(tolua_S,"ccTouchEnded",tolua_LuaFramework_CCControlButton_ccTouchEnded00);
   tolua_function(tolua_S,"ccTouchCancelled",tolua_LuaFramework_CCControlButton_ccTouchCancelled00);
   tolua_function(tolua_S,"setTitleString",tolua_LuaFramework_CCControlButton_setTitleString00);
   tolua_function(tolua_S,"setEnable",tolua_LuaFramework_CCControlButton_setEnable00);
   tolua_function(tolua_S,"setScaleDef",tolua_LuaFramework_CCControlButton_setScaleDef00);
   tolua_function(tolua_S,"setOpacityDef",tolua_LuaFramework_CCControlButton_setOpacityDef00);
   tolua_function(tolua_S,"getTitleForState",tolua_LuaFramework_CCControlButton_getTitleForState00);
   tolua_function(tolua_S,"setTitleForState",tolua_LuaFramework_CCControlButton_setTitleForState00);
   tolua_function(tolua_S,"getTitleColorForState",tolua_LuaFramework_CCControlButton_getTitleColorForState00);
   tolua_function(tolua_S,"setTitleColorForState",tolua_LuaFramework_CCControlButton_setTitleColorForState00);
   tolua_function(tolua_S,"getTitleLabelForState",tolua_LuaFramework_CCControlButton_getTitleLabelForState00);
   tolua_function(tolua_S,"setTitleLabelForState",tolua_LuaFramework_CCControlButton_setTitleLabelForState00);
   tolua_function(tolua_S,"setTitleTTFForState",tolua_LuaFramework_CCControlButton_setTitleTTFForState00);
   tolua_function(tolua_S,"getTitleTTFForState",tolua_LuaFramework_CCControlButton_getTitleTTFForState00);
   tolua_function(tolua_S,"setTitleTTFSizeForState",tolua_LuaFramework_CCControlButton_setTitleTTFSizeForState00);
   tolua_function(tolua_S,"getTitleTTFSizeForState",tolua_LuaFramework_CCControlButton_getTitleTTFSizeForState00);
   tolua_function(tolua_S,"setTitleBMFontForState",tolua_LuaFramework_CCControlButton_setTitleBMFontForState00);
   tolua_function(tolua_S,"getTitleBMFontForState",tolua_LuaFramework_CCControlButton_getTitleBMFontForState00);
   tolua_function(tolua_S,"getBackgroundSpriteForState",tolua_LuaFramework_CCControlButton_getBackgroundSpriteForState00);
   tolua_function(tolua_S,"setBackgroundSpriteForState",tolua_LuaFramework_CCControlButton_setBackgroundSpriteForState00);
   tolua_function(tolua_S,"setBackgroundSpriteFrameForState",tolua_LuaFramework_CCControlButton_setBackgroundSpriteFrameForState00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCControlButton_create03);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"kKeyboardReturnTypeDefault",kKeyboardReturnTypeDefault);
  tolua_constant(tolua_S,"kKeyboardReturnTypeDone",kKeyboardReturnTypeDone);
  tolua_constant(tolua_S,"kKeyboardReturnTypeSend",kKeyboardReturnTypeSend);
  tolua_constant(tolua_S,"kKeyboardReturnTypeSearch",kKeyboardReturnTypeSearch);
  tolua_constant(tolua_S,"kKeyboardReturnTypeGo",kKeyboardReturnTypeGo);
  tolua_constant(tolua_S,"kEditBoxInputModeAny",kEditBoxInputModeAny);
  tolua_constant(tolua_S,"kEditBoxInputModeEmailAddr",kEditBoxInputModeEmailAddr);
  tolua_constant(tolua_S,"kEditBoxInputModeNumeric",kEditBoxInputModeNumeric);
  tolua_constant(tolua_S,"kEditBoxInputModePhoneNumber",kEditBoxInputModePhoneNumber);
  tolua_constant(tolua_S,"kEditBoxInputModeUrl",kEditBoxInputModeUrl);
  tolua_constant(tolua_S,"kEditBoxInputModeDecimal",kEditBoxInputModeDecimal);
  tolua_constant(tolua_S,"kEditBoxInputModeSingleLine",kEditBoxInputModeSingleLine);
  tolua_constant(tolua_S,"kEditBoxInputFlagPassword",kEditBoxInputFlagPassword);
  tolua_constant(tolua_S,"kEditBoxInputFlagSensitive",kEditBoxInputFlagSensitive);
  tolua_constant(tolua_S,"kEditBoxInputFlagInitialCapsWord",kEditBoxInputFlagInitialCapsWord);
  tolua_constant(tolua_S,"kEditBoxInputFlagInitialCapsSentence",kEditBoxInputFlagInitialCapsSentence);
  tolua_constant(tolua_S,"kEditBoxInputFlagInitialCapsAllCharacters",kEditBoxInputFlagInitialCapsAllCharacters);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"CCEditBoxDelegate","CCEditBoxDelegate","",tolua_collect_CCEditBoxDelegate);
  #else
  tolua_cclass(tolua_S,"CCEditBoxDelegate","CCEditBoxDelegate","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"CCEditBoxDelegate");
   tolua_function(tolua_S,"delete",tolua_LuaFramework_CCEditBoxDelegate_delete00);
   tolua_function(tolua_S,"editBoxEditingDidBegin",tolua_LuaFramework_CCEditBoxDelegate_editBoxEditingDidBegin00);
   tolua_function(tolua_S,"editBoxEditingDidEnd",tolua_LuaFramework_CCEditBoxDelegate_editBoxEditingDidEnd00);
   tolua_function(tolua_S,"editBoxTextChanged",tolua_LuaFramework_CCEditBoxDelegate_editBoxTextChanged00);
   tolua_function(tolua_S,"editBoxReturn",tolua_LuaFramework_CCEditBoxDelegate_editBoxReturn00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"CCEditBox","CCEditBox","CCControlButton",tolua_collect_CCEditBox);
  #else
  tolua_cclass(tolua_S,"CCEditBox","CCEditBox","CCControlButton",NULL);
  #endif
  tolua_beginmodule(tolua_S,"CCEditBox");
   tolua_function(tolua_S,"new",tolua_LuaFramework_CCEditBox_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_CCEditBox_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_CCEditBox_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_CCEditBox_delete00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCEditBox_create00);
   tolua_function(tolua_S,"initWithSizeAndBackgroundSprite",tolua_LuaFramework_CCEditBox_initWithSizeAndBackgroundSprite00);
   tolua_function(tolua_S,"setDelegate",tolua_LuaFramework_CCEditBox_setDelegate00);
   tolua_function(tolua_S,"getDelegate",tolua_LuaFramework_CCEditBox_getDelegate00);
   tolua_function(tolua_S,"registerScriptEditBoxHandler",tolua_LuaFramework_CCEditBox_registerScriptEditBoxHandler00);
   tolua_function(tolua_S,"unregisterScriptEditBoxHandler",tolua_LuaFramework_CCEditBox_unregisterScriptEditBoxHandler00);
   tolua_function(tolua_S,"getScriptEditBoxHandler",tolua_LuaFramework_CCEditBox_getScriptEditBoxHandler00);
   tolua_function(tolua_S,"setText",tolua_LuaFramework_CCEditBox_setText00);
   tolua_function(tolua_S,"getText",tolua_LuaFramework_CCEditBox_getText00);
   tolua_function(tolua_S,"setFont",tolua_LuaFramework_CCEditBox_setFont00);
   tolua_function(tolua_S,"setFontName",tolua_LuaFramework_CCEditBox_setFontName00);
   tolua_function(tolua_S,"setFontSize",tolua_LuaFramework_CCEditBox_setFontSize00);
   tolua_function(tolua_S,"setFontColor",tolua_LuaFramework_CCEditBox_setFontColor00);
   tolua_function(tolua_S,"setPlaceholderFont",tolua_LuaFramework_CCEditBox_setPlaceholderFont00);
   tolua_function(tolua_S,"setPlaceholderFontName",tolua_LuaFramework_CCEditBox_setPlaceholderFontName00);
   tolua_function(tolua_S,"setPlaceholderFontSize",tolua_LuaFramework_CCEditBox_setPlaceholderFontSize00);
   tolua_function(tolua_S,"setPlaceholderFontColor",tolua_LuaFramework_CCEditBox_setPlaceholderFontColor00);
   tolua_function(tolua_S,"setPlaceHolder",tolua_LuaFramework_CCEditBox_setPlaceHolder00);
   tolua_function(tolua_S,"getPlaceHolder",tolua_LuaFramework_CCEditBox_getPlaceHolder00);
   tolua_function(tolua_S,"setInputMode",tolua_LuaFramework_CCEditBox_setInputMode00);
   tolua_function(tolua_S,"setMaxLength",tolua_LuaFramework_CCEditBox_setMaxLength00);
   tolua_function(tolua_S,"getMaxLength",tolua_LuaFramework_CCEditBox_getMaxLength00);
   tolua_function(tolua_S,"setInputFlag",tolua_LuaFramework_CCEditBox_setInputFlag00);
   tolua_function(tolua_S,"setReturnType",tolua_LuaFramework_CCEditBox_setReturnType00);
   tolua_function(tolua_S,"setPosition",tolua_LuaFramework_CCEditBox_setPosition00);
   tolua_function(tolua_S,"setVisible",tolua_LuaFramework_CCEditBox_setVisible00);
   tolua_function(tolua_S,"setContentSize",tolua_LuaFramework_CCEditBox_setContentSize00);
   tolua_function(tolua_S,"setAnchorPoint",tolua_LuaFramework_CCEditBox_setAnchorPoint00);
   tolua_function(tolua_S,"visit",tolua_LuaFramework_CCEditBox_visit00);
   tolua_function(tolua_S,"onEnter",tolua_LuaFramework_CCEditBox_onEnter00);
   tolua_function(tolua_S,"onExit",tolua_LuaFramework_CCEditBox_onExit00);
   tolua_function(tolua_S,"keyboardWillShow",tolua_LuaFramework_CCEditBox_keyboardWillShow00);
   tolua_function(tolua_S,"keyboardDidShow",tolua_LuaFramework_CCEditBox_keyboardDidShow00);
   tolua_function(tolua_S,"keyboardWillHide",tolua_LuaFramework_CCEditBox_keyboardWillHide00);
   tolua_function(tolua_S,"keyboardDidHide",tolua_LuaFramework_CCEditBox_keyboardDidHide00);
   tolua_function(tolua_S,"touchDownAction",tolua_LuaFramework_CCEditBox_touchDownAction00);
   tolua_variable(tolua_S,"__CCIMEDelegate__",tolua_get_CCEditBox___CCIMEDelegate__,NULL);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"tab_horizontal",tab_horizontal);
  tolua_constant(tolua_S,"tab_vertical",tab_vertical);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFTabView","SFTabView","SFBaseControl",tolua_collect_SFTabView);
  #else
  tolua_cclass(tolua_S,"SFTabView","SFTabView","SFBaseControl",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFTabView");
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFTabView_delete00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFTabView_create00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_SFTabView_init00);
   tolua_function(tolua_S,"initControlTaget",tolua_LuaFramework_SFTabView_initControlTaget00);
   tolua_function(tolua_S,"getSize",tolua_LuaFramework_SFTabView_getSize00);
   tolua_function(tolua_S,"insertControl",tolua_LuaFramework_SFTabView_insertControl00);
   tolua_function(tolua_S,"removeControl",tolua_LuaFramework_SFTabView_removeControl00);
   tolua_function(tolua_S,"getSelControl",tolua_LuaFramework_SFTabView_getSelControl00);
   tolua_function(tolua_S,"setSelControl",tolua_LuaFramework_SFTabView_setSelControl00);
   tolua_function(tolua_S,"getSelIndex",tolua_LuaFramework_SFTabView_getSelIndex00);
   tolua_function(tolua_S,"setSelIndex",tolua_LuaFramework_SFTabView_setSelIndex00);
   tolua_function(tolua_S,"setTabMode",tolua_LuaFramework_SFTabView_setTabMode00);
   tolua_function(tolua_S,"setDelegate",tolua_LuaFramework_SFTabView_setDelegate00);
   tolua_function(tolua_S,"setAllUnSel",tolua_LuaFramework_SFTabView_setAllUnSel00);
   tolua_function(tolua_S,"setDefaultSel",tolua_LuaFramework_SFTabView_setDefaultSel00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SFTabViewDelegate","SFTabViewDelegate","",NULL);
  tolua_beginmodule(tolua_S,"SFTabViewDelegate");
   tolua_function(tolua_S,"didSelControl",tolua_LuaFramework_SFTabViewDelegate_didSelControl00);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"kSFScrollViewDirectionNone",kSFScrollViewDirectionNone);
  tolua_constant(tolua_S,"kSFScrollViewDirectionHorizontal",kSFScrollViewDirectionHorizontal);
  tolua_constant(tolua_S,"kSFScrollViewDirectionVertical",kSFScrollViewDirectionVertical);
  tolua_constant(tolua_S,"kSFScrollViewDirectionBoth",kSFScrollViewDirectionBoth);
  tolua_constant(tolua_S,"kSFScrollViewFillTopDown",kSFScrollViewFillTopDown);
  tolua_constant(tolua_S,"kSFScrollViewFillBottomUp",kSFScrollViewFillBottomUp);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFScrollViewDelegate","SFScrollViewDelegate","",tolua_collect_SFScrollViewDelegate);
  #else
  tolua_cclass(tolua_S,"SFScrollViewDelegate","SFScrollViewDelegate","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFScrollViewDelegate");
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFScrollViewDelegate_delete00);
   tolua_function(tolua_S,"scrollViewDidScroll",tolua_LuaFramework_SFScrollViewDelegate_scrollViewDidScroll00);
   tolua_function(tolua_S,"scrollViewDidZoom",tolua_LuaFramework_SFScrollViewDelegate_scrollViewDidZoom00);
   tolua_function(tolua_S,"scrollViewTouchBegin",tolua_LuaFramework_SFScrollViewDelegate_scrollViewTouchBegin00);
   tolua_function(tolua_S,"scrollViewTouchMove",tolua_LuaFramework_SFScrollViewDelegate_scrollViewTouchMove00);
   tolua_function(tolua_S,"scrollViewTouchEnd",tolua_LuaFramework_SFScrollViewDelegate_scrollViewTouchEnd00);
   tolua_function(tolua_S,"scrollViewDidAnimateScrollEnd",tolua_LuaFramework_SFScrollViewDelegate_scrollViewDidAnimateScrollEnd00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFScrollView","SFScrollView","SFBaseControl",tolua_collect_SFScrollView);
  #else
  tolua_cclass(tolua_S,"SFScrollView","SFScrollView","SFBaseControl",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFScrollView");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFScrollView_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFScrollView_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFScrollView_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFScrollView_delete00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_SFScrollView_init00);
   tolua_function(tolua_S,"registerWithTouchDispatcher",tolua_LuaFramework_SFScrollView_registerWithTouchDispatcher00);
   tolua_function(tolua_S,"viewWithViewSize",tolua_LuaFramework_SFScrollView_viewWithViewSize00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFScrollView_create00);
   tolua_function(tolua_S,"node",tolua_LuaFramework_SFScrollView_node00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFScrollView_create01);
   tolua_function(tolua_S,"initWithViewSize",tolua_LuaFramework_SFScrollView_initWithViewSize00);
   tolua_function(tolua_S,"setContentOffset",tolua_LuaFramework_SFScrollView_setContentOffset00);
   tolua_function(tolua_S,"getContentOffset",tolua_LuaFramework_SFScrollView_getContentOffset00);
   tolua_function(tolua_S,"setContentOffsetInDuration",tolua_LuaFramework_SFScrollView_setContentOffsetInDuration00);
   tolua_function(tolua_S,"setZoomScale",tolua_LuaFramework_SFScrollView_setZoomScale00);
   tolua_function(tolua_S,"setZoomScale",tolua_LuaFramework_SFScrollView_setZoomScale01);
   tolua_function(tolua_S,"getZoomScale",tolua_LuaFramework_SFScrollView_getZoomScale00);
   tolua_function(tolua_S,"setZoomScaleInDuration",tolua_LuaFramework_SFScrollView_setZoomScaleInDuration00);
   tolua_function(tolua_S,"minContainerOffset",tolua_LuaFramework_SFScrollView_minContainerOffset00);
   tolua_function(tolua_S,"maxContainerOffset",tolua_LuaFramework_SFScrollView_maxContainerOffset00);
   tolua_function(tolua_S,"isNodeVisible",tolua_LuaFramework_SFScrollView_isNodeVisible00);
   tolua_function(tolua_S,"pause",tolua_LuaFramework_SFScrollView_pause00);
   tolua_function(tolua_S,"resume",tolua_LuaFramework_SFScrollView_resume00);
   tolua_function(tolua_S,"isDragging",tolua_LuaFramework_SFScrollView_isDragging00);
   tolua_function(tolua_S,"isTouchMoved",tolua_LuaFramework_SFScrollView_isTouchMoved00);
   tolua_function(tolua_S,"isBounceable",tolua_LuaFramework_SFScrollView_isBounceable00);
   tolua_function(tolua_S,"setBounceable",tolua_LuaFramework_SFScrollView_setBounceable00);
   tolua_function(tolua_S,"getViewSize",tolua_LuaFramework_SFScrollView_getViewSize00);
   tolua_function(tolua_S,"setViewSize",tolua_LuaFramework_SFScrollView_setViewSize00);
   tolua_function(tolua_S,"getContainer",tolua_LuaFramework_SFScrollView_getContainer00);
   tolua_function(tolua_S,"setContainer",tolua_LuaFramework_SFScrollView_setContainer00);
   tolua_function(tolua_S,"getDirection",tolua_LuaFramework_SFScrollView_getDirection00);
   tolua_function(tolua_S,"setDirection",tolua_LuaFramework_SFScrollView_setDirection00);
   tolua_function(tolua_S,"getDelegate",tolua_LuaFramework_SFScrollView_getDelegate00);
   tolua_function(tolua_S,"setDelegate",tolua_LuaFramework_SFScrollView_setDelegate00);
   tolua_function(tolua_S,"ccTouchBegan",tolua_LuaFramework_SFScrollView_ccTouchBegan00);
   tolua_function(tolua_S,"ccTouchMoved",tolua_LuaFramework_SFScrollView_ccTouchMoved00);
   tolua_function(tolua_S,"ccTouchEnded",tolua_LuaFramework_SFScrollView_ccTouchEnded00);
   tolua_function(tolua_S,"ccTouchCancelled",tolua_LuaFramework_SFScrollView_ccTouchCancelled00);
   tolua_function(tolua_S,"setContentSize",tolua_LuaFramework_SFScrollView_setContentSize00);
   tolua_function(tolua_S,"getContentSize",tolua_LuaFramework_SFScrollView_getContentSize00);
   tolua_function(tolua_S,"updateInset",tolua_LuaFramework_SFScrollView_updateInset00);
   tolua_function(tolua_S,"isClippingToBounds",tolua_LuaFramework_SFScrollView_isClippingToBounds00);
   tolua_function(tolua_S,"setClippingToBounds",tolua_LuaFramework_SFScrollView_setClippingToBounds00);
   tolua_function(tolua_S,"visit",tolua_LuaFramework_SFScrollView_visit00);
   tolua_function(tolua_S,"addChild",tolua_LuaFramework_SFScrollView_addChild00);
   tolua_function(tolua_S,"addChild",tolua_LuaFramework_SFScrollView_addChild01);
   tolua_function(tolua_S,"addChild",tolua_LuaFramework_SFScrollView_addChild02);
   tolua_function(tolua_S,"setTouchEnabled",tolua_LuaFramework_SFScrollView_setTouchEnabled00);
   tolua_function(tolua_S,"setPageEnable",tolua_LuaFramework_SFScrollView_setPageEnable00);
   tolua_function(tolua_S,"getPage",tolua_LuaFramework_SFScrollView_getPage00);
   tolua_function(tolua_S,"setCurrentPage",tolua_LuaFramework_SFScrollView_setCurrentPage00);
   tolua_function(tolua_S,"setHandler",tolua_LuaFramework_SFScrollView_setHandler00);
   tolua_function(tolua_S,"getAutoScroll",tolua_LuaFramework_SFScrollView_getAutoScroll00);
   tolua_function(tolua_S,"setAutoScroll",tolua_LuaFramework_SFScrollView_setAutoScroll00);
   tolua_function(tolua_S,"setPageSize",tolua_LuaFramework_SFScrollView_setPageSize00);
   tolua_function(tolua_S,"getPageSize",tolua_LuaFramework_SFScrollView_getPageSize00);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"kSFVerticalTextAlignmentTop",kSFVerticalTextAlignmentTop);
  tolua_constant(tolua_S,"kSFVerticalTextAlignmentCenter",kSFVerticalTextAlignmentCenter);
  tolua_constant(tolua_S,"kSFVerticalTextAlignmentBottom",kSFVerticalTextAlignmentBottom);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFLabel","SFLabel","SFBaseControl",tolua_collect_SFLabel);
  #else
  tolua_cclass(tolua_S,"SFLabel","SFLabel","SFBaseControl",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFLabel");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFLabel_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFLabel_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFLabel_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFLabel_delete00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFLabel_create00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFLabel_create01);
   tolua_function(tolua_S,"init",tolua_LuaFramework_SFLabel_init00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_SFLabel_init01);
   tolua_function(tolua_S,"setDimensions",tolua_LuaFramework_SFLabel_setDimensions00);
   tolua_function(tolua_S,"setString",tolua_LuaFramework_SFLabel_setString00);
   tolua_function(tolua_S,"setFontName",tolua_LuaFramework_SFLabel_setFontName00);
   tolua_function(tolua_S,"setFontSize",tolua_LuaFramework_SFLabel_setFontSize00);
   tolua_function(tolua_S,"setVerticalTextAlignment",tolua_LuaFramework_SFLabel_setVerticalTextAlignment00);
   tolua_function(tolua_S,"getDimensions",tolua_LuaFramework_SFLabel_getDimensions00);
   tolua_function(tolua_S,"getString",tolua_LuaFramework_SFLabel_getString00);
   tolua_function(tolua_S,"getFontName",tolua_LuaFramework_SFLabel_getFontName00);
   tolua_function(tolua_S,"getFontSize",tolua_LuaFramework_SFLabel_getFontSize00);
   tolua_function(tolua_S,"getVerticalTextAlignment",tolua_LuaFramework_SFLabel_getVerticalTextAlignment00);
   tolua_function(tolua_S,"getContentSize",tolua_LuaFramework_SFLabel_getContentSize00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFLabelTex","SFLabelTex","CCSprite",tolua_collect_SFLabelTex);
  #else
  tolua_cclass(tolua_S,"SFLabelTex","SFLabelTex","CCSprite",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFLabelTex");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFLabelTex_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFLabelTex_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFLabelTex_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFLabelTex_delete00);
   tolua_function(tolua_S,"initWithString",tolua_LuaFramework_SFLabelTex_initWithString00);
   tolua_function(tolua_S,"initWithString",tolua_LuaFramework_SFLabelTex_initWithString01);
   tolua_function(tolua_S,"initWithString",tolua_LuaFramework_SFLabelTex_initWithString02);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFLabelTex_create00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFLabelTex_create01);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFLabelTex_create02);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFLabelTex_create03);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFLabelTex_create04);
   tolua_function(tolua_S,"setFontFillColor",tolua_LuaFramework_SFLabelTex_setFontFillColor00);
   tolua_function(tolua_S,"getFontFillColor",tolua_LuaFramework_SFLabelTex_getFontFillColor00);
   tolua_function(tolua_S,"setColor",tolua_LuaFramework_SFLabelTex_setColor00);
   tolua_function(tolua_S,"setString",tolua_LuaFramework_SFLabelTex_setString00);
   tolua_function(tolua_S,"getString",tolua_LuaFramework_SFLabelTex_getString00);
   tolua_function(tolua_S,"getHorizontalAlignment",tolua_LuaFramework_SFLabelTex_getHorizontalAlignment00);
   tolua_function(tolua_S,"setHorizontalAlignment",tolua_LuaFramework_SFLabelTex_setHorizontalAlignment00);
   tolua_function(tolua_S,"getVerticalAlignment",tolua_LuaFramework_SFLabelTex_getVerticalAlignment00);
   tolua_function(tolua_S,"setVerticalAlignment",tolua_LuaFramework_SFLabelTex_setVerticalAlignment00);
   tolua_function(tolua_S,"getDimensions",tolua_LuaFramework_SFLabelTex_getDimensions00);
   tolua_function(tolua_S,"setDimensions",tolua_LuaFramework_SFLabelTex_setDimensions00);
   tolua_function(tolua_S,"getFontSize",tolua_LuaFramework_SFLabelTex_getFontSize00);
   tolua_function(tolua_S,"setFontSize",tolua_LuaFramework_SFLabelTex_setFontSize00);
   tolua_function(tolua_S,"getFontName",tolua_LuaFramework_SFLabelTex_getFontName00);
   tolua_function(tolua_S,"setFontName",tolua_LuaFramework_SFLabelTex_setFontName00);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"GameSimulatorSlaveTag",GameSimulatorSlaveTag);
  tolua_constant(tolua_S,"Current_GameSceneTag",Current_GameSceneTag);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFGamePresenter","SFGamePresenter","CCObject",tolua_collect_SFGamePresenter);
  #else
  tolua_cclass(tolua_S,"SFGamePresenter","SFGamePresenter","CCObject",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFGamePresenter");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFGamePresenter_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFGamePresenter_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFGamePresenter_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFGamePresenter_delete00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_SFGamePresenter_init00);
   tolua_function(tolua_S,"gamePresenter",tolua_LuaFramework_SFGamePresenter_gamePresenter00);
   tolua_function(tolua_S,"scene",tolua_LuaFramework_SFGamePresenter_scene00);
   tolua_function(tolua_S,"replaceScene",tolua_LuaFramework_SFGamePresenter_replaceScene00);
   tolua_function(tolua_S,"getCrtScene",tolua_LuaFramework_SFGamePresenter_getCrtScene00);
   tolua_function(tolua_S,"addAndGetScene",tolua_LuaFramework_SFGamePresenter_addAndGetScene00);
   tolua_function(tolua_S,"switchTo",tolua_LuaFramework_SFGamePresenter_switchTo00);
   tolua_function(tolua_S,"switchTo",tolua_LuaFramework_SFGamePresenter_switchTo01);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFTouchDelegate","SFTouchDelegate","",tolua_collect_SFTouchDelegate);
  #else
  tolua_cclass(tolua_S,"SFTouchDelegate","SFTouchDelegate","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFTouchDelegate");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFTouchDelegate_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFTouchDelegate_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFTouchDelegate_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFTouchDelegate_delete00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"RTLayer","RTLayer","CCLayer",tolua_collect_RTLayer);
  #else
  tolua_cclass(tolua_S,"RTLayer","RTLayer","CCLayer",NULL);
  #endif
  tolua_beginmodule(tolua_S,"RTLayer");
   tolua_function(tolua_S,"new",tolua_LuaFramework_RTLayer_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_RTLayer_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_RTLayer_new00_local);
   tolua_function(tolua_S,"create",tolua_LuaFramework_RTLayer_create00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_RTLayer_init00);
   tolua_variable(tolua_S,"__SFTouchDelegate__",tolua_get_RTLayer___SFTouchDelegate__,NULL);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"TagGameLayer",TagGameLayer);
  tolua_constant(tolua_S,"TagUILayer",TagUILayer);
  tolua_constant(tolua_S,"TagDialogLayer",TagDialogLayer);
  tolua_constant(tolua_S,"SceneEventEnter",SceneEventEnter);
  tolua_constant(tolua_S,"SceneEventExit",SceneEventExit);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFGameScene","SFGameScene","RTLayer",tolua_collect_SFGameScene);
  #else
  tolua_cclass(tolua_S,"SFGameScene","SFGameScene","RTLayer",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFGameScene");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFGameScene_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFGameScene_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFGameScene_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFGameScene_delete00);
   tolua_function(tolua_S,"initWithContext",tolua_LuaFramework_SFGameScene_initWithContext00);
   tolua_function(tolua_S,"gameSceneWithContext",tolua_LuaFramework_SFGameScene_gameSceneWithContext00);
   tolua_function(tolua_S,"onEnter",tolua_LuaFramework_SFGameScene_onEnter00);
   tolua_function(tolua_S,"onExit",tolua_LuaFramework_SFGameScene_onExit00);
   tolua_function(tolua_S,"getContext",tolua_LuaFramework_SFGameScene_getContext00);
   tolua_function(tolua_S,"getGameLayerByTag",tolua_LuaFramework_SFGameScene_getGameLayerByTag00);
   tolua_function(tolua_S,"addGameLayer",tolua_LuaFramework_SFGameScene_addGameLayer00);
   tolua_function(tolua_S,"removeGameLayer",tolua_LuaFramework_SFGameScene_removeGameLayer00);
   tolua_function(tolua_S,"removeGameLayer",tolua_LuaFramework_SFGameScene_removeGameLayer01);
   tolua_function(tolua_S,"getUILayerByTag",tolua_LuaFramework_SFGameScene_getUILayerByTag00);
   tolua_function(tolua_S,"addUILayer",tolua_LuaFramework_SFGameScene_addUILayer00);
   tolua_function(tolua_S,"removeUILayer",tolua_LuaFramework_SFGameScene_removeUILayer00);
   tolua_function(tolua_S,"removeUILayer",tolua_LuaFramework_SFGameScene_removeUILayer01);
   tolua_function(tolua_S,"getDialogLayerByTag",tolua_LuaFramework_SFGameScene_getDialogLayerByTag00);
   tolua_function(tolua_S,"addDialogLayer",tolua_LuaFramework_SFGameScene_addDialogLayer00);
   tolua_function(tolua_S,"removeDialogLayer",tolua_LuaFramework_SFGameScene_removeDialogLayer00);
   tolua_function(tolua_S,"removeDialogLayer",tolua_LuaFramework_SFGameScene_removeDialogLayer01);
   tolua_function(tolua_S,"addSceneEventHandler",tolua_LuaFramework_SFGameScene_addSceneEventHandler00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFGameSceneMgr","SFGameSceneMgr","CCObject",tolua_collect_SFGameSceneMgr);
  #else
  tolua_cclass(tolua_S,"SFGameSceneMgr","SFGameSceneMgr","CCObject",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFGameSceneMgr");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFGameSceneMgr_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFGameSceneMgr_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFGameSceneMgr_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFGameSceneMgr_delete00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_SFGameSceneMgr_init00);
   tolua_function(tolua_S,"gameSceneMgr",tolua_LuaFramework_SFGameSceneMgr_gameSceneMgr00);
   tolua_function(tolua_S,"addGameScene",tolua_LuaFramework_SFGameSceneMgr_addGameScene00);
   tolua_function(tolua_S,"removeGameSceneWithContext",tolua_LuaFramework_SFGameSceneMgr_removeGameSceneWithContext00);
   tolua_function(tolua_S,"getGameScene",tolua_LuaFramework_SFGameSceneMgr_getGameScene00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SFCommunicationListener","SFCommunicationListener","",NULL);
  tolua_beginmodule(tolua_S,"SFCommunicationListener");
   tolua_function(tolua_S,"handleRecv",tolua_LuaFramework_SFCommunicationListener_handleRecv00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SFTcpConnectionListener","SFTcpConnectionListener","",NULL);
  tolua_beginmodule(tolua_S,"SFTcpConnectionListener");
   tolua_function(tolua_S,"handleConnected",tolua_LuaFramework_SFTcpConnectionListener_handleConnected00);
   tolua_function(tolua_S,"handleDisconnected",tolua_LuaFramework_SFTcpConnectionListener_handleDisconnected00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SFHttpResponseListener","SFHttpResponseListener","",NULL);
  tolua_beginmodule(tolua_S,"SFHttpResponseListener");
   tolua_function(tolua_S,"handleHttpResponse",tolua_LuaFramework_SFHttpResponseListener_handleHttpResponse00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFGameSimulator","SFGameSimulator","CCObject",tolua_collect_SFGameSimulator);
  #else
  tolua_cclass(tolua_S,"SFGameSimulator","SFGameSimulator","CCObject",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFGameSimulator");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFGameSimulator_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFGameSimulator_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFGameSimulator_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFGameSimulator_delete00);
   tolua_function(tolua_S,"sharedGameSimulator",tolua_LuaFramework_SFGameSimulator_sharedGameSimulator00);
   tolua_function(tolua_S,"purgeGameSimulator",tolua_LuaFramework_SFGameSimulator_purgeGameSimulator00);
   tolua_function(tolua_S,"getPresenterScene",tolua_LuaFramework_SFGameSimulator_getPresenterScene00);
   tolua_function(tolua_S,"getGamePresenter",tolua_LuaFramework_SFGameSimulator_getGamePresenter00);
   tolua_function(tolua_S,"getBinaryWriter",tolua_LuaFramework_SFGameSimulator_getBinaryWriter00);
   tolua_function(tolua_S,"setCommunicationListener",tolua_LuaFramework_SFGameSimulator_setCommunicationListener00);
   tolua_function(tolua_S,"setHttpResponseListener",tolua_LuaFramework_SFGameSimulator_setHttpResponseListener00);
   tolua_function(tolua_S,"tick",tolua_LuaFramework_SFGameSimulator_tick00);
   tolua_function(tolua_S,"setTpcConnectionHandler",tolua_LuaFramework_SFGameSimulator_setTpcConnectionHandler00);
   tolua_function(tolua_S,"enableTcpCommService",tolua_LuaFramework_SFGameSimulator_enableTcpCommService00);
   tolua_function(tolua_S,"setTcpConnectionListener",tolua_LuaFramework_SFGameSimulator_setTcpConnectionListener00);
   tolua_function(tolua_S,"tcpConnect",tolua_LuaFramework_SFGameSimulator_tcpConnect00);
   tolua_function(tolua_S,"tcpDisConnect",tolua_LuaFramework_SFGameSimulator_tcpDisConnect00);
   tolua_function(tolua_S,"isTcpConnect",tolua_LuaFramework_SFGameSimulator_isTcpConnect00);
   tolua_function(tolua_S,"onTcpConnect",tolua_LuaFramework_SFGameSimulator_onTcpConnect00);
   tolua_function(tolua_S,"onTcpRecv",tolua_LuaFramework_SFGameSimulator_onTcpRecv00);
   tolua_function(tolua_S,"onTcpClose",tolua_LuaFramework_SFGameSimulator_onTcpClose00);
   tolua_function(tolua_S,"onRecvGameEvent",tolua_LuaFramework_SFGameSimulator_onRecvGameEvent00);
   tolua_function(tolua_S,"sendTcpActionEvent",tolua_LuaFramework_SFGameSimulator_sendTcpActionEvent00);
   tolua_function(tolua_S,"sendTcpActionEventInLua",tolua_LuaFramework_SFGameSimulator_sendTcpActionEventInLua00);
   tolua_function(tolua_S,"sendGetHttpRequest",tolua_LuaFramework_SFGameSimulator_sendGetHttpRequest00);
   tolua_function(tolua_S,"sendPostHttpReuqest",tolua_LuaFramework_SFGameSimulator_sendPostHttpReuqest00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFControlFactoryManager","SFControlFactoryManager","CCObject",tolua_collect_SFControlFactoryManager);
  #else
  tolua_cclass(tolua_S,"SFControlFactoryManager","SFControlFactoryManager","CCObject",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFControlFactoryManager");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFControlFactoryManager_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFControlFactoryManager_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFControlFactoryManager_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFControlFactoryManager_delete00);
   tolua_function(tolua_S,"LoadAllFacotry",tolua_LuaFramework_SFControlFactoryManager_LoadAllFacotry00);
   tolua_function(tolua_S,"AddFactory",tolua_LuaFramework_SFControlFactoryManager_AddFactory00);
   tolua_function(tolua_S,"RemoveFactory",tolua_LuaFramework_SFControlFactoryManager_RemoveFactory00);
   tolua_function(tolua_S,"getFactory",tolua_LuaFramework_SFControlFactoryManager_getFactory00);
   tolua_function(tolua_S,"shareCCControlFactoryMgr",tolua_LuaFramework_SFControlFactoryManager_shareCCControlFactoryMgr00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFControlFactory","SFControlFactory","",tolua_collect_SFControlFactory);
  #else
  tolua_cclass(tolua_S,"SFControlFactory","SFControlFactory","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFControlFactory");
   tolua_function(tolua_S,"CreateControl",tolua_LuaFramework_SFControlFactory_CreateControl00);
   tolua_function(tolua_S,"DestroyControl",tolua_LuaFramework_SFControlFactory_DestroyControl00);
   tolua_function(tolua_S,"GetTypeName",tolua_LuaFramework_SFControlFactory_GetTypeName00);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"eRenderLayer_Sprite",eRenderLayer_Sprite);
  tolua_constant(tolua_S,"eRenderLayer_SpriteBackground",eRenderLayer_SpriteBackground);
  tolua_constant(tolua_S,"eRenderLayer_Effect",eRenderLayer_Effect);
  tolua_constant(tolua_S,"eMapTouchEventBegin",eMapTouchEventBegin);
  tolua_constant(tolua_S,"eMapTouchEventMove",eMapTouchEventMove);
  tolua_constant(tolua_S,"eMapTouchEventEnd",eMapTouchEventEnd);
  tolua_constant(tolua_S,"eMapRenderDelMode_NPC",eMapRenderDelMode_NPC);
  tolua_constant(tolua_S,"eMapRenderDelMode_Monster",eMapRenderDelMode_Monster);
  tolua_constant(tolua_S,"eMapRenderDelMode_Player",eMapRenderDelMode_Player);
  tolua_constant(tolua_S,"eMapRenderDelMode_Effect",eMapRenderDelMode_Effect);
  tolua_constant(tolua_S,"eMapRenderDelMode_Normal",eMapRenderDelMode_Normal);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFMap","SFMap","ISqlReadStreamCallBack",tolua_collect_SFMap);
  #else
  tolua_cclass(tolua_S,"SFMap","SFMap","ISqlReadStreamCallBack",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFMap");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFMap_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFMap_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFMap_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFMap_delete00);
   tolua_function(tolua_S,"coodMap2Cell",tolua_LuaFramework_SFMap_coodMap2Cell00);
   tolua_function(tolua_S,"coodCell2Map",tolua_LuaFramework_SFMap_coodCell2Map00);
   tolua_function(tolua_S,"loadMap",tolua_LuaFramework_SFMap_loadMap00);
   tolua_function(tolua_S,"saveMap",tolua_LuaFramework_SFMap_saveMap00);
   tolua_function(tolua_S,"setDefaultId",tolua_LuaFramework_SFMap_setDefaultId00);
   tolua_function(tolua_S,"loadCharacterModel",tolua_LuaFramework_SFMap_loadCharacterModel00);
   tolua_function(tolua_S,"enterMap",tolua_LuaFramework_SFMap_enterMap00);
   tolua_function(tolua_S,"leaveMap",tolua_LuaFramework_SFMap_leaveMap00);
   tolua_function(tolua_S,"loadMap",tolua_LuaFramework_SFMap_loadMap01);
   tolua_function(tolua_S,"enterMapAsyn",tolua_LuaFramework_SFMap_enterMapAsyn00);
   tolua_function(tolua_S,"enterMap",tolua_LuaFramework_SFMap_enterMap01);
   tolua_function(tolua_S,"leaveMap",tolua_LuaFramework_SFMap_leaveMap01);
   tolua_function(tolua_S,"leaveMap",tolua_LuaFramework_SFMap_leaveMap02);
   tolua_function(tolua_S,"getMapWidth",tolua_LuaFramework_SFMap_getMapWidth00);
   tolua_function(tolua_S,"getMapHeight",tolua_LuaFramework_SFMap_getMapHeight00);
   tolua_function(tolua_S,"setViewCenter",tolua_LuaFramework_SFMap_setViewCenter00);
   tolua_function(tolua_S,"getViewCenterX",tolua_LuaFramework_SFMap_getViewCenterX00);
   tolua_function(tolua_S,"getViewCenterY",tolua_LuaFramework_SFMap_getViewCenterY00);
   tolua_function(tolua_S,"setViewBegin",tolua_LuaFramework_SFMap_setViewBegin00);
   tolua_function(tolua_S,"getViewBeginX",tolua_LuaFramework_SFMap_getViewBeginX00);
   tolua_function(tolua_S,"getViewBeginY",tolua_LuaFramework_SFMap_getViewBeginY00);
   tolua_function(tolua_S,"setViewSize",tolua_LuaFramework_SFMap_setViewSize00);
   tolua_function(tolua_S,"getViewSizeW",tolua_LuaFramework_SFMap_getViewSizeW00);
   tolua_function(tolua_S,"getViewSizeH",tolua_LuaFramework_SFMap_getViewSizeH00);
   tolua_function(tolua_S,"setScriptHandler",tolua_LuaFramework_SFMap_setScriptHandler00);
   tolua_function(tolua_S,"IsBlock",tolua_LuaFramework_SFMap_IsBlock00);
   tolua_function(tolua_S,"IsHaveBlock",tolua_LuaFramework_SFMap_IsHaveBlock00);
   tolua_function(tolua_S,"findBlock",tolua_LuaFramework_SFMap_findBlock00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_SFMap_init00);
   tolua_function(tolua_S,"attach",tolua_LuaFramework_SFMap_attach00);
   tolua_function(tolua_S,"dettach",tolua_LuaFramework_SFMap_dettach00);
   tolua_function(tolua_S,"injectTouchBegin",tolua_LuaFramework_SFMap_injectTouchBegin00);
   tolua_function(tolua_S,"injectTouchEnd",tolua_LuaFramework_SFMap_injectTouchEnd00);
   tolua_function(tolua_S,"getRenderScene",tolua_LuaFramework_SFMap_getRenderScene00);
   tolua_function(tolua_S,"OnMapDataLoaded",tolua_LuaFramework_SFMap_OnMapDataLoaded00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFMapService","SFMapService","",tolua_collect_SFMapService);
  #else
  tolua_cclass(tolua_S,"SFMapService","SFMapService","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFMapService");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFMapService_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFMapService_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFMapService_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFMapService_delete00);
   tolua_function(tolua_S,"startUp",tolua_LuaFramework_SFMapService_startUp00);
   tolua_function(tolua_S,"shutDown",tolua_LuaFramework_SFMapService_shutDown00);
   tolua_function(tolua_S,"getShareMap",tolua_LuaFramework_SFMapService_getShareMap00);
   tolua_function(tolua_S,"setScriptHandler",tolua_LuaFramework_SFMapService_setScriptHandler00);
   tolua_function(tolua_S,"instance",tolua_LuaFramework_SFMapService_instance00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"GameResource","GameResource","",tolua_collect_GameResource);
  #else
  tolua_cclass(tolua_S,"GameResource","GameResource","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"GameResource");
   tolua_function(tolua_S,"new",tolua_LuaFramework_GameResource_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_GameResource_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_GameResource_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_GameResource_delete00);
   tolua_function(tolua_S,"instance",tolua_LuaFramework_GameResource_instance00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"RenderSprite","RenderSprite","CCNodeRGBA",tolua_collect_RenderSprite);
  #else
  tolua_cclass(tolua_S,"RenderSprite","RenderSprite","CCNodeRGBA",NULL);
  #endif
  tolua_beginmodule(tolua_S,"RenderSprite");
   tolua_function(tolua_S,"reset",tolua_LuaFramework_RenderSprite_reset00);
   tolua_function(tolua_S,"new",tolua_LuaFramework_RenderSprite_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_RenderSprite_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_RenderSprite_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_RenderSprite_delete00);
   tolua_function(tolua_S,"load",tolua_LuaFramework_RenderSprite_load00);
   tolua_function(tolua_S,"onLeaveMap",tolua_LuaFramework_RenderSprite_onLeaveMap00);
   tolua_function(tolua_S,"getModelId",tolua_LuaFramework_RenderSprite_getModelId00);
   tolua_function(tolua_S,"clear",tolua_LuaFramework_RenderSprite_clear00);
   tolua_function(tolua_S,"setAngle",tolua_LuaFramework_RenderSprite_setAngle00);
   tolua_function(tolua_S,"getAngle",tolua_LuaFramework_RenderSprite_getAngle00);
   tolua_function(tolua_S,"setRenderOffset",tolua_LuaFramework_RenderSprite_setRenderOffset00);
   tolua_function(tolua_S,"setAlpha",tolua_LuaFramework_RenderSprite_setAlpha00);
   tolua_function(tolua_S,"changeModel",tolua_LuaFramework_RenderSprite_changeModel00);
   tolua_function(tolua_S,"changeModelWithDefault",tolua_LuaFramework_RenderSprite_changeModelWithDefault00);
   tolua_function(tolua_S,"changeActionCallback",tolua_LuaFramework_RenderSprite_changeActionCallback00);
   tolua_function(tolua_S,"changeAction",tolua_LuaFramework_RenderSprite_changeAction00);
   tolua_function(tolua_S,"setAnimSpeed",tolua_LuaFramework_RenderSprite_setAnimSpeed00);
   tolua_function(tolua_S,"setEnableOpacity",tolua_LuaFramework_RenderSprite_setEnableOpacity00);
   tolua_function(tolua_S,"changePartWithDefault",tolua_LuaFramework_RenderSprite_changePartWithDefault00);
   tolua_function(tolua_S,"setPartScale",tolua_LuaFramework_RenderSprite_setPartScale00);
   tolua_function(tolua_S,"getPartScale",tolua_LuaFramework_RenderSprite_getPartScale00);
   tolua_function(tolua_S,"setVisiblePart",tolua_LuaFramework_RenderSprite_setVisiblePart00);
   tolua_function(tolua_S,"setAnimNotifyScriptHandler",tolua_LuaFramework_RenderSprite_setAnimNotifyScriptHandler00);
   tolua_function(tolua_S,"getBoundRect",tolua_LuaFramework_RenderSprite_getBoundRect00);
   tolua_function(tolua_S,"getHeadNode",tolua_LuaFramework_RenderSprite_getHeadNode00);
   tolua_function(tolua_S,"getCenterPositionY",tolua_LuaFramework_RenderSprite_getCenterPositionY00);
   tolua_function(tolua_S,"getAlpha",tolua_LuaFramework_RenderSprite_getAlpha00);
   tolua_function(tolua_S,"visit",tolua_LuaFramework_RenderSprite_visit00);
   tolua_function(tolua_S,"getZOrder",tolua_LuaFramework_RenderSprite_getZOrder00);
   tolua_function(tolua_S,"getContentSize",tolua_LuaFramework_RenderSprite_getContentSize00);
   tolua_function(tolua_S,"setRenderSpriteVisible",tolua_LuaFramework_RenderSprite_setRenderSpriteVisible00);
   tolua_function(tolua_S,"getRenderSpriteVisible",tolua_LuaFramework_RenderSprite_getRenderSpriteVisible00);
   tolua_function(tolua_S,"getActionId",tolua_LuaFramework_RenderSprite_getActionId00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"RenderScene","RenderScene","CCNode",tolua_collect_RenderScene);
  #else
  tolua_cclass(tolua_S,"RenderScene","RenderScene","CCNode",NULL);
  #endif
  tolua_beginmodule(tolua_S,"RenderScene");
   tolua_function(tolua_S,"new",tolua_LuaFramework_RenderScene_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_RenderScene_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_RenderScene_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_RenderScene_delete00);
   tolua_function(tolua_S,"visit",tolua_LuaFramework_RenderScene_visit00);
   tolua_function(tolua_S,"scheduleUpdate",tolua_LuaFramework_RenderScene_scheduleUpdate00);
   tolua_function(tolua_S,"addChild",tolua_LuaFramework_RenderScene_addChild00);
   tolua_function(tolua_S,"update",tolua_LuaFramework_RenderScene_update00);
   tolua_function(tolua_S,"load",tolua_LuaFramework_RenderScene_load00);
   tolua_function(tolua_S,"getMap",tolua_LuaFramework_RenderScene_getMap00);
   tolua_function(tolua_S,"setViewCenter",tolua_LuaFramework_RenderScene_setViewCenter00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"RpgSprite","RpgSprite","RenderSprite",tolua_collect_RpgSprite);
  #else
  tolua_cclass(tolua_S,"RpgSprite","RpgSprite","RenderSprite",NULL);
  #endif
  tolua_beginmodule(tolua_S,"RpgSprite");
   tolua_function(tolua_S,"new",tolua_LuaFramework_RpgSprite_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_RpgSprite_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_RpgSprite_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_RpgSprite_delete00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_RpgSprite_create00);
   tolua_function(tolua_S,"onEnter",tolua_LuaFramework_RpgSprite_onEnter00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"CCTableViewCell","CCTableViewCell","CCNode",tolua_collect_CCTableViewCell);
  #else
  tolua_cclass(tolua_S,"CCTableViewCell","CCTableViewCell","CCNode",NULL);
  #endif
  tolua_beginmodule(tolua_S,"CCTableViewCell");
   tolua_function(tolua_S,"new",tolua_LuaFramework_CCTableViewCell_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_CCTableViewCell_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_CCTableViewCell_new00_local);
   tolua_function(tolua_S,"getIdx",tolua_LuaFramework_CCTableViewCell_getIdx00);
   tolua_function(tolua_S,"setIdx",tolua_LuaFramework_CCTableViewCell_setIdx00);
   tolua_function(tolua_S,"reset",tolua_LuaFramework_CCTableViewCell_reset00);
   tolua_function(tolua_S,"setObjectID",tolua_LuaFramework_CCTableViewCell_setObjectID00);
   tolua_function(tolua_S,"getObjectID",tolua_LuaFramework_CCTableViewCell_getObjectID00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SFTableViewCell","SFTableViewCell","CCTableViewCell",NULL);
  tolua_beginmodule(tolua_S,"SFTableViewCell");
   tolua_function(tolua_S,"setIdentify",tolua_LuaFramework_SFTableViewCell_setIdentify00);
   tolua_function(tolua_S,"getIdentify",tolua_LuaFramework_SFTableViewCell_getIdentify00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFTableViewCell_create00);
   tolua_function(tolua_S,"getIndex",tolua_LuaFramework_SFTableViewCell_getIndex00);
   tolua_function(tolua_S,"setIndex",tolua_LuaFramework_SFTableViewCell_setIndex00);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"kSFTableViewFillTopDown",kSFTableViewFillTopDown);
  tolua_constant(tolua_S,"kSFTableViewFillBottomUp",kSFTableViewFillBottomUp);
  tolua_cclass(tolua_S,"SFTableViewDelegate","SFTableViewDelegate","CCScrollViewDelegate",NULL);
  tolua_beginmodule(tolua_S,"SFTableViewDelegate");
   tolua_function(tolua_S,"tableCellTouched",tolua_LuaFramework_SFTableViewDelegate_tableCellTouched00);
   tolua_function(tolua_S,"tableCellTouched",tolua_LuaFramework_SFTableViewDelegate_tableCellTouched01);
   tolua_function(tolua_S,"tableCellHighlight",tolua_LuaFramework_SFTableViewDelegate_tableCellHighlight00);
   tolua_function(tolua_S,"tableCellUnhighlight",tolua_LuaFramework_SFTableViewDelegate_tableCellUnhighlight00);
   tolua_function(tolua_S,"tableCellWillRecycle",tolua_LuaFramework_SFTableViewDelegate_tableCellWillRecycle00);
   tolua_function(tolua_S,"scrollViewDidScroll",tolua_LuaFramework_SFTableViewDelegate_scrollViewDidScroll00);
   tolua_function(tolua_S,"scrollViewDidZoom",tolua_LuaFramework_SFTableViewDelegate_scrollViewDidZoom00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SFTableData","SFTableData","CCObject",NULL);
  tolua_beginmodule(tolua_S,"SFTableData");
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFTableData_create00);
   tolua_function(tolua_S,"setIndex",tolua_LuaFramework_SFTableData_setIndex00);
   tolua_function(tolua_S,"setSize",tolua_LuaFramework_SFTableData_setSize00);
   tolua_function(tolua_S,"setCell",tolua_LuaFramework_SFTableData_setCell00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFTableViewDataSource","SFTableViewDataSource","",tolua_collect_SFTableViewDataSource);
  #else
  tolua_cclass(tolua_S,"SFTableViewDataSource","SFTableViewDataSource","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFTableViewDataSource");
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFTableViewDataSource_delete00);
   tolua_function(tolua_S,"tableCellSizeForIndex",tolua_LuaFramework_SFTableViewDataSource_tableCellSizeForIndex00);
   tolua_function(tolua_S,"cellSizeForTable",tolua_LuaFramework_SFTableViewDataSource_cellSizeForTable00);
   tolua_function(tolua_S,"tableCellAtIndex",tolua_LuaFramework_SFTableViewDataSource_tableCellAtIndex00);
   tolua_function(tolua_S,"numberOfCellsInTableView",tolua_LuaFramework_SFTableViewDataSource_numberOfCellsInTableView00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFTableView","SFTableView","CCScrollView",tolua_collect_SFTableView);
  #else
  tolua_cclass(tolua_S,"SFTableView","SFTableView","CCScrollView",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFTableView");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFTableView_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFTableView_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFTableView_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFTableView_delete00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFTableView_create00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFTableView_create01);
   tolua_function(tolua_S,"getDataSource",tolua_LuaFramework_SFTableView_getDataSource00);
   tolua_function(tolua_S,"setDataSource",tolua_LuaFramework_SFTableView_setDataSource00);
   tolua_function(tolua_S,"setDataHandler",tolua_LuaFramework_SFTableView_setDataHandler00);
   tolua_function(tolua_S,"setTableViewHandler",tolua_LuaFramework_SFTableView_setTableViewHandler00);
   tolua_function(tolua_S,"getDelegate",tolua_LuaFramework_SFTableView_getDelegate00);
   tolua_function(tolua_S,"setDelegate",tolua_LuaFramework_SFTableView_setDelegate00);
   tolua_function(tolua_S,"setVerticalFillOrder",tolua_LuaFramework_SFTableView_setVerticalFillOrder00);
   tolua_function(tolua_S,"getVerticalFillOrder",tolua_LuaFramework_SFTableView_getVerticalFillOrder00);
   tolua_function(tolua_S,"initWithViewSize",tolua_LuaFramework_SFTableView_initWithViewSize00);
   tolua_function(tolua_S,"updateCellAtIndex",tolua_LuaFramework_SFTableView_updateCellAtIndex00);
   tolua_function(tolua_S,"insertCellAtIndex",tolua_LuaFramework_SFTableView_insertCellAtIndex00);
   tolua_function(tolua_S,"removeCellAtIndex",tolua_LuaFramework_SFTableView_removeCellAtIndex00);
   tolua_function(tolua_S,"reloadData",tolua_LuaFramework_SFTableView_reloadData00);
   tolua_function(tolua_S,"dequeueCell",tolua_LuaFramework_SFTableView_dequeueCell00);
   tolua_function(tolua_S,"cellAtIndex",tolua_LuaFramework_SFTableView_cellAtIndex00);
   tolua_function(tolua_S,"scroll2Cell",tolua_LuaFramework_SFTableView_scroll2Cell00);
   tolua_function(tolua_S,"scrollViewDidScroll",tolua_LuaFramework_SFTableView_scrollViewDidScroll00);
   tolua_function(tolua_S,"scrollViewDidZoom",tolua_LuaFramework_SFTableView_scrollViewDidZoom00);
   tolua_function(tolua_S,"ccTouchBegan",tolua_LuaFramework_SFTableView_ccTouchBegan00);
   tolua_function(tolua_S,"ccTouchMoved",tolua_LuaFramework_SFTableView_ccTouchMoved00);
   tolua_function(tolua_S,"ccTouchEnded",tolua_LuaFramework_SFTableView_ccTouchEnded00);
   tolua_function(tolua_S,"ccTouchCancelled",tolua_LuaFramework_SFTableView_ccTouchCancelled00);
   tolua_function(tolua_S,"registerWithTouchDispatcher",tolua_LuaFramework_SFTableView_registerWithTouchDispatcher00);
   tolua_function(tolua_S,"getSelectedCellIndex",tolua_LuaFramework_SFTableView_getSelectedCellIndex00);
   tolua_function(tolua_S,"setSelectedCellIndex",tolua_LuaFramework_SFTableView_setSelectedCellIndex00);
   tolua_function(tolua_S,"_updateContentSize",tolua_LuaFramework_SFTableView__updateContentSize00);
   tolua_variable(tolua_S,"__CCScrollViewDelegate__",tolua_get_SFTableView___CCScrollViewDelegate__,NULL);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"PathPoint","PathPoint","CCObject",NULL);
  tolua_beginmodule(tolua_S,"PathPoint");
   tolua_function(tolua_S,"create",tolua_LuaFramework_PathPoint_create00);
   tolua_function(tolua_S,"getX",tolua_LuaFramework_PathPoint_getX00);
   tolua_function(tolua_S,"getY",tolua_LuaFramework_PathPoint_getY00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SpriteMove","SpriteMove","CCObject",tolua_collect_SpriteMove);
  #else
  tolua_cclass(tolua_S,"SpriteMove","SpriteMove","CCObject",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SpriteMove");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SpriteMove_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SpriteMove_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SpriteMove_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SpriteMove_delete00);
   tolua_function(tolua_S,"CreatePath",tolua_LuaFramework_SpriteMove_CreatePath00);
   tolua_function(tolua_S,"ClearPath",tolua_LuaFramework_SpriteMove_ClearPath00);
   tolua_function(tolua_S,"SetSpeed",tolua_LuaFramework_SpriteMove_SetSpeed00);
   tolua_function(tolua_S,"GetSpeed",tolua_LuaFramework_SpriteMove_GetSpeed00);
   tolua_function(tolua_S,"GetEndXY",tolua_LuaFramework_SpriteMove_GetEndXY00);
   tolua_function(tolua_S,"getMovePoints",tolua_LuaFramework_SpriteMove_getMovePoints00);
   tolua_function(tolua_S,"Tick",tolua_LuaFramework_SpriteMove_Tick00);
   tolua_function(tolua_S,"Init",tolua_LuaFramework_SpriteMove_Init00);
   tolua_function(tolua_S,"BlockChanged",tolua_LuaFramework_SpriteMove_BlockChanged00);
   tolua_function(tolua_S,"End",tolua_LuaFramework_SpriteMove_End00);
   tolua_function(tolua_S,"IsBlock",tolua_LuaFramework_SpriteMove_IsBlock00);
   tolua_function(tolua_S,"IsHaveBlock",tolua_LuaFramework_SpriteMove_IsHaveBlock00);
   tolua_function(tolua_S,"getX",tolua_LuaFramework_SpriteMove_getX00);
   tolua_function(tolua_S,"getY",tolua_LuaFramework_SpriteMove_getY00);
   tolua_function(tolua_S,"getDir",tolua_LuaFramework_SpriteMove_getDir00);
   tolua_function(tolua_S,"getEndX",tolua_LuaFramework_SpriteMove_getEndX00);
   tolua_function(tolua_S,"getEndY",tolua_LuaFramework_SpriteMove_getEndY00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SpriteMove_create00);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"kDidTouchBegin",kDidTouchBegin);
  tolua_constant(tolua_S,"kDidClickItem",kDidClickItem);
  tolua_constant(tolua_S,"kDidDoubleClickItem",kDidDoubleClickItem);
  tolua_constant(tolua_S,"kDidLongPressItem",kDidLongPressItem);
  tolua_constant(tolua_S,"kDidMoveItem",kDidMoveItem);
  tolua_constant(tolua_S,"kDidTouchEndItem",kDidTouchEndItem);
  tolua_cclass(tolua_S,"SFGridBoxDataSource","SFGridBoxDataSource","",NULL);
  tolua_beginmodule(tolua_S,"SFGridBoxDataSource");
   tolua_function(tolua_S,"cellFromGrid",tolua_LuaFramework_SFGridBoxDataSource_cellFromGrid00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SFGridBoxDelegate","SFGridBoxDelegate","",NULL);
  tolua_beginmodule(tolua_S,"SFGridBoxDelegate");
   tolua_function(tolua_S,"didClickItem",tolua_LuaFramework_SFGridBoxDelegate_didClickItem00);
   tolua_function(tolua_S,"didDoubleClickItem",tolua_LuaFramework_SFGridBoxDelegate_didDoubleClickItem00);
   tolua_function(tolua_S,"didLongPressItem",tolua_LuaFramework_SFGridBoxDelegate_didLongPressItem00);
   tolua_function(tolua_S,"didMoveItem",tolua_LuaFramework_SFGridBoxDelegate_didMoveItem00);
   tolua_function(tolua_S,"didTouchEndItem",tolua_LuaFramework_SFGridBoxDelegate_didTouchEndItem00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFGridBox","SFGridBox","SFBaseControl",tolua_collect_SFGridBox);
  #else
  tolua_cclass(tolua_S,"SFGridBox","SFGridBox","SFBaseControl",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFGridBox");
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFGridBox_delete00);
   tolua_function(tolua_S,"getSize",tolua_LuaFramework_SFGridBox_getSize00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFGridBox_create00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_SFGridBox_init00);
   tolua_function(tolua_S,"addGrid",tolua_LuaFramework_SFGridBox_addGrid00);
   tolua_function(tolua_S,"removeGrid",tolua_LuaFramework_SFGridBox_removeGrid00);
   tolua_function(tolua_S,"getSelIndex",tolua_LuaFramework_SFGridBox_getSelIndex00);
   tolua_function(tolua_S,"setSelIndex",tolua_LuaFramework_SFGridBox_setSelIndex00);
   tolua_function(tolua_S,"setAllMargin",tolua_LuaFramework_SFGridBox_setAllMargin00);
   tolua_function(tolua_S,"setHeightMargin",tolua_LuaFramework_SFGridBox_setHeightMargin00);
   tolua_function(tolua_S,"setWidthMargin",tolua_LuaFramework_SFGridBox_setWidthMargin00);
   tolua_function(tolua_S,"getGridSize",tolua_LuaFramework_SFGridBox_getGridSize00);
   tolua_function(tolua_S,"getGridCount",tolua_LuaFramework_SFGridBox_getGridCount00);
   tolua_function(tolua_S,"reloadGridBox",tolua_LuaFramework_SFGridBox_reloadGridBox00);
   tolua_function(tolua_S,"reloadCellWithIndex",tolua_LuaFramework_SFGridBox_reloadCellWithIndex00);
   tolua_function(tolua_S,"onEnter",tolua_LuaFramework_SFGridBox_onEnter00);
   tolua_function(tolua_S,"onExit",tolua_LuaFramework_SFGridBox_onExit00);
   tolua_function(tolua_S,"setDelegate",tolua_LuaFramework_SFGridBox_setDelegate00);
   tolua_function(tolua_S,"setDelegateHandler",tolua_LuaFramework_SFGridBox_setDelegateHandler00);
   tolua_function(tolua_S,"setDataSource",tolua_LuaFramework_SFGridBox_setDataSource00);
   tolua_function(tolua_S,"setDataSourceHandler",tolua_LuaFramework_SFGridBox_setDataSourceHandler00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFTimeAxis","SFTimeAxis","",tolua_collect_SFTimeAxis);
  #else
  tolua_cclass(tolua_S,"SFTimeAxis","SFTimeAxis","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFTimeAxis");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFTimeAxis_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFTimeAxis_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFTimeAxis_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFTimeAxis_delete00);
   tolua_function(tolua_S,"Instance",tolua_LuaFramework_SFTimeAxis_Instance00);
   tolua_function(tolua_S,"getDelayTime",tolua_LuaFramework_SFTimeAxis_getDelayTime00);
   tolua_function(tolua_S,"getClientTime",tolua_LuaFramework_SFTimeAxis_getClientTime00);
   tolua_function(tolua_S,"advance",tolua_LuaFramework_SFTimeAxis_advance00);
   tolua_function(tolua_S,"setRequSyneClientTime",tolua_LuaFramework_SFTimeAxis_setRequSyneClientTime00);
   tolua_function(tolua_S,"getCrtServerTime",tolua_LuaFramework_SFTimeAxis_getCrtServerTime00);
   tolua_function(tolua_S,"setCrtServerTime",tolua_LuaFramework_SFTimeAxis_setCrtServerTime00);
   tolua_function(tolua_S,"getBackgroundPauseTime",tolua_LuaFramework_SFTimeAxis_getBackgroundPauseTime00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SFTouchProtocol","SFTouchProtocol","",NULL);
  tolua_beginmodule(tolua_S,"SFTouchProtocol");
   tolua_function(tolua_S,"singleTouch",tolua_LuaFramework_SFTouchProtocol_singleTouch00);
   tolua_function(tolua_S,"doubleTouch",tolua_LuaFramework_SFTouchProtocol_doubleTouch00);
   tolua_function(tolua_S,"longTouch",tolua_LuaFramework_SFTouchProtocol_longTouch00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFTouchLayer","SFTouchLayer","SFBaseControl",tolua_collect_SFTouchLayer);
  #else
  tolua_cclass(tolua_S,"SFTouchLayer","SFTouchLayer","SFBaseControl",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFTouchLayer");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFTouchLayer_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFTouchLayer_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFTouchLayer_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFTouchLayer_delete00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFTouchLayer_create00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_SFTouchLayer_init00);
   tolua_function(tolua_S,"onExit",tolua_LuaFramework_SFTouchLayer_onExit00);
   tolua_function(tolua_S,"setSwallow",tolua_LuaFramework_SFTouchLayer_setSwallow00);
   tolua_function(tolua_S,"catchScreen",tolua_LuaFramework_SFTouchLayer_catchScreen00);
   tolua_function(tolua_S,"setExpandAction",tolua_LuaFramework_SFTouchLayer_setExpandAction00);
   tolua_function(tolua_S,"passHandle",tolua_LuaFramework_SFTouchLayer_passHandle00);
   tolua_variable(tolua_S,"__SFTouchProtocol__",tolua_get_SFTouchLayer___SFTouchProtocol__,NULL);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"eDir_Up",eDir_Up);
  tolua_constant(tolua_S,"eDir_LeftUp",eDir_LeftUp);
  tolua_constant(tolua_S,"eDir_Left",eDir_Left);
  tolua_constant(tolua_S,"eDir_LeftDown",eDir_LeftDown);
  tolua_constant(tolua_S,"eDir_Down",eDir_Down);
  tolua_constant(tolua_S,"eDir_RightDown",eDir_RightDown);
  tolua_constant(tolua_S,"eDir_Right",eDir_Right);
  tolua_constant(tolua_S,"eDir_RightUp",eDir_RightUp);
  tolua_constant(tolua_S,"eDir_UnKnow",eDir_UnKnow);
  tolua_constant(tolua_S,"kRockerDirection",kRockerDirection);
  tolua_constant(tolua_S,"kRockerFinish",kRockerFinish);
  tolua_cclass(tolua_S,"SFJoyRockerDelegate","SFJoyRockerDelegate","",NULL);
  tolua_beginmodule(tolua_S,"SFJoyRockerDelegate");
   tolua_function(tolua_S,"rockerDirection",tolua_LuaFramework_SFJoyRockerDelegate_rockerDirection00);
   tolua_function(tolua_S,"rockerFinish",tolua_LuaFramework_SFJoyRockerDelegate_rockerFinish00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SFJoyRocker","SFJoyRocker","SFTouchLayer",NULL);
  tolua_beginmodule(tolua_S,"SFJoyRocker");
   tolua_function(tolua_S,"JoyRockerWithCenter",tolua_LuaFramework_SFJoyRocker_JoyRockerWithCenter00);
   tolua_function(tolua_S,"initWithCenter",tolua_LuaFramework_SFJoyRocker_initWithCenter00);
   tolua_function(tolua_S,"setActive",tolua_LuaFramework_SFJoyRocker_setActive00);
   tolua_function(tolua_S,"isActive",tolua_LuaFramework_SFJoyRocker_isActive00);
   tolua_function(tolua_S,"hideRocker",tolua_LuaFramework_SFJoyRocker_hideRocker00);
   tolua_function(tolua_S,"setDelegate",tolua_LuaFramework_SFJoyRocker_setDelegate00);
   tolua_function(tolua_S,"setDelegateHandler",tolua_LuaFramework_SFJoyRocker_setDelegateHandler00);
   tolua_function(tolua_S,"removeDelegate",tolua_LuaFramework_SFJoyRocker_removeDelegate00);
   tolua_function(tolua_S,"setInActiveRadius",tolua_LuaFramework_SFJoyRocker_setInActiveRadius00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SFProgressBar","SFProgressBar","SFBaseControl",NULL);
  tolua_beginmodule(tolua_S,"SFProgressBar");
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFProgressBar_create00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_SFProgressBar_init00);
   tolua_function(tolua_S,"setBackground",tolua_LuaFramework_SFProgressBar_setBackground00);
   tolua_function(tolua_S,"setNumberVisible",tolua_LuaFramework_SFProgressBar_setNumberVisible00);
   tolua_function(tolua_S,"setTextParam",tolua_LuaFramework_SFProgressBar_setTextParam00);
   tolua_function(tolua_S,"setMaxNumber",tolua_LuaFramework_SFProgressBar_setMaxNumber00);
   tolua_function(tolua_S,"getMaxNumber",tolua_LuaFramework_SFProgressBar_getMaxNumber00);
   tolua_function(tolua_S,"setCurrentNumber",tolua_LuaFramework_SFProgressBar_setCurrentNumber00);
   tolua_function(tolua_S,"getCurrentNumber",tolua_LuaFramework_SFProgressBar_getCurrentNumber00);
   tolua_function(tolua_S,"setPercentage",tolua_LuaFramework_SFProgressBar_setPercentage00);
   tolua_function(tolua_S,"getPercentage",tolua_LuaFramework_SFProgressBar_getPercentage00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SFRichLabel","SFRichLabel","SFBaseControl",NULL);
  tolua_beginmodule(tolua_S,"SFRichLabel");
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFRichLabel_create00);
   tolua_function(tolua_S,"appendFormatText",tolua_LuaFramework_SFRichLabel_appendFormatText00);
   tolua_function(tolua_S,"clearAll",tolua_LuaFramework_SFRichLabel_clearAll00);
   tolua_function(tolua_S,"setEventHandler",tolua_LuaFramework_SFRichLabel_setEventHandler00);
   tolua_function(tolua_S,"setFont",tolua_LuaFramework_SFRichLabel_setFont00);
   tolua_function(tolua_S,"setFontSize",tolua_LuaFramework_SFRichLabel_setFontSize00);
   tolua_function(tolua_S,"setGaps",tolua_LuaFramework_SFRichLabel_setGaps00);
   tolua_function(tolua_S,"getGaps",tolua_LuaFramework_SFRichLabel_getGaps00);
   tolua_function(tolua_S,"getDimensions",tolua_LuaFramework_SFRichLabel_getDimensions00);
   tolua_function(tolua_S,"setDimensions",tolua_LuaFramework_SFRichLabel_setDimensions00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFCheckBox","SFCheckBox","SFBaseControl",tolua_collect_SFCheckBox);
  #else
  tolua_cclass(tolua_S,"SFCheckBox","SFCheckBox","SFBaseControl",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFCheckBox");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFCheckBox_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFCheckBox_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFCheckBox_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFCheckBox_delete00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFCheckBox_create00);
   tolua_function(tolua_S,"initControl",tolua_LuaFramework_SFCheckBox_initControl00);
   tolua_function(tolua_S,"setSelect",tolua_LuaFramework_SFCheckBox_setSelect00);
   tolua_function(tolua_S,"getSelect",tolua_LuaFramework_SFCheckBox_getSelect00);
   tolua_function(tolua_S,"setEnable",tolua_LuaFramework_SFCheckBox_setEnable00);
   tolua_function(tolua_S,"getEnable",tolua_LuaFramework_SFCheckBox_getEnable00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SFGraySprite","SFGraySprite","CCSprite",NULL);
  tolua_beginmodule(tolua_S,"SFGraySprite");
   tolua_function(tolua_S,"initWithTexture",tolua_LuaFramework_SFGraySprite_initWithTexture00);
   tolua_function(tolua_S,"draw",tolua_LuaFramework_SFGraySprite_draw00);
   tolua_function(tolua_S,"initProgram",tolua_LuaFramework_SFGraySprite_initProgram00);
   tolua_function(tolua_S,"listenBackToForeground",tolua_LuaFramework_SFGraySprite_listenBackToForeground00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFGraySprite_create00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SFRenderSprite","SFRenderSprite","CCNode",NULL);
  tolua_beginmodule(tolua_S,"SFRenderSprite");
   tolua_function(tolua_S,"createRenderSprite",tolua_LuaFramework_SFRenderSprite_createRenderSprite00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_SFRenderSprite_init00);
   tolua_function(tolua_S,"changeModel",tolua_LuaFramework_SFRenderSprite_changeModel00);
   tolua_function(tolua_S,"changeModelPart",tolua_LuaFramework_SFRenderSprite_changeModelPart00);
   tolua_function(tolua_S,"changeModelPart",tolua_LuaFramework_SFRenderSprite_changeModelPart01);
   tolua_function(tolua_S,"setScriptHandler",tolua_LuaFramework_SFRenderSprite_setScriptHandler00);
   tolua_function(tolua_S,"setAnimationSpeed",tolua_LuaFramework_SFRenderSprite_setAnimationSpeed00);
   tolua_function(tolua_S,"getModelId",tolua_LuaFramework_SFRenderSprite_getModelId00);
   tolua_function(tolua_S,"getContentSize",tolua_LuaFramework_SFRenderSprite_getContentSize00);
   tolua_function(tolua_S,"createRenderSprite",tolua_LuaFramework_SFRenderSprite_createRenderSprite01);
   tolua_function(tolua_S,"init",tolua_LuaFramework_SFRenderSprite_init01);
   tolua_function(tolua_S,"playByIndexLua",tolua_LuaFramework_SFRenderSprite_playByIndexLua00);
   tolua_function(tolua_S,"playByDirLua",tolua_LuaFramework_SFRenderSprite_playByDirLua00);
   tolua_function(tolua_S,"setOpacity",tolua_LuaFramework_SFRenderSprite_setOpacity00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"CCControlSlider","CCControlSlider","CCControl",tolua_collect_CCControlSlider);
  #else
  tolua_cclass(tolua_S,"CCControlSlider","CCControlSlider","CCControl",NULL);
  #endif
  tolua_beginmodule(tolua_S,"CCControlSlider");
   tolua_function(tolua_S,"getValue",tolua_LuaFramework_CCControlSlider_getValue00);
   tolua_function(tolua_S,"setValue",tolua_LuaFramework_CCControlSlider_setValue00);
   tolua_function(tolua_S,"getMinimumValue",tolua_LuaFramework_CCControlSlider_getMinimumValue00);
   tolua_function(tolua_S,"setMinimumValue",tolua_LuaFramework_CCControlSlider_setMinimumValue00);
   tolua_function(tolua_S,"getMaximumValue",tolua_LuaFramework_CCControlSlider_getMaximumValue00);
   tolua_function(tolua_S,"setMaximumValue",tolua_LuaFramework_CCControlSlider_setMaximumValue00);
   tolua_function(tolua_S,"setMaximumValue",tolua_LuaFramework_CCControlSlider_setMaximumValue01);
   tolua_function(tolua_S,"setEnabled",tolua_LuaFramework_CCControlSlider_setEnabled00);
   tolua_function(tolua_S,"isTouchInside",tolua_LuaFramework_CCControlSlider_isTouchInside00);
   tolua_function(tolua_S,"locationFromTouch",tolua_LuaFramework_CCControlSlider_locationFromTouch00);
   tolua_function(tolua_S,"getMinimumAllowedValue",tolua_LuaFramework_CCControlSlider_getMinimumAllowedValue00);
   tolua_function(tolua_S,"setMinimumAllowedValue",tolua_LuaFramework_CCControlSlider_setMinimumAllowedValue00);
   tolua_function(tolua_S,"getMaximumAllowedValue",tolua_LuaFramework_CCControlSlider_getMaximumAllowedValue00);
   tolua_function(tolua_S,"setMaximumAllowedValue",tolua_LuaFramework_CCControlSlider_setMaximumAllowedValue00);
   tolua_function(tolua_S,"getThumbSprite",tolua_LuaFramework_CCControlSlider_getThumbSprite00);
   tolua_function(tolua_S,"setThumbSprite",tolua_LuaFramework_CCControlSlider_setThumbSprite00);
   tolua_function(tolua_S,"getProgressSprite",tolua_LuaFramework_CCControlSlider_getProgressSprite00);
   tolua_function(tolua_S,"setProgressSprite",tolua_LuaFramework_CCControlSlider_setProgressSprite00);
   tolua_function(tolua_S,"getBackgroundSprite",tolua_LuaFramework_CCControlSlider_getBackgroundSprite00);
   tolua_function(tolua_S,"setBackgroundSprite",tolua_LuaFramework_CCControlSlider_setBackgroundSprite00);
   tolua_function(tolua_S,"new",tolua_LuaFramework_CCControlSlider_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_CCControlSlider_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_CCControlSlider_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_CCControlSlider_delete00);
   tolua_function(tolua_S,"initWithSprites",tolua_LuaFramework_CCControlSlider_initWithSprites00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCControlSlider_create00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCControlSlider_create01);
   tolua_function(tolua_S,"needsLayout",tolua_LuaFramework_CCControlSlider_needsLayout00);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"kCCVertexAttrib_Position",kCCVertexAttrib_Position);
  tolua_constant(tolua_S,"kCCVertexAttrib_Color",kCCVertexAttrib_Color);
  tolua_constant(tolua_S,"kCCVertexAttrib_TexCoords",kCCVertexAttrib_TexCoords);
  tolua_constant(tolua_S,"kCCVertexAttrib_MAX",kCCVertexAttrib_MAX);
  tolua_constant(tolua_S,"kCCUniformPMatrix",kCCUniformPMatrix);
  tolua_constant(tolua_S,"kCCUniformMVMatrix",kCCUniformMVMatrix);
  tolua_constant(tolua_S,"kCCUniformMVPMatrix",kCCUniformMVPMatrix);
  tolua_constant(tolua_S,"kCCUniformTime",kCCUniformTime);
  tolua_constant(tolua_S,"kCCUniformSinTime",kCCUniformSinTime);
  tolua_constant(tolua_S,"kCCUniformCosTime",kCCUniformCosTime);
  tolua_constant(tolua_S,"kCCUniformRandom01",kCCUniformRandom01);
  tolua_constant(tolua_S,"kCCUniformSampler",kCCUniformSampler);
  tolua_constant(tolua_S,"kCCUniformSampler1",kCCUniformSampler1);
  tolua_constant(tolua_S,"kCCUniform_MAX",kCCUniform_MAX);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"CCGLProgram","CCGLProgram","CCObject",tolua_collect_CCGLProgram);
  #else
  tolua_cclass(tolua_S,"CCGLProgram","CCGLProgram","CCObject",NULL);
  #endif
  tolua_beginmodule(tolua_S,"CCGLProgram");
   tolua_function(tolua_S,"new",tolua_LuaFramework_CCGLProgram_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_CCGLProgram_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_CCGLProgram_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_CCGLProgram_delete00);
   tolua_function(tolua_S,"initWithVertexShaderByteArray",tolua_LuaFramework_CCGLProgram_initWithVertexShaderByteArray00);
   tolua_function(tolua_S,"initWithVertexShaderFilename",tolua_LuaFramework_CCGLProgram_initWithVertexShaderFilename00);
   tolua_function(tolua_S,"addAttribute",tolua_LuaFramework_CCGLProgram_addAttribute00);
   tolua_function(tolua_S,"link",tolua_LuaFramework_CCGLProgram_link00);
   tolua_function(tolua_S,"use",tolua_LuaFramework_CCGLProgram_use00);
   tolua_function(tolua_S,"updateUniforms",tolua_LuaFramework_CCGLProgram_updateUniforms00);
   tolua_function(tolua_S,"getUniformLocationForName",tolua_LuaFramework_CCGLProgram_getUniformLocationForName00);
   tolua_function(tolua_S,"setUniformLocationWith1i",tolua_LuaFramework_CCGLProgram_setUniformLocationWith1i00);
   tolua_function(tolua_S,"setUniformLocationWith2i",tolua_LuaFramework_CCGLProgram_setUniformLocationWith2i00);
   tolua_function(tolua_S,"setUniformLocationWith3i",tolua_LuaFramework_CCGLProgram_setUniformLocationWith3i00);
   tolua_function(tolua_S,"setUniformLocationWith4i",tolua_LuaFramework_CCGLProgram_setUniformLocationWith4i00);
   tolua_function(tolua_S,"setUniformLocationWith2iv",tolua_LuaFramework_CCGLProgram_setUniformLocationWith2iv00);
   tolua_function(tolua_S,"setUniformLocationWith3iv",tolua_LuaFramework_CCGLProgram_setUniformLocationWith3iv00);
   tolua_function(tolua_S,"setUniformLocationWith4iv",tolua_LuaFramework_CCGLProgram_setUniformLocationWith4iv00);
   tolua_function(tolua_S,"setUniformLocationWith1f",tolua_LuaFramework_CCGLProgram_setUniformLocationWith1f00);
   tolua_function(tolua_S,"setUniformLocationWith2f",tolua_LuaFramework_CCGLProgram_setUniformLocationWith2f00);
   tolua_function(tolua_S,"setUniformLocationWith3f",tolua_LuaFramework_CCGLProgram_setUniformLocationWith3f00);
   tolua_function(tolua_S,"setUniformLocationWith4f",tolua_LuaFramework_CCGLProgram_setUniformLocationWith4f00);
   tolua_function(tolua_S,"setUniformLocationWith2fv",tolua_LuaFramework_CCGLProgram_setUniformLocationWith2fv00);
   tolua_function(tolua_S,"setUniformLocationWith3fv",tolua_LuaFramework_CCGLProgram_setUniformLocationWith3fv00);
   tolua_function(tolua_S,"setUniformLocationWith4fv",tolua_LuaFramework_CCGLProgram_setUniformLocationWith4fv00);
   tolua_function(tolua_S,"setUniformLocationWithMatrix4fv",tolua_LuaFramework_CCGLProgram_setUniformLocationWithMatrix4fv00);
   tolua_function(tolua_S,"setUniformsForBuiltins",tolua_LuaFramework_CCGLProgram_setUniformsForBuiltins00);
   tolua_function(tolua_S,"vertexShaderLog",tolua_LuaFramework_CCGLProgram_vertexShaderLog00);
   tolua_function(tolua_S,"fragmentShaderLog",tolua_LuaFramework_CCGLProgram_fragmentShaderLog00);
   tolua_function(tolua_S,"programLog",tolua_LuaFramework_CCGLProgram_programLog00);
   tolua_function(tolua_S,"reset",tolua_LuaFramework_CCGLProgram_reset00);
   tolua_function(tolua_S,"getProgram",tolua_LuaFramework_CCGLProgram_getProgram00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"CCShaderCache","CCShaderCache","CCObject",tolua_collect_CCShaderCache);
  #else
  tolua_cclass(tolua_S,"CCShaderCache","CCShaderCache","CCObject",NULL);
  #endif
  tolua_beginmodule(tolua_S,"CCShaderCache");
   tolua_function(tolua_S,"new",tolua_LuaFramework_CCShaderCache_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_CCShaderCache_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_CCShaderCache_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_CCShaderCache_delete00);
   tolua_function(tolua_S,"sharedShaderCache",tolua_LuaFramework_CCShaderCache_sharedShaderCache00);
   tolua_function(tolua_S,"purgeSharedShaderCache",tolua_LuaFramework_CCShaderCache_purgeSharedShaderCache00);
   tolua_function(tolua_S,"loadDefaultShaders",tolua_LuaFramework_CCShaderCache_loadDefaultShaders00);
   tolua_function(tolua_S,"reloadDefaultShaders",tolua_LuaFramework_CCShaderCache_reloadDefaultShaders00);
   tolua_function(tolua_S,"programForKey",tolua_LuaFramework_CCShaderCache_programForKey00);
   tolua_function(tolua_S,"addProgram",tolua_LuaFramework_CCShaderCache_addProgram00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"CCShaderColorFadeIn","CCShaderColorFadeIn","CCActionInterval",NULL);
  tolua_beginmodule(tolua_S,"CCShaderColorFadeIn");
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCShaderColorFadeIn_create00);
   tolua_function(tolua_S,"initWithDuration",tolua_LuaFramework_CCShaderColorFadeIn_initWithDuration00);
   tolua_function(tolua_S,"startWithTarget",tolua_LuaFramework_CCShaderColorFadeIn_startWithTarget00);
   tolua_function(tolua_S,"stop",tolua_LuaFramework_CCShaderColorFadeIn_stop00);
   tolua_function(tolua_S,"update",tolua_LuaFramework_CCShaderColorFadeIn_update00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"CCShaderColorFadeOut","CCShaderColorFadeOut","CCActionInterval",NULL);
  tolua_beginmodule(tolua_S,"CCShaderColorFadeOut");
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCShaderColorFadeOut_create00);
   tolua_function(tolua_S,"initWithDuration",tolua_LuaFramework_CCShaderColorFadeOut_initWithDuration00);
   tolua_function(tolua_S,"startWithTarget",tolua_LuaFramework_CCShaderColorFadeOut_startWithTarget00);
   tolua_function(tolua_S,"stop",tolua_LuaFramework_CCShaderColorFadeOut_stop00);
   tolua_function(tolua_S,"update",tolua_LuaFramework_CCShaderColorFadeOut_update00);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"kNotNetwork",kNotNetwork);
  tolua_constant(tolua_S,"kWifi",kWifi);
  tolua_constant(tolua_S,"kNotWifi",kNotWifi);
  tolua_cclass(tolua_S,"SFGameHelper","SFGameHelper","",NULL);
  tolua_beginmodule(tolua_S,"SFGameHelper");
   tolua_function(tolua_S,"getExtStoragePath",tolua_LuaFramework_SFGameHelper_getExtStoragePath00);
   tolua_function(tolua_S,"isDirExist",tolua_LuaFramework_SFGameHelper_isDirExist00);
   tolua_function(tolua_S,"createDir",tolua_LuaFramework_SFGameHelper_createDir00);
   tolua_function(tolua_S,"copyResouce",tolua_LuaFramework_SFGameHelper_copyResouce00);
   tolua_function(tolua_S,"getClientVersion",tolua_LuaFramework_SFGameHelper_getClientVersion00);
   tolua_function(tolua_S,"updateClient",tolua_LuaFramework_SFGameHelper_updateClient00);
   tolua_function(tolua_S,"getMainVersion",tolua_LuaFramework_SFGameHelper_getMainVersion00);
   tolua_function(tolua_S,"getSubVersion",tolua_LuaFramework_SFGameHelper_getSubVersion00);
   tolua_function(tolua_S,"getCurrentNetWork",tolua_LuaFramework_SFGameHelper_getCurrentNetWork00);
   tolua_function(tolua_S,"moveFile",tolua_LuaFramework_SFGameHelper_moveFile00);
   tolua_function(tolua_S,"deleteFile",tolua_LuaFramework_SFGameHelper_deleteFile00);
   tolua_function(tolua_S,"setTag",tolua_LuaFramework_SFGameHelper_setTag00);
   tolua_function(tolua_S,"removeTag",tolua_LuaFramework_SFGameHelper_removeTag00);
   tolua_function(tolua_S,"startPush",tolua_LuaFramework_SFGameHelper_startPush00);
   tolua_function(tolua_S,"stopPush",tolua_LuaFramework_SFGameHelper_stopPush00);
   tolua_function(tolua_S,"showMenu",tolua_LuaFramework_SFGameHelper_showMenu00);
   tolua_function(tolua_S,"share",tolua_LuaFramework_SFGameHelper_share00);
   tolua_function(tolua_S,"setSessionTimeout",tolua_LuaFramework_SFGameHelper_setSessionTimeout00);
   tolua_function(tolua_S,"enableExceptionLog",tolua_LuaFramework_SFGameHelper_enableExceptionLog00);
   tolua_function(tolua_S,"startStatistics",tolua_LuaFramework_SFGameHelper_startStatistics00);
   tolua_function(tolua_S,"copy2PasteBoard",tolua_LuaFramework_SFGameHelper_copy2PasteBoard00);
   tolua_function(tolua_S,"getDensity",tolua_LuaFramework_SFGameHelper_getDensity00);
   tolua_function(tolua_S,"getDensityDpi",tolua_LuaFramework_SFGameHelper_getDensityDpi00);
   tolua_function(tolua_S,"getManuFactuer",tolua_LuaFramework_SFGameHelper_getManuFactuer00);
   tolua_function(tolua_S,"getModel",tolua_LuaFramework_SFGameHelper_getModel00);
   tolua_function(tolua_S,"getSystemVer",tolua_LuaFramework_SFGameHelper_getSystemVer00);
   tolua_function(tolua_S,"setAppUpdateType",tolua_LuaFramework_SFGameHelper_setAppUpdateType00);
   tolua_function(tolua_S,"setAppCallback",tolua_LuaFramework_SFGameHelper_setAppCallback00);
   tolua_function(tolua_S,"urlEncode",tolua_LuaFramework_SFGameHelper_urlEncode00);
   tolua_function(tolua_S,"urlDecode",tolua_LuaFramework_SFGameHelper_urlDecode00);
   tolua_function(tolua_S,"base64Encode",tolua_LuaFramework_SFGameHelper_base64Encode00);
   tolua_function(tolua_S,"base64Decode",tolua_LuaFramework_SFGameHelper_base64Decode00);
   tolua_function(tolua_S,"setFloatBtnVisible",tolua_LuaFramework_SFGameHelper_setFloatBtnVisible00);
   tolua_function(tolua_S,"getRomFreeSpace",tolua_LuaFramework_SFGameHelper_getRomFreeSpace00);
   tolua_function(tolua_S,"getRamSpace",tolua_LuaFramework_SFGameHelper_getRamSpace00);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"DIR_S",DIR_S);
  tolua_constant(tolua_S,"Dir_U",Dir_U);
  tolua_constant(tolua_S,"Dir_RU",Dir_RU);
  tolua_constant(tolua_S,"Dir_R",Dir_R);
  tolua_constant(tolua_S,"Dir_RD",Dir_RD);
  tolua_constant(tolua_S,"Dir_D",Dir_D);
  tolua_constant(tolua_S,"Dir_LD",Dir_LD);
  tolua_constant(tolua_S,"Dir_L",Dir_L);
  tolua_constant(tolua_S,"Dir_LU",Dir_LU);
  tolua_constant(tolua_S,"Dir_RESERVED",Dir_RESERVED);
  tolua_constant(tolua_S,"Dir_Count",Dir_Count);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"pathPoint","pathPoint","CCObject",tolua_collect_pathPoint);
  #else
  tolua_cclass(tolua_S,"pathPoint","pathPoint","CCObject",NULL);
  #endif
  tolua_beginmodule(tolua_S,"pathPoint");
   tolua_function(tolua_S,"new",tolua_LuaFramework_pathPoint_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_pathPoint_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_pathPoint_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_pathPoint_delete00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_pathPoint_create00);
   tolua_function(tolua_S,"copy",tolua_LuaFramework_pathPoint_copy00);
   tolua_function(tolua_S,"getX",tolua_LuaFramework_pathPoint_getX00);
   tolua_function(tolua_S,"getY",tolua_LuaFramework_pathPoint_getY00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"LogicFinder","LogicFinder","",tolua_collect_LogicFinder);
  #else
  tolua_cclass(tolua_S,"LogicFinder","LogicFinder","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"LogicFinder");
   tolua_function(tolua_S,"new",tolua_LuaFramework_LogicFinder_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_LogicFinder_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_LogicFinder_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_LogicFinder_delete00);
   tolua_function(tolua_S,"ReLoad",tolua_LuaFramework_LogicFinder_ReLoad00);
   tolua_function(tolua_S,"findPath",tolua_LuaFramework_LogicFinder_findPath00);
   tolua_function(tolua_S,"GetPoint",tolua_LuaFramework_LogicFinder_GetPoint00);
   tolua_function(tolua_S,"getPathPoints",tolua_LuaFramework_LogicFinder_getPathPoints00);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"kTypePost",kTypePost);
  tolua_constant(tolua_S,"kTypeGet",kTypeGet);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"HttpTools","HttpTools","CCObject",tolua_collect_HttpTools);
  #else
  tolua_cclass(tolua_S,"HttpTools","HttpTools","CCObject",NULL);
  #endif
  tolua_beginmodule(tolua_S,"HttpTools");
   tolua_function(tolua_S,"getInstance",tolua_LuaFramework_HttpTools_getInstance00);
   tolua_function(tolua_S,"send",tolua_LuaFramework_HttpTools_send00);
   tolua_function(tolua_S,"requestCallBack",tolua_LuaFramework_HttpTools_requestCallBack00);
   tolua_function(tolua_S,"registLuaCallBack",tolua_LuaFramework_HttpTools_registLuaCallBack00);
   tolua_function(tolua_S,"new",tolua_LuaFramework_HttpTools_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_HttpTools_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_HttpTools_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_HttpTools_delete00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFLoginManager","SFLoginManager","",tolua_collect_SFLoginManager);
  #else
  tolua_cclass(tolua_S,"SFLoginManager","SFLoginManager","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFLoginManager");
   tolua_function(tolua_S,"getInstance",tolua_LuaFramework_SFLoginManager_getInstance00);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFLoginManager_delete00);
   tolua_function(tolua_S,"requestLogin",tolua_LuaFramework_SFLoginManager_requestLogin00);
   tolua_function(tolua_S,"setLuaCallback",tolua_LuaFramework_SFLoginManager_setLuaCallback00);
   tolua_function(tolua_S,"onLoginResult",tolua_LuaFramework_SFLoginManager_onLoginResult00);
   tolua_function(tolua_S,"requestServerList",tolua_LuaFramework_SFLoginManager_requestServerList00);
   tolua_function(tolua_S,"setLuaRequestServerListCB",tolua_LuaFramework_SFLoginManager_setLuaRequestServerListCB00);
   tolua_function(tolua_S,"getServerListSuccess",tolua_LuaFramework_SFLoginManager_getServerListSuccess00);
   tolua_function(tolua_S,"gotoBridgeAuth",tolua_LuaFramework_SFLoginManager_gotoBridgeAuth00);
   tolua_function(tolua_S,"getAuthData",tolua_LuaFramework_SFLoginManager_getAuthData00);
   tolua_function(tolua_S,"setLuaBridgeAuthCB",tolua_LuaFramework_SFLoginManager_setLuaBridgeAuthCB00);
   tolua_function(tolua_S,"getBridgeUrl",tolua_LuaFramework_SFLoginManager_getBridgeUrl00);
   tolua_function(tolua_S,"bridgeAuthSuccess",tolua_LuaFramework_SFLoginManager_bridgeAuthSuccess00);
   tolua_function(tolua_S,"submitExtendData",tolua_LuaFramework_SFLoginManager_submitExtendData00);
   tolua_function(tolua_S,"getLoginSettingUrl",tolua_LuaFramework_SFLoginManager_getLoginSettingUrl00);
   tolua_function(tolua_S,"getQDCode1",tolua_LuaFramework_SFLoginManager_getQDCode100);
   tolua_function(tolua_S,"getQDCode2",tolua_LuaFramework_SFLoginManager_getQDCode200);
   tolua_function(tolua_S,"showWaitView",tolua_LuaFramework_SFLoginManager_showWaitView00);
   tolua_function(tolua_S,"hideWaitView",tolua_LuaFramework_SFLoginManager_hideWaitView00);
   tolua_function(tolua_S,"setLuaWaitViewCB",tolua_LuaFramework_SFLoginManager_setLuaWaitViewCB00);
   tolua_function(tolua_S,"getUUid",tolua_LuaFramework_SFLoginManager_getUUid00);
   tolua_function(tolua_S,"openPay",tolua_LuaFramework_SFLoginManager_openPay00);
   tolua_function(tolua_S,"executePayCallback",tolua_LuaFramework_SFLoginManager_executePayCallback00);
   tolua_function(tolua_S,"getGameKey",tolua_LuaFramework_SFLoginManager_getGameKey00);
   tolua_function(tolua_S,"getPlatform",tolua_LuaFramework_SFLoginManager_getPlatform00);
   tolua_function(tolua_S,"getQDKey",tolua_LuaFramework_SFLoginManager_getQDKey00);
   tolua_function(tolua_S,"getSuffix",tolua_LuaFramework_SFLoginManager_getSuffix00);
   tolua_function(tolua_S,"getAppKey",tolua_LuaFramework_SFLoginManager_getAppKey00);
   tolua_function(tolua_S,"getClientKey",tolua_LuaFramework_SFLoginManager_getClientKey00);
   tolua_function(tolua_S,"setPlayerId",tolua_LuaFramework_SFLoginManager_setPlayerId00);
   tolua_function(tolua_S,"getPlayerId",tolua_LuaFramework_SFLoginManager_getPlayerId00);
   tolua_function(tolua_S,"setServerId",tolua_LuaFramework_SFLoginManager_setServerId00);
   tolua_function(tolua_S,"getServerId",tolua_LuaFramework_SFLoginManager_getServerId00);
   tolua_function(tolua_S,"needShowUserCenter",tolua_LuaFramework_SFLoginManager_needShowUserCenter00);
   tolua_function(tolua_S,"showUserCenter",tolua_LuaFramework_SFLoginManager_showUserCenter00);
   tolua_function(tolua_S,"logout",tolua_LuaFramework_SFLoginManager_logout00);
   tolua_function(tolua_S,"needShowCustomTopupView",tolua_LuaFramework_SFLoginManager_needShowCustomTopupView00);
   tolua_function(tolua_S,"openPayWithCustomAmount",tolua_LuaFramework_SFLoginManager_openPayWithCustomAmount00);
   tolua_function(tolua_S,"setLogOutHandler",tolua_LuaFramework_SFLoginManager_setLogOutHandler00);
   tolua_function(tolua_S,"excuteLogOutCallBack",tolua_LuaFramework_SFLoginManager_excuteLogOutCallBack00);
   tolua_function(tolua_S,"initPaymentObserver",tolua_LuaFramework_SFLoginManager_initPaymentObserver00);
   tolua_function(tolua_S,"setPlayerName",tolua_LuaFramework_SFLoginManager_setPlayerName00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SFPackgePatchDelegate","SFPackgePatchDelegate","CCObject",NULL);
  tolua_beginmodule(tolua_S,"SFPackgePatchDelegate");
   tolua_function(tolua_S,"onPatchProgress",tolua_LuaFramework_SFPackgePatchDelegate_onPatchProgress00);
   tolua_function(tolua_S,"onPatchError",tolua_LuaFramework_SFPackgePatchDelegate_onPatchError00);
   tolua_function(tolua_S,"onSuccess",tolua_LuaFramework_SFPackgePatchDelegate_onSuccess00);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"eOnPatchProgress",eOnPatchProgress);
  tolua_constant(tolua_S,"eOnError",eOnError);
  tolua_constant(tolua_S,"eOnSuccess",eOnSuccess);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFPackgePatchLuaDelegate","SFPackgePatchLuaDelegate","SFPackgePatchDelegate",tolua_collect_SFPackgePatchLuaDelegate);
  #else
  tolua_cclass(tolua_S,"SFPackgePatchLuaDelegate","SFPackgePatchLuaDelegate","SFPackgePatchDelegate",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFPackgePatchLuaDelegate");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFPackgePatchLuaDelegate_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFPackgePatchLuaDelegate_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFPackgePatchLuaDelegate_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFPackgePatchLuaDelegate_delete00);
   tolua_function(tolua_S,"onPatchProgress",tolua_LuaFramework_SFPackgePatchLuaDelegate_onPatchProgress00);
   tolua_function(tolua_S,"onPatchError",tolua_LuaFramework_SFPackgePatchLuaDelegate_onPatchError00);
   tolua_function(tolua_S,"onSuccess",tolua_LuaFramework_SFPackgePatchLuaDelegate_onSuccess00);
   tolua_function(tolua_S,"setLuaHandler",tolua_LuaFramework_SFPackgePatchLuaDelegate_setLuaHandler00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFPackageVersion","SFPackageVersion","",tolua_collect_SFPackageVersion);
  #else
  tolua_cclass(tolua_S,"SFPackageVersion","SFPackageVersion","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFPackageVersion");
   tolua_variable(tolua_S,"mainVersion",tolua_get_SFPackageVersion_mainVersion,tolua_set_SFPackageVersion_mainVersion);
   tolua_variable(tolua_S,"subVersion",tolua_get_SFPackageVersion_subVersion,tolua_set_SFPackageVersion_subVersion);
   tolua_variable(tolua_S,"format",tolua_get_SFPackageVersion_format,tolua_set_SFPackageVersion_format);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFPackageManager","SFPackageManager","CCFileLoader",tolua_collect_SFPackageManager);
  #else
  tolua_cclass(tolua_S,"SFPackageManager","SFPackageManager","CCFileLoader",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFPackageManager");
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFPackageManager_delete00);
   tolua_function(tolua_S,"Instance",tolua_LuaFramework_SFPackageManager_Instance00);
   tolua_function(tolua_S,"setResourcePath",tolua_LuaFramework_SFPackageManager_setResourcePath00);
   tolua_function(tolua_S,"addPackageName",tolua_LuaFramework_SFPackageManager_addPackageName00);
   tolua_function(tolua_S,"releaseLoadPackage",tolua_LuaFramework_SFPackageManager_releaseLoadPackage00);
   tolua_function(tolua_S,"setPackageDelegateProtocl",tolua_LuaFramework_SFPackageManager_setPackageDelegateProtocl00);
   tolua_function(tolua_S,"mergePackage",tolua_LuaFramework_SFPackageManager_mergePackage00);
   tolua_function(tolua_S,"startMerge",tolua_LuaFramework_SFPackageManager_startMerge00);
   tolua_function(tolua_S,"completePackage",tolua_LuaFramework_SFPackageManager_completePackage00);
   tolua_function(tolua_S,"canLoad",tolua_LuaFramework_SFPackageManager_canLoad00);
   tolua_function(tolua_S,"isFileExist",tolua_LuaFramework_SFPackageManager_isFileExist00);
   tolua_function(tolua_S,"getFileLength",tolua_LuaFramework_SFPackageManager_getFileLength00);
   tolua_function(tolua_S,"getFileData",tolua_LuaFramework_SFPackageManager_getFileData00);
   tolua_function(tolua_S,"getFileStringContent",tolua_LuaFramework_SFPackageManager_getFileStringContent00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SFScriptManager","SFScriptManager","",NULL);
  tolua_beginmodule(tolua_S,"SFScriptManager");
   tolua_function(tolua_S,"shareScriptManager",tolua_LuaFramework_SFScriptManager_shareScriptManager00);
   tolua_function(tolua_S,"excuteZpkLua",tolua_LuaFramework_SFScriptManager_excuteZpkLua00);
   tolua_function(tolua_S,"setZpkSupport",tolua_LuaFramework_SFScriptManager_setZpkSupport00);
   tolua_function(tolua_S,"isSearchZpk",tolua_LuaFramework_SFScriptManager_isSearchZpk00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"CCFileUtils","CCFileUtils","",NULL);
  tolua_beginmodule(tolua_S,"CCFileUtils");
   tolua_function(tolua_S,"isFileExist",tolua_LuaFramework_CCFileUtils_isFileExist00);
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"kCreateFile",kCreateFile);
  tolua_constant(tolua_S,"kNetwork",kNetwork);
  tolua_constant(tolua_S,"kNoNewVersion",kNoNewVersion);
  tolua_constant(tolua_S,"kUncompress",kUncompress);
  tolua_cclass(tolua_S,"SFDownloadDelegateProtocl","SFDownloadDelegateProtocl","CCObject",NULL);
  tolua_beginmodule(tolua_S,"SFDownloadDelegateProtocl");
  tolua_endmodule(tolua_S);
  tolua_constant(tolua_S,"kOnError",kOnError);
  tolua_constant(tolua_S,"kOnProgress",kOnProgress);
  tolua_constant(tolua_S,"kOnSuccess",kOnSuccess);
  tolua_constant(tolua_S,"kOnFilesize",kOnFilesize);
  tolua_constant(tolua_S,"kOnAllFilesSize",kOnAllFilesSize);
  tolua_constant(tolua_S,"kOnDownloadSpeed",kOnDownloadSpeed);
  tolua_constant(tolua_S,"kOnComplete",kOnComplete);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFDownLoadDelegateLua","SFDownLoadDelegateLua","SFDownloadDelegateProtocl",tolua_collect_SFDownLoadDelegateLua);
  #else
  tolua_cclass(tolua_S,"SFDownLoadDelegateLua","SFDownLoadDelegateLua","SFDownloadDelegateProtocl",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFDownLoadDelegateLua");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFDownLoadDelegateLua_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFDownLoadDelegateLua_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFDownLoadDelegateLua_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFDownLoadDelegateLua_delete00);
   tolua_function(tolua_S,"setHandler",tolua_LuaFramework_SFDownLoadDelegateLua_setHandler00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFDownload","SFDownload","",tolua_collect_SFDownload);
  #else
  tolua_cclass(tolua_S,"SFDownload","SFDownload","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFDownload");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFDownload_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFDownload_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFDownload_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFDownload_delete00);
   tolua_function(tolua_S,"setDelegate",tolua_LuaFramework_SFDownload_setDelegate00);
   tolua_function(tolua_S,"setConnectionTimeout",tolua_LuaFramework_SFDownload_setConnectionTimeout00);
   tolua_function(tolua_S,"getConnectionTimeout",tolua_LuaFramework_SFDownload_getConnectionTimeout00);
   tolua_function(tolua_S,"setStoragePath",tolua_LuaFramework_SFDownload_setStoragePath00);
   tolua_function(tolua_S,"getStoragePath",tolua_LuaFramework_SFDownload_getStoragePath00);
   tolua_function(tolua_S,"addPackageUrl",tolua_LuaFramework_SFDownload_addPackageUrl00);
   tolua_function(tolua_S,"startDownload",tolua_LuaFramework_SFDownload_startDownload00);
   tolua_function(tolua_S,"stopDownLoad",tolua_LuaFramework_SFDownload_stopDownLoad00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFControlSlider","SFControlSlider","CCControl",tolua_collect_SFControlSlider);
  #else
  tolua_cclass(tolua_S,"SFControlSlider","SFControlSlider","CCControl",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFControlSlider");
   tolua_function(tolua_S,"getValue",tolua_LuaFramework_SFControlSlider_getValue00);
   tolua_function(tolua_S,"setValue",tolua_LuaFramework_SFControlSlider_setValue00);
   tolua_function(tolua_S,"getMinimumValue",tolua_LuaFramework_SFControlSlider_getMinimumValue00);
   tolua_function(tolua_S,"setMinimumValue",tolua_LuaFramework_SFControlSlider_setMinimumValue00);
   tolua_function(tolua_S,"getMaximumValue",tolua_LuaFramework_SFControlSlider_getMaximumValue00);
   tolua_function(tolua_S,"setMaximumValue",tolua_LuaFramework_SFControlSlider_setMaximumValue00);
   tolua_function(tolua_S,"setEnabled",tolua_LuaFramework_SFControlSlider_setEnabled00);
   tolua_function(tolua_S,"isTouchInside",tolua_LuaFramework_SFControlSlider_isTouchInside00);
   tolua_function(tolua_S,"locationFromTouch",tolua_LuaFramework_SFControlSlider_locationFromTouch00);
   tolua_function(tolua_S,"getMinimumAllowedValue",tolua_LuaFramework_SFControlSlider_getMinimumAllowedValue00);
   tolua_function(tolua_S,"setMinimumAllowedValue",tolua_LuaFramework_SFControlSlider_setMinimumAllowedValue00);
   tolua_function(tolua_S,"getMaximumAllowedValue",tolua_LuaFramework_SFControlSlider_getMaximumAllowedValue00);
   tolua_function(tolua_S,"setMaximumAllowedValue",tolua_LuaFramework_SFControlSlider_setMaximumAllowedValue00);
   tolua_function(tolua_S,"getThumbSprite",tolua_LuaFramework_SFControlSlider_getThumbSprite00);
   tolua_function(tolua_S,"setThumbSprite",tolua_LuaFramework_SFControlSlider_setThumbSprite00);
   tolua_function(tolua_S,"getProgressSprite",tolua_LuaFramework_SFControlSlider_getProgressSprite00);
   tolua_function(tolua_S,"setProgressSprite",tolua_LuaFramework_SFControlSlider_setProgressSprite00);
   tolua_function(tolua_S,"getBackgroundSprite",tolua_LuaFramework_SFControlSlider_getBackgroundSprite00);
   tolua_function(tolua_S,"setBackgroundSprite",tolua_LuaFramework_SFControlSlider_setBackgroundSprite00);
   tolua_function(tolua_S,"getProgressBar",tolua_LuaFramework_SFControlSlider_getProgressBar00);
   tolua_function(tolua_S,"setProgressBar",tolua_LuaFramework_SFControlSlider_setProgressBar00);
   tolua_function(tolua_S,"getShadeSprite",tolua_LuaFramework_SFControlSlider_getShadeSprite00);
   tolua_function(tolua_S,"setShadeSprite",tolua_LuaFramework_SFControlSlider_setShadeSprite00);
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFControlSlider_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFControlSlider_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFControlSlider_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFControlSlider_delete00);
   tolua_function(tolua_S,"initWithSprites",tolua_LuaFramework_SFControlSlider_initWithSprites00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFControlSlider_create00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_SFControlSlider_create01);
   tolua_function(tolua_S,"needsLayout",tolua_LuaFramework_SFControlSlider_needsLayout00);
   tolua_function(tolua_S,"setShade",tolua_LuaFramework_SFControlSlider_setShade00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"CCClippingNode","CCClippingNode","CCNode",tolua_collect_CCClippingNode);
  #else
  tolua_cclass(tolua_S,"CCClippingNode","CCClippingNode","CCNode",NULL);
  #endif
  tolua_beginmodule(tolua_S,"CCClippingNode");
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCClippingNode_create00);
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCClippingNode_create01);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_CCClippingNode_delete00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_CCClippingNode_init00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_CCClippingNode_init01);
   tolua_function(tolua_S,"onEnter",tolua_LuaFramework_CCClippingNode_onEnter00);
   tolua_function(tolua_S,"onEnterTransitionDidFinish",tolua_LuaFramework_CCClippingNode_onEnterTransitionDidFinish00);
   tolua_function(tolua_S,"onExitTransitionDidStart",tolua_LuaFramework_CCClippingNode_onExitTransitionDidStart00);
   tolua_function(tolua_S,"onExit",tolua_LuaFramework_CCClippingNode_onExit00);
   tolua_function(tolua_S,"visit",tolua_LuaFramework_CCClippingNode_visit00);
   tolua_function(tolua_S,"getStencil",tolua_LuaFramework_CCClippingNode_getStencil00);
   tolua_function(tolua_S,"setStencil",tolua_LuaFramework_CCClippingNode_setStencil00);
   tolua_function(tolua_S,"getAlphaThreshold",tolua_LuaFramework_CCClippingNode_getAlphaThreshold00);
   tolua_function(tolua_S,"setAlphaThreshold",tolua_LuaFramework_CCClippingNode_setAlphaThreshold00);
   tolua_function(tolua_S,"isInverted",tolua_LuaFramework_CCClippingNode_isInverted00);
   tolua_function(tolua_S,"setInverted",tolua_LuaFramework_CCClippingNode_setInverted00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"CCDrawNode","CCDrawNode","CCNode",tolua_collect_CCDrawNode);
  #else
  tolua_cclass(tolua_S,"CCDrawNode","CCDrawNode","CCNode",NULL);
  #endif
  tolua_beginmodule(tolua_S,"CCDrawNode");
   tolua_function(tolua_S,"create",tolua_LuaFramework_CCDrawNode_create00);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_CCDrawNode_delete00);
   tolua_function(tolua_S,"init",tolua_LuaFramework_CCDrawNode_init00);
   tolua_function(tolua_S,"draw",tolua_LuaFramework_CCDrawNode_draw00);
   tolua_function(tolua_S,"drawDot",tolua_LuaFramework_CCDrawNode_drawDot00);
   tolua_function(tolua_S,"drawSegment",tolua_LuaFramework_CCDrawNode_drawSegment00);
   tolua_function(tolua_S,"drawPolygon",tolua_LuaFramework_CCDrawNode_drawPolygon00);
   tolua_function(tolua_S,"drawPolygonWithArray",tolua_LuaFramework_CCDrawNode_drawPolygonWithArray00);
   tolua_function(tolua_S,"clear",tolua_LuaFramework_CCDrawNode_clear00);
   tolua_function(tolua_S,"getBlendFunc",tolua_LuaFramework_CCDrawNode_getBlendFunc00);
   tolua_function(tolua_S,"setBlendFunc",tolua_LuaFramework_CCDrawNode_setBlendFunc00);
   tolua_function(tolua_S,"new",tolua_LuaFramework_CCDrawNode_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_CCDrawNode_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_CCDrawNode_new00_local);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFEasyMail","SFEasyMail","",tolua_collect_SFEasyMail);
  #else
  tolua_cclass(tolua_S,"SFEasyMail","SFEasyMail","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFEasyMail");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFEasyMail_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFEasyMail_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFEasyMail_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFEasyMail_delete00);
   tolua_function(tolua_S,"SetMailContent",tolua_LuaFramework_SFEasyMail_SetMailContent00);
   tolua_function(tolua_S,"SendMail",tolua_LuaFramework_SFEasyMail_SendMail00);
   tolua_function(tolua_S,"AddRecipient",tolua_LuaFramework_SFEasyMail_AddRecipient00);
   tolua_function(tolua_S,"SendEasyMail",tolua_LuaFramework_SFEasyMail_SendEasyMail00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFGameAnalyzer","SFGameAnalyzer","",tolua_collect_SFGameAnalyzer);
  #else
  tolua_cclass(tolua_S,"SFGameAnalyzer","SFGameAnalyzer","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFGameAnalyzer");
   tolua_function(tolua_S,"new",tolua_LuaFramework_SFGameAnalyzer_new00);
   tolua_function(tolua_S,"new_local",tolua_LuaFramework_SFGameAnalyzer_new00_local);
   tolua_function(tolua_S,".call",tolua_LuaFramework_SFGameAnalyzer_new00_local);
   tolua_function(tolua_S,"delete",tolua_LuaFramework_SFGameAnalyzer_delete00);
   tolua_function(tolua_S,"logGameEvent",tolua_LuaFramework_SFGameAnalyzer_logGameEvent00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"Base64Code","Base64Code","",NULL);
  tolua_beginmodule(tolua_S,"Base64Code");
   tolua_function(tolua_S,"decode",tolua_LuaFramework_Base64Code_decode00);
   tolua_function(tolua_S,"encode",tolua_LuaFramework_Base64Code_encode00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 return 1;
}


#if defined(LUA_VERSION_NUM) && LUA_VERSION_NUM >= 501
 TOLUA_API int luaopen_LuaFramework (lua_State* tolua_S) {
 return tolua_LuaFramework_open(tolua_S);
};
#endif

