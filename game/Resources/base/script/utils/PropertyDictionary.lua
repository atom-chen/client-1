--[[
-- 2014.7.3-10:45:25
--
-- generated by editor
--]]


require("common.baseclass")

PropertyDictionary = PropertyDictionary or BaseClass()

function PropertyDictionary:getProperty(propertyTable, propertyName)
	if type(propertyName) == "string" then
		return propertyTable[propertyName]
	end
end

function PropertyDictionary:setProperty(propertyTable, propertyName, value)
	if type(propertyName) == "string" then
		propertyTable[propertyName] = value
	end
end
--[[
-- GET生命
--
-- @return 生命
--]]
function PropertyDictionary:get_HP(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "HP")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET生命
--
-- @param HP 生命
--]]
function PropertyDictionary:set_HP(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "HP", value)
end
--[[
-- GET魔法
--
-- @return 魔法
--]]
function PropertyDictionary:get_MP(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "MP")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET魔法
--
-- @param MP 魔法
--]]
function PropertyDictionary:set_MP(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "MP", value)
end
--[[
-- GET生命恢复
--
-- @return 生命恢复
--]]
function PropertyDictionary:get_healHP(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "healHP")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET生命恢复
--
-- @param healHP 生命恢复
--]]
function PropertyDictionary:set_healHP(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "healHP", value)
end
--[[
-- GET魔法恢复
--
-- @return 魔法恢复
--]]
function PropertyDictionary:get_healMP(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "healMP")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET魔法恢复
--
-- @param healMP 魔法恢复
--]]
function PropertyDictionary:set_healMP(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "healMP", value)
end
--[[
-- GET生命上限
--
-- @return 生命上限
--]]
function PropertyDictionary:get_maxHP(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "maxHP")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET生命上限
--
-- @param maxHP 生命上限
--]]
function PropertyDictionary:set_maxHP(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "maxHP", value)
end
--[[
-- GET魔法上限
--
-- @return 魔法上限
--]]
function PropertyDictionary:get_maxMP(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "maxMP")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET魔法上限
--
-- @param maxMP 魔法上限
--]]
function PropertyDictionary:set_maxMP(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "maxMP", value)
end
--[[
-- GET生命百分比
--
-- @return 生命百分比
--]]
function PropertyDictionary:get_perHP(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "perHP")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET生命百分比
--
-- @param perHP 生命百分比
--]]
function PropertyDictionary:set_perHP(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "perHP", value)
end
--[[
-- GET魔法百分比
--
-- @return 魔法百分比
--]]
function PropertyDictionary:get_perMP(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "perMP")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET魔法百分比
--
-- @param perMP 魔法百分比
--]]
function PropertyDictionary:set_perMP(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "perMP", value)
end
--[[
-- GET最小物攻
--
-- @return 最小物攻
--]]
function PropertyDictionary:get_minPAtk(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "minPAtk")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET最小物攻
--
-- @param minPAtk 最小物攻
--]]
function PropertyDictionary:set_minPAtk(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "minPAtk", value)
end
--[[
-- GET最大物攻
--
-- @return 最大物攻
--]]
function PropertyDictionary:get_maxPAtk(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "maxPAtk")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET最大物攻
--
-- @param maxPAtk 最大物攻
--]]
function PropertyDictionary:set_maxPAtk(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "maxPAtk", value)
end
--[[
-- GET最小魔攻
--
-- @return 最小魔攻
--]]
function PropertyDictionary:get_minMAtk(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "minMAtk")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET最小魔攻
--
-- @param minMAtk 最小魔攻
--]]
function PropertyDictionary:set_minMAtk(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "minMAtk", value)
end
--[[
-- GET最大魔攻
--
-- @return 最大魔攻
--]]
function PropertyDictionary:get_maxMAtk(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "maxMAtk")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET最大魔攻
--
-- @param maxMAtk 最大魔攻
--]]
function PropertyDictionary:set_maxMAtk(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "maxMAtk", value)
end
--[[
-- GET最小道功
--
-- @return 最小道功
--]]
function PropertyDictionary:get_minTao(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "minTao")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET最小道功
--
-- @param minTao 最小道功
--]]
function PropertyDictionary:set_minTao(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "minTao", value)
end
--[[
-- GET最大道功
--
-- @return 最大道功
--]]
function PropertyDictionary:get_maxTao(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "maxTao")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET最大道功
--
-- @param maxTao 最大道功
--]]
function PropertyDictionary:set_maxTao(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "maxTao", value)
end
--[[
-- GET最小物防
--
-- @return 最小物防
--]]
function PropertyDictionary:get_minPDef(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "minPDef")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET最小物防
--
-- @param minPDef 最小物防
--]]
function PropertyDictionary:set_minPDef(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "minPDef", value)
end
--[[
-- GET最大物防
--
-- @return 最大物防
--]]
function PropertyDictionary:get_maxPDef(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "maxPDef")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET最大物防
--
-- @param maxPDef 最大物防
--]]
function PropertyDictionary:set_maxPDef(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "maxPDef", value)
end
--[[
-- GET最小魔防
--
-- @return 最小魔防
--]]
function PropertyDictionary:get_minMDef(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "minMDef")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET最小魔防
--
-- @param minMDef 最小魔防
--]]
function PropertyDictionary:set_minMDef(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "minMDef", value)
end
--[[
-- GET最大魔防
--
-- @return 最大魔防
--]]
function PropertyDictionary:get_maxMDef(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "maxMDef")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET最大魔防
--
-- @param maxMDef 最大魔防
--]]
function PropertyDictionary:set_maxMDef(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "maxMDef", value)
end
--[[
-- GET物理闪避
--
-- @return 物理闪避
--]]
function PropertyDictionary:get_PDodge(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "PDodge")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET物理闪避
--
-- @param PDodge 物理闪避
--]]
function PropertyDictionary:set_PDodge(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "PDodge", value)
end
--[[
-- GET魔法闪避
--
-- @return 魔法闪避
--]]
function PropertyDictionary:get_MDodge(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "MDodge")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET魔法闪避
--
-- @param MDodge 魔法闪避
--]]
function PropertyDictionary:set_MDodge(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "MDodge", value)
end
--[[
-- GET物理减免
--
-- @return 物理减免
--]]
function PropertyDictionary:get_PImmunityPer(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "PImmunityPer")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET物理减免
--
-- @param PImmunityPer 物理减免
--]]
function PropertyDictionary:set_PImmunityPer(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "PImmunityPer", value)
end
--[[
-- GET魔法减免
--
-- @return 魔法减免
--]]
function PropertyDictionary:get_MImmunityPer(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "MImmunityPer")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET魔法减免
--
-- @param MImmunityPer 魔法减免
--]]
function PropertyDictionary:set_MImmunityPer(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "MImmunityPer", value)
end
--[[
-- GET移动速度
--
-- @return 移动速度
--]]
function PropertyDictionary:get_moveSpeed(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "moveSpeed")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET移动速度
--
-- @param moveSpeed 移动速度
--]]
function PropertyDictionary:set_moveSpeed(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "moveSpeed", value)
end
--[[
-- GET攻击速度
--
-- @return 攻击速度
--]]
function PropertyDictionary:get_atkSpeed(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "atkSpeed")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET攻击速度
--
-- @param atkSpeed 攻击速度
--]]
function PropertyDictionary:set_atkSpeed(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "atkSpeed", value)
end
--[[
-- GET施法速度
--
-- @return 施法速度
--]]
function PropertyDictionary:get_magicSpeed(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "magicSpeed")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET施法速度
--
-- @param magicSpeed 施法速度
--]]
function PropertyDictionary:set_magicSpeed(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "magicSpeed", value)
end
--[[
-- GET命中
--
-- @return 命中
--]]
function PropertyDictionary:get_hit(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "hit")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET命中
--
-- @param hit 命中
--]]
function PropertyDictionary:set_hit(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "hit", value)
end
--[[
-- GET暴击
--
-- @return 暴击
--]]
function PropertyDictionary:get_crit(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "crit")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET暴击
--
-- @param crit 暴击
--]]
function PropertyDictionary:set_crit(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "crit", value)
end
--[[
-- GET暴击伤害
--
-- @return 暴击伤害
--]]
function PropertyDictionary:get_critInjure(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "critInjure")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET暴击伤害
--
-- @param critInjure 暴击伤害
--]]
function PropertyDictionary:set_critInjure(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "critInjure", value)
end
--[[
-- GET幸运
--
-- @return 幸运
--]]
function PropertyDictionary:get_fortune(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "fortune")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET幸运
--
-- @param fortune 幸运
--]]
function PropertyDictionary:set_fortune(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "fortune", value)
end
--[[
-- GET忽视对方物理防御
--
-- @return 忽视对方物理防御
--]]
function PropertyDictionary:get_ignorePDef(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "ignorePDef")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET忽视对方物理防御
--
-- @param ignorePDef 忽视对方物理防御
--]]
function PropertyDictionary:set_ignorePDef(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "ignorePDef", value)
end
--[[
-- GET忽视对方魔法防御
--
-- @return 忽视对方魔法防御
--]]
function PropertyDictionary:get_ignoreMDef(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "ignoreMDef")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET忽视对方魔法防御
--
-- @param ignoreMDef 忽视对方魔法防御
--]]
function PropertyDictionary:set_ignoreMDef(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "ignoreMDef", value)
end
--[[
-- GET命中百分比
--
-- @return 命中百分比
--]]
function PropertyDictionary:get_hitPer(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "hitPer")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET命中百分比
--
-- @param hitPer 命中百分比
--]]
function PropertyDictionary:set_hitPer(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "hitPer", value)
end
--[[
-- GET暴击百分比
--
-- @return 暴击百分比
--]]
function PropertyDictionary:get_critPer(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "critPer")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET暴击百分比
--
-- @param critPer 暴击百分比
--]]
function PropertyDictionary:set_critPer(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "critPer", value)
end
--[[
-- GET物理闪避百分比
--
-- @return 物理闪避百分比
--]]
function PropertyDictionary:get_PDodgePer(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "PDodgePer")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET物理闪避百分比
--
-- @param PDodgePer 物理闪避百分比
--]]
function PropertyDictionary:set_PDodgePer(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "PDodgePer", value)
end
--[[
-- GET魔法闪避百分比
--
-- @return 魔法闪避百分比
--]]
function PropertyDictionary:get_MDodgePer(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "MDodgePer")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET魔法闪避百分比
--
-- @param MDodgePer 魔法闪避百分比
--]]
function PropertyDictionary:set_MDodgePer(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "MDodgePer", value)
end
--[[
-- GET伤害值
--
-- @return 伤害值
--]]
function PropertyDictionary:get_injure(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "injure")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET伤害值
--
-- @param injure 伤害值
--]]
function PropertyDictionary:set_injure(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "injure", value)
end
--[[
-- GET伤害百分比
--
-- @return 伤害百分比
--]]
function PropertyDictionary:get_injurePer(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "injurePer")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET伤害百分比
--
-- @param injurePer 伤害百分比
--]]
function PropertyDictionary:set_injurePer(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "injurePer", value)
end
--[[
-- GET闪避
--
-- @return 闪避
--]]
function PropertyDictionary:get_dodge(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "dodge")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET闪避
--
-- @param dodge 闪避
--]]
function PropertyDictionary:set_dodge(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "dodge", value)
end
--[[
-- GETPK值
--
-- @return PK值
--]]
function PropertyDictionary:get_pkValue(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "pkValue")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SETPK值
--
-- @param pkValue PK值
--]]
function PropertyDictionary:set_pkValue(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "pkValue", value)
end
--[[
-- GET成就
--
-- @return 成就
--]]
function PropertyDictionary:get_achievement(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "achievement")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET成就
--
-- @param achievement 成就
--]]
function PropertyDictionary:set_achievement(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "achievement", value)
end
--[[
-- GET功勋
--
-- @return 功勋
--]]
function PropertyDictionary:get_merit(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "merit")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET功勋
--
-- @param merit 功勋
--]]
function PropertyDictionary:set_merit(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "merit", value)
end
--[[
-- GET战斗力
--
-- @return 战斗力
--]]
function PropertyDictionary:get_fightValue(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "fightValue")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET战斗力
--
-- @param fightValue 战斗力
--]]
function PropertyDictionary:set_fightValue(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "fightValue", value)
end
--[[
-- GET荣誉
--
-- @return 荣誉
--]]
function PropertyDictionary:get_honor(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "honor")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET荣誉
--
-- @param honor 荣誉
--]]
function PropertyDictionary:set_honor(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "honor", value)
end
--[[
-- GET修为
--
-- @return 修为
--]]
function PropertyDictionary:get_cultivation(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "cultivation")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET修为
--
-- @param cultivation 修为
--]]
function PropertyDictionary:set_cultivation(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "cultivation", value)
end
--[[
-- GET成就ID
--
-- @return 成就ID
--]]
function PropertyDictionary:get_achieveId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "achieveId")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET成就ID
--
-- @param achieveId 成就ID
--]]
function PropertyDictionary:set_achieveId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "achieveId", value)
end
--[[
-- GET后置成就
--
-- @return 后置成就
--]]
function PropertyDictionary:get_nextAchieve(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "nextAchieve")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET后置成就
--
-- @param nextAchieve 后置成就
--]]
function PropertyDictionary:set_nextAchieve(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "nextAchieve", value)
end
--[[
-- GET成就类型
--
-- @return 成就类型
--]]
function PropertyDictionary:get_achieveType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "achieveType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET成就类型
--
-- @param achieveType 成就类型
--]]
function PropertyDictionary:set_achieveType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "achieveType", value)
end
--[[
-- GET分类名称
--
-- @return 分类名称
--]]
function PropertyDictionary:get_typeName(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "typeName")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET分类名称
--
-- @param typeName 分类名称
--]]
function PropertyDictionary:set_typeName(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "typeName", value)
end
--[[
-- GET完成条件
--
-- @return 完成条件
--]]
function PropertyDictionary:get_completeCondition(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "completeCondition")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET完成条件
--
-- @param completeCondition 完成条件
--]]
function PropertyDictionary:set_completeCondition(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "completeCondition", value)
end
--[[
-- GET目标ID
--
-- @return 目标ID
--]]
function PropertyDictionary:get_targetID(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "targetID")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET目标ID
--
-- @param targetID 目标ID
--]]
function PropertyDictionary:set_targetID(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "targetID", value)
end
--[[
-- GET目标数量
--
-- @return 目标数量
--]]
function PropertyDictionary:get_targetNum(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "targetNum")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET目标数量
--
-- @param targetNum 目标数量
--]]
function PropertyDictionary:set_targetNum(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "targetNum", value)
end
--[[
-- GET成就描述
--
-- @return 成就描述
--]]
function PropertyDictionary:get_achieveDescribe(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "achieveDescribe")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET成就描述
--
-- @param achieveDescribe 成就描述
--]]
function PropertyDictionary:set_achieveDescribe(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "achieveDescribe", value)
end
--[[
-- GET成就奖励
--
-- @return 成就奖励
--]]
function PropertyDictionary:get_achieveReward(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "achieveReward")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET成就奖励
--
-- @param achieveReward 成就奖励
--]]
function PropertyDictionary:set_achieveReward(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "achieveReward", value)
end
--[[
-- GET攻速百分比
--
-- @return 攻速百分比
--]]
function PropertyDictionary:get_atkSpeedPer(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "atkSpeedPer")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET攻速百分比
--
-- @param atkSpeedPer 攻速百分比
--]]
function PropertyDictionary:set_atkSpeedPer(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "atkSpeedPer", value)
end
--[[
-- GET攻击类型
--
-- @return 攻击类型
--]]
function PropertyDictionary:get_attackType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "attackType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET攻击类型
--
-- @param attackType 攻击类型
--]]
function PropertyDictionary:set_attackType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "attackType", value)
end
--[[
-- GET攻击距离
--
-- @return 攻击距离
--]]
function PropertyDictionary:get_attackDistance(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "attackDistance")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET攻击距离
--
-- @param attackDistance 攻击距离
--]]
function PropertyDictionary:set_attackDistance(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "attackDistance", value)
end
--[[
-- GET复活场景Id
--
-- @return 复活场景Id
--]]
function PropertyDictionary:get_reviveSceneRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "reviveSceneRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET复活场景Id
--
-- @param reviveSceneRefId 复活场景Id
--]]
function PropertyDictionary:set_reviveSceneRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "reviveSceneRefId", value)
end
--[[
-- GET玩家状态
--
-- @return 玩家状态
--]]
function PropertyDictionary:get_states(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "states")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET玩家状态
--
-- @param states 玩家状态
--]]
function PropertyDictionary:set_states(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "states", value)
end
--[[
-- GET名称颜色
--
-- @return 名称颜色
--]]
function PropertyDictionary:get_nameColor(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "nameColor")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET名称颜色
--
-- @param nameColor 名称颜色
--]]
function PropertyDictionary:set_nameColor(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "nameColor", value)
end
--[[
-- GET出生时间
--
-- @return 出生时间
--]]
function PropertyDictionary:get_birthday(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "birthday")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET出生时间
--
-- @param birthday 出生时间
--]]
function PropertyDictionary:set_birthday(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "birthday", value)
end
--[[
-- GET击杀者名称
--
-- @return 击杀者名称
--]]
function PropertyDictionary:get_killerName(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "killerName")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET击杀者名称
--
-- @param killerName 击杀者名称
--]]
function PropertyDictionary:set_killerName(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "killerName", value)
end
--[[
-- GET击杀者类型
--
-- @return 击杀者类型
--]]
function PropertyDictionary:get_killerType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "killerType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET击杀者类型
--
-- @param killerType 击杀者类型
--]]
function PropertyDictionary:set_killerType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "killerType", value)
end
--[[
-- GET被击杀时间
--
-- @return 被击杀时间
--]]
function PropertyDictionary:get_deadTime(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "deadTime")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET被击杀时间
--
-- @param deadTime 被击杀时间
--]]
function PropertyDictionary:set_deadTime(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "deadTime", value)
end
--[[
-- GET击杀者uuid
--
-- @return 击杀者uuid
--]]
function PropertyDictionary:get_killerCharId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "killerCharId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET击杀者uuid
--
-- @param killerCharId 击杀者uuid
--]]
function PropertyDictionary:set_killerCharId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "killerCharId", value)
end
--[[
-- GET击杀者等级
--
-- @return 击杀者等级
--]]
function PropertyDictionary:get_killerLevel(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "killerLevel")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET击杀者等级
--
-- @param killerLevel 击杀者等级
--]]
function PropertyDictionary:set_killerLevel(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "killerLevel", value)
end
--[[
-- GET击杀者职业
--
-- @return 击杀者职业
--]]
function PropertyDictionary:get_killerOccupa(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "killerOccupa")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET击杀者职业
--
-- @param killerOccupa 击杀者职业
--]]
function PropertyDictionary:set_killerOccupa(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "killerOccupa", value)
end
--[[
-- GET击杀者战力
--
-- @return 击杀者战力
--]]
function PropertyDictionary:get_killerFightPower(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "killerFightPower")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET击杀者战力
--
-- @param killerFightPower 击杀者战力
--]]
function PropertyDictionary:set_killerFightPower(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "killerFightPower", value)
end
--[[
-- GET能否使用
--
-- @return 能否使用
--]]
function PropertyDictionary:get_canUse(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "canUse")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET能否使用
--
-- @param canUse 能否使用
--]]
function PropertyDictionary:set_canUse(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "canUse", value)
end
--[[
-- GET叠加上限
--
-- @return 叠加上限
--]]
function PropertyDictionary:get_maxStackNumber(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "maxStackNumber")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET叠加上限
--
-- @param maxStackNumber 叠加上限
--]]
function PropertyDictionary:set_maxStackNumber(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "maxStackNumber", value)
end
--[[
-- GET绑定类型
--
-- @return 绑定类型
--]]
function PropertyDictionary:get_bindType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "bindType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET绑定类型
--
-- @param bindType 绑定类型
--]]
function PropertyDictionary:set_bindType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "bindType", value)
end
--[[
-- GET使用等级
--
-- @return 使用等级
--]]
function PropertyDictionary:get_useLevel(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "useLevel")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET使用等级
--
-- @param useLevel 使用等级
--]]
function PropertyDictionary:set_useLevel(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "useLevel", value)
end
--[[
-- GET使用爵位
--
-- @return 使用爵位
--]]
function PropertyDictionary:get_useKnight(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "useKnight")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET使用爵位
--
-- @param useKnight 使用爵位
--]]
function PropertyDictionary:set_useKnight(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "useKnight", value)
end
--[[
-- GET每天可使用次数
--
-- @return 每天可使用次数
--]]
function PropertyDictionary:get_useCountEveryday(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "useCountEveryday")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET每天可使用次数
--
-- @param useCountEveryday 每天可使用次数
--]]
function PropertyDictionary:set_useCountEveryday(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "useCountEveryday", value)
end
--[[
-- GET允许使用时间
--
-- @return 允许使用时间
--]]
function PropertyDictionary:get_canUseIfDate(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "canUseIfDate")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET允许使用时间
--
-- @param canUseIfDate 允许使用时间
--]]
function PropertyDictionary:set_canUseIfDate(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "canUseIfDate", value)
end
--[[
-- GET过期时间
--
-- @return 过期时间
--]]
function PropertyDictionary:get_expiredTime(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "expiredTime")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET过期时间
--
-- @param expiredTime 过期时间
--]]
function PropertyDictionary:set_expiredTime(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "expiredTime", value)
end
--[[
-- GET物品效果
--
-- @return 物品效果
--]]
function PropertyDictionary:get_itemEffect(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "itemEffect")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET物品效果
--
-- @param itemEffect 物品效果
--]]
function PropertyDictionary:set_itemEffect(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "itemEffect", value)
end
--[[
-- GET穿戴部位
--
-- @return 穿戴部位
--]]
function PropertyDictionary:get_areaOfBody(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "areaOfBody")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET穿戴部位
--
-- @param areaOfBody 穿戴部位
--]]
function PropertyDictionary:set_areaOfBody(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "areaOfBody", value)
end
--[[
-- GET穿戴等级
--
-- @return 穿戴等级
--]]
function PropertyDictionary:get_equipLevel(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "equipLevel")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET穿戴等级
--
-- @param equipLevel 穿戴等级
--]]
function PropertyDictionary:set_equipLevel(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "equipLevel", value)
end
--[[
-- GET物品种类
--
-- @return 物品种类
--]]
function PropertyDictionary:get_itemType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "itemType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET物品种类
--
-- @param itemType 物品种类
--]]
function PropertyDictionary:set_itemType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "itemType", value)
end
--[[
-- GET物品属性是否可变
--
-- @return 物品属性是否可变
--]]
function PropertyDictionary:get_isNonPropertyItem(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isNonPropertyItem")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET物品属性是否可变
--
-- @param isNonPropertyItem 物品属性是否可变
--]]
function PropertyDictionary:set_isNonPropertyItem(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isNonPropertyItem", value)
end
--[[
-- GET是否可卖
--
-- @return 是否可卖
--]]
function PropertyDictionary:get_isCanSale(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isCanSale")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET是否可卖
--
-- @param isCanSale 是否可卖
--]]
function PropertyDictionary:set_isCanSale(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isCanSale", value)
end
--[[
-- GET出售价格
--
-- @return 出售价格
--]]
function PropertyDictionary:get_salePrice(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "salePrice")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET出售价格
--
-- @param salePrice 出售价格
--]]
function PropertyDictionary:set_salePrice(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "salePrice", value)
end
--[[
-- GET卖价单位
--
-- @return 卖价单位
--]]
function PropertyDictionary:get_saleCurrency(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "saleCurrency")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET卖价单位
--
-- @param saleCurrency 卖价单位
--]]
function PropertyDictionary:set_saleCurrency(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "saleCurrency", value)
end
--[[
-- GET可否丢弃
--
-- @return 可否丢弃
--]]
function PropertyDictionary:get_isNonThrow(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isNonThrow")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET可否丢弃
--
-- @param isNonThrow 可否丢弃
--]]
function PropertyDictionary:set_isNonThrow(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isNonThrow", value)
end
--[[
-- GET自动使用优先级
--
-- @return 自动使用优先级
--]]
function PropertyDictionary:get_autoUsePriority(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "autoUsePriority")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET自动使用优先级
--
-- @param autoUsePriority 自动使用优先级
--]]
function PropertyDictionary:set_autoUsePriority(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "autoUsePriority", value)
end
--[[
-- GETCD组id
--
-- @return CD组id
--]]
function PropertyDictionary:get_itemCDGroup(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "itemCDGroup")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SETCD组id
--
-- @param itemCDGroup CD组id
--]]
function PropertyDictionary:set_itemCDGroup(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "itemCDGroup", value)
end
--[[
-- GET物品排序Id
--
-- @return 物品排序Id
--]]
function PropertyDictionary:get_itemSortId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "itemSortId")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET物品排序Id
--
-- @param itemSortId 物品排序Id
--]]
function PropertyDictionary:set_itemSortId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "itemSortId", value)
end
--[[
-- GET背包格索引
--
-- @return 背包格索引
--]]
function PropertyDictionary:get_slotIndex(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "slotIndex")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET背包格索引
--
-- @param slotIndex 背包格索引
--]]
function PropertyDictionary:set_slotIndex(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "slotIndex", value)
end
--[[
-- GET物品引用Id
--
-- @return 物品引用Id
--]]
function PropertyDictionary:get_itemRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "itemRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET物品引用Id
--
-- @param itemRefId 物品引用Id
--]]
function PropertyDictionary:set_itemRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "itemRefId", value)
end
--[[
-- GET绑定状态
--
-- @return 绑定状态
--]]
function PropertyDictionary:get_bindStatus(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "bindStatus")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET绑定状态
--
-- @param bindStatus 绑定状态
--]]
function PropertyDictionary:set_bindStatus(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "bindStatus", value)
end
--[[
-- GET已开启的格子数
--
-- @return 已开启的格子数
--]]
function PropertyDictionary:get_itemSlotOpened(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "itemSlotOpened")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET已开启的格子数
--
-- @param itemSlotOpened 已开启的格子数
--]]
function PropertyDictionary:set_itemSlotOpened(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "itemSlotOpened", value)
end
--[[
-- GET已经使用的格子数
--
-- @return 已经使用的格子数
--]]
function PropertyDictionary:get_usedSlotNumber(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "usedSlotNumber")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET已经使用的格子数
--
-- @param usedSlotNumber 已经使用的格子数
--]]
function PropertyDictionary:set_usedSlotNumber(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "usedSlotNumber", value)
end
--[[
-- GET背包的容量
--
-- @return 背包的容量
--]]
function PropertyDictionary:get_itemBagCapacity(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "itemBagCapacity")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET背包的容量
--
-- @param itemBagCapacity 背包的容量
--]]
function PropertyDictionary:set_itemBagCapacity(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "itemBagCapacity", value)
end
--[[
-- GET评价等级
--
-- @return 评价等级
--]]
function PropertyDictionary:get_evaluateLevel(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "evaluateLevel")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET评价等级
--
-- @param evaluateLevel 评价等级
--]]
function PropertyDictionary:set_evaluateLevel(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "evaluateLevel", value)
end
--[[
-- GET使用材料数量
--
-- @return 使用材料数量
--]]
function PropertyDictionary:get_useMaterialCount(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "useMaterialCount")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET使用材料数量
--
-- @param useMaterialCount 使用材料数量
--]]
function PropertyDictionary:set_useMaterialCount(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "useMaterialCount", value)
end
--[[
-- GET成功率提升消耗
--
-- @return 成功率提升消耗
--]]
function PropertyDictionary:get_succeedUpConsume(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "succeedUpConsume")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET成功率提升消耗
--
-- @param succeedUpConsume 成功率提升消耗
--]]
function PropertyDictionary:set_succeedUpConsume(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "succeedUpConsume", value)
end
--[[
-- GET失败级别
--
-- @return 失败级别
--]]
function PropertyDictionary:get_failedDownToLevel(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "failedDownToLevel")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET失败级别
--
-- @param failedDownToLevel 失败级别
--]]
function PropertyDictionary:set_failedDownToLevel(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "failedDownToLevel", value)
end
--[[
-- GET强化等级
--
-- @return 强化等级
--]]
function PropertyDictionary:get_strengtheningLevel(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "strengtheningLevel")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET强化等级
--
-- @param strengtheningLevel 强化等级
--]]
function PropertyDictionary:set_strengtheningLevel(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "strengtheningLevel", value)
end
--[[
-- GET是否可分解
--
-- @return 是否可分解
--]]
function PropertyDictionary:get_isResolve(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isResolve")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET是否可分解
--
-- @param isResolve 是否可分解
--]]
function PropertyDictionary:set_isResolve(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isResolve", value)
end
--[[
-- GET弹出界面id
--
-- @return 弹出界面id
--]]
function PropertyDictionary:get_dialogId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "dialogId")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET弹出界面id
--
-- @param dialogId 弹出界面id
--]]
function PropertyDictionary:set_dialogId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "dialogId", value)
end
--[[
-- GET勋章
--
-- @return 勋章
--]]
function PropertyDictionary:get_exMedal(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "exMedal")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET勋章
--
-- @param exMedal 勋章
--]]
function PropertyDictionary:set_exMedal(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "exMedal", value)
end
--[[
-- GET需求成就点
--
-- @return 需求成就点
--]]
function PropertyDictionary:get_needAchieve(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "needAchieve")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET需求成就点
--
-- @param needAchieve 需求成就点
--]]
function PropertyDictionary:set_needAchieve(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "needAchieve", value)
end
--[[
-- GET洗练次数
--
-- @return 洗练次数
--]]
function PropertyDictionary:get_washCount(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "washCount")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET洗练次数
--
-- @param washCount 洗练次数
--]]
function PropertyDictionary:set_washCount(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "washCount", value)
end
--[[
-- GET强化次数
--
-- @return 强化次数
--]]
function PropertyDictionary:get_strengTheningCount(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "strengTheningCount")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET强化次数
--
-- @param strengTheningCount 强化次数
--]]
function PropertyDictionary:set_strengTheningCount(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "strengTheningCount", value)
end
--[[
-- GET掉落图标Id
--
-- @return 掉落图标Id
--]]
function PropertyDictionary:get_smallIconId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "smallIconId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET掉落图标Id
--
-- @param smallIconId 掉落图标Id
--]]
function PropertyDictionary:set_smallIconId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "smallIconId", value)
end
--[[
-- GET勋章下一级别refId
--
-- @return 勋章下一级别refId
--]]
function PropertyDictionary:get_nextMedal(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "nextMedal")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET勋章下一级别refId
--
-- @param nextMedal 勋章下一级别refId
--]]
function PropertyDictionary:set_nextMedal(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "nextMedal", value)
end
--[[
-- GET爵位名称
--
-- @return 爵位名称
--]]
function PropertyDictionary:get_knightName(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "knightName")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET爵位名称
--
-- @param knightName 爵位名称
--]]
function PropertyDictionary:set_knightName(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "knightName", value)
end
--[[
-- GET批量使用
--
-- @return 批量使用
--]]
function PropertyDictionary:get_canBatchUse(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "canBatchUse")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET批量使用
--
-- @param canBatchUse 批量使用
--]]
function PropertyDictionary:set_canBatchUse(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "canBatchUse", value)
end
--[[
-- GET道具组
--
-- @return 道具组
--]]
function PropertyDictionary:get_itemGroup(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "itemGroup")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET道具组
--
-- @param itemGroup 道具组
--]]
function PropertyDictionary:set_itemGroup(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "itemGroup", value)
end
--[[
-- GET角色面板的模型id
--
-- @return 角色面板的模型id
--]]
function PropertyDictionary:get_roleModelId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "roleModelId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET角色面板的模型id
--
-- @param roleModelId 角色面板的模型id
--]]
function PropertyDictionary:set_roleModelId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "roleModelId", value)
end
--[[
-- GET穿戴爵位
--
-- @return 穿戴爵位
--]]
function PropertyDictionary:get_equipKnight(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "equipKnight")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET穿戴爵位
--
-- @param equipKnight 穿戴爵位
--]]
function PropertyDictionary:set_equipKnight(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "equipKnight", value)
end
--[[
-- GET技能组Id
--
-- @return 技能组Id
--]]
function PropertyDictionary:get_skillGroupId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillGroupId")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能组Id
--
-- @param skillGroupId 技能组Id
--]]
function PropertyDictionary:set_skillGroupId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillGroupId", value)
end
--[[
-- GET技能攻击类型
--
-- @return 技能攻击类型
--]]
function PropertyDictionary:get_skillAtkType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillAtkType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能攻击类型
--
-- @param skillAtkType 技能攻击类型
--]]
function PropertyDictionary:set_skillAtkType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillAtkType", value)
end
--[[
-- GET技能类型
--
-- @return 技能类型
--]]
function PropertyDictionary:get_skillType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能类型
--
-- @param skillType 技能类型
--]]
function PropertyDictionary:set_skillType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillType", value)
end
--[[
-- GET技能瞄准类型
--
-- @return 技能瞄准类型
--]]
function PropertyDictionary:get_skillAimType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillAimType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能瞄准类型
--
-- @param skillAimType 技能瞄准类型
--]]
function PropertyDictionary:set_skillAimType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillAimType", value)
end
--[[
-- GET技能使用目标
--
-- @return 技能使用目标
--]]
function PropertyDictionary:get_skillTargetType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillTargetType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能使用目标
--
-- @param skillTargetType 技能使用目标
--]]
function PropertyDictionary:set_skillTargetType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillTargetType", value)
end
--[[
-- GET技能学习等级
--
-- @return 技能学习等级
--]]
function PropertyDictionary:get_skillLearnLevel(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillLearnLevel")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能学习等级
--
-- @param skillLearnLevel 技能学习等级
--]]
function PropertyDictionary:set_skillLearnLevel(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillLearnLevel", value)
end
--[[
-- GET技能学习类型
--
-- @return 技能学习类型
--]]
function PropertyDictionary:get_skillLearnType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillLearnType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能学习类型
--
-- @param skillLearnType 技能学习类型
--]]
function PropertyDictionary:set_skillLearnType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillLearnType", value)
end
--[[
-- GET技能熟练度
--
-- @return 技能熟练度
--]]
function PropertyDictionary:get_skillExp(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillExp")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能熟练度
--
-- @param skillExp 技能熟练度
--]]
function PropertyDictionary:set_skillExp(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillExp", value)
end
--[[
-- GET技能最大熟练度
--
-- @return 技能最大熟练度
--]]
function PropertyDictionary:get_skillMaxExp(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillMaxExp")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能最大熟练度
--
-- @param skillMaxExp 技能最大熟练度
--]]
function PropertyDictionary:set_skillMaxExp(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillMaxExp", value)
end
--[[
-- GET技能击中动画
--
-- @return 技能击中动画
--]]
function PropertyDictionary:get_skillHitAni(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillHitAni")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能击中动画
--
-- @param skillHitAni 技能击中动画
--]]
function PropertyDictionary:set_skillHitAni(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillHitAni", value)
end
--[[
-- GET技能暴击动画
--
-- @return 技能暴击动画
--]]
function PropertyDictionary:get_skillCritAni(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillCritAni")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能暴击动画
--
-- @param skillCritAni 技能暴击动画
--]]
function PropertyDictionary:set_skillCritAni(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillCritAni", value)
end
--[[
-- GET技能动作动画
--
-- @return 技能动作动画
--]]
function PropertyDictionary:get_skillActionAni(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillActionAni")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能动作动画
--
-- @param skillActionAni 技能动作动画
--]]
function PropertyDictionary:set_skillActionAni(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillActionAni", value)
end
--[[
-- GET技能等级
--
-- @return 技能等级
--]]
function PropertyDictionary:get_skillLevel(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillLevel")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能等级
--
-- @param skillLevel 技能等级
--]]
function PropertyDictionary:set_skillLevel(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillLevel", value)
end
--[[
-- GET技能升级熟练度
--
-- @return 技能升级熟练度
--]]
function PropertyDictionary:get_skillUpperExp(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillUpperExp")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能升级熟练度
--
-- @param skillUpperExp 技能升级熟练度
--]]
function PropertyDictionary:set_skillUpperExp(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillUpperExp", value)
end
--[[
-- GET技能动画
--
-- @return 技能动画
--]]
function PropertyDictionary:get_skillAni(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillAni")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能动画
--
-- @param skillAni 技能动画
--]]
function PropertyDictionary:set_skillAni(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillAni", value)
end
--[[
-- GET技能函数
--
-- @return 技能函数
--]]
function PropertyDictionary:get_skillFunction(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillFunction")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET技能函数
--
-- @param skillFunction 技能函数
--]]
function PropertyDictionary:set_skillFunction(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillFunction", value)
end
--[[
-- GET技能参数
--
-- @return 技能参数
--]]
function PropertyDictionary:get_skillParameters(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillParameters")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET技能参数
--
-- @param skillParameters 技能参数
--]]
function PropertyDictionary:set_skillParameters(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillParameters", value)
end
--[[
-- GET技能的引用编号
--
-- @return 技能的引用编号
--]]
function PropertyDictionary:get_skillRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET技能的引用编号
--
-- @param skillRefId 技能的引用编号
--]]
function PropertyDictionary:set_skillRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillRefId", value)
end
--[[
-- GET技能释放范围
--
-- @return 技能释放范围
--]]
function PropertyDictionary:get_skillRange(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillRange")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能释放范围
--
-- @param skillRange 技能释放范围
--]]
function PropertyDictionary:set_skillRange(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillRange", value)
end
--[[
-- GET技能施法者动作
--
-- @return 技能施法者动作
--]]
function PropertyDictionary:get_skillCasterAni(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillCasterAni")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能施法者动作
--
-- @param skillCasterAni 技能施法者动作
--]]
function PropertyDictionary:set_skillCasterAni(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillCasterAni", value)
end
--[[
-- GET快捷技能
--
-- @return 快捷技能
--]]
function PropertyDictionary:get_quickSkill(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "quickSkill")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET快捷技能
--
-- @param quickSkill 快捷技能
--]]
function PropertyDictionary:set_quickSkill(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "quickSkill", value)
end
--[[
-- GET技能伤害
--
-- @return 技能伤害
--]]
function PropertyDictionary:get_skillDamage(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillDamage")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能伤害
--
-- @param skillDamage 技能伤害
--]]
function PropertyDictionary:set_skillDamage(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillDamage", value)
end
--[[
-- GET技能伤害百分比
--
-- @return 技能伤害百分比
--]]
function PropertyDictionary:get_skillDamageRate(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillDamageRate")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能伤害百分比
--
-- @param skillDamageRate 技能伤害百分比
--]]
function PropertyDictionary:set_skillDamageRate(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillDamageRate", value)
end
--[[
-- GET技能伤害几率百分比
--
-- @return 技能伤害几率百分比
--]]
function PropertyDictionary:get_skillDamageChance(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillDamageChance")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能伤害几率百分比
--
-- @param skillDamageChance 技能伤害几率百分比
--]]
function PropertyDictionary:set_skillDamageChance(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillDamageChance", value)
end
--[[
-- GET技能伤害百分比最小值
--
-- @return 技能伤害百分比最小值
--]]
function PropertyDictionary:get_skillDamageRateMin(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillDamageRateMin")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能伤害百分比最小值
--
-- @param skillDamageRateMin 技能伤害百分比最小值
--]]
function PropertyDictionary:set_skillDamageRateMin(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillDamageRateMin", value)
end
--[[
-- GET技能伤害百分比最大值
--
-- @return 技能伤害百分比最大值
--]]
function PropertyDictionary:get_skillDamageRateMax(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillDamageRateMax")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能伤害百分比最大值
--
-- @param skillDamageRateMax 技能伤害百分比最大值
--]]
function PropertyDictionary:set_skillDamageRateMax(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillDamageRateMax", value)
end
--[[
-- GET向前移动格子数
--
-- @return 向前移动格子数
--]]
function PropertyDictionary:get_moveGridForward(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "moveGridForward")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET向前移动格子数
--
-- @param moveGridForward 向前移动格子数
--]]
function PropertyDictionary:set_moveGridForward(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "moveGridForward", value)
end
--[[
-- GET向后移动格子数
--
-- @return 向后移动格子数
--]]
function PropertyDictionary:get_moveGridBackward(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "moveGridBackward")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET向后移动格子数
--
-- @param moveGridBackward 向后移动格子数
--]]
function PropertyDictionary:set_moveGridBackward(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "moveGridBackward", value)
end
--[[
-- GETbuff组Id
--
-- @return buff组Id
--]]
function PropertyDictionary:get_buffGroupId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "buffGroupId")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SETbuff组Id
--
-- @param buffGroupId buff组Id
--]]
function PropertyDictionary:set_buffGroupId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "buffGroupId", value)
end
--[[
-- GETbuff组权重
--
-- @return buff组权重
--]]
function PropertyDictionary:get_weightOfGroup(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "weightOfGroup")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SETbuff组权重
--
-- @param weightOfGroup buff组权重
--]]
function PropertyDictionary:set_weightOfGroup(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "weightOfGroup", value)
end
--[[
-- GETbuff组附加规则
--
-- @return buff组附加规则
--]]
function PropertyDictionary:get_attachGorupRuleType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "attachGorupRuleType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SETbuff组附加规则
--
-- @param attachGorupRuleType buff组附加规则
--]]
function PropertyDictionary:set_attachGorupRuleType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "attachGorupRuleType", value)
end
--[[
-- GETbuff组重复叠加规则
--
-- @return buff组重复叠加规则
--]]
function PropertyDictionary:get_attachRepeatRuleType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "attachRepeatRuleType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SETbuff组重复叠加规则
--
-- @param attachRepeatRuleType buff组重复叠加规则
--]]
function PropertyDictionary:set_attachRepeatRuleType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "attachRepeatRuleType", value)
end
--[[
-- GET持续类型
--
-- @return 持续类型
--]]
function PropertyDictionary:get_durationType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "durationType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET持续类型
--
-- @param durationType 持续类型
--]]
function PropertyDictionary:set_durationType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "durationType", value)
end
--[[
-- GET是否是周期效果buff
--
-- @return 是否是周期效果buff
--]]
function PropertyDictionary:get_isPeriodAffectBuff(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isPeriodAffectBuff")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET是否是周期效果buff
--
-- @param isPeriodAffectBuff 是否是周期效果buff
--]]
function PropertyDictionary:set_isPeriodAffectBuff(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isPeriodAffectBuff", value)
end
--[[
-- GET周期时间
--
-- @return 周期时间
--]]
function PropertyDictionary:get_periodAffectTime(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "periodAffectTime")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET周期时间
--
-- @param periodAffectTime 周期时间
--]]
function PropertyDictionary:set_periodAffectTime(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "periodAffectTime", value)
end
--[[
-- GETbuff是否需要保存
--
-- @return buff是否需要保存
--]]
function PropertyDictionary:get_isNeedSaveBuff(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isNeedSaveBuff")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SETbuff是否需要保存
--
-- @param isNeedSaveBuff buff是否需要保存
--]]
function PropertyDictionary:set_isNeedSaveBuff(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isNeedSaveBuff", value)
end
--[[
-- GET死亡是否清除
--
-- @return 死亡是否清除
--]]
function PropertyDictionary:get_isClearOnDeadBuff(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isClearOnDeadBuff")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET死亡是否清除
--
-- @param isClearOnDeadBuff 死亡是否清除
--]]
function PropertyDictionary:set_isClearOnDeadBuff(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isClearOnDeadBuff", value)
end
--[[
-- GET技能系数
--
-- @return 技能系数
--]]
function PropertyDictionary:get_skillCo(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillCo")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能系数
--
-- @param skillCo 技能系数
--]]
function PropertyDictionary:set_skillCo(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillCo", value)
end
--[[
-- GET是否是有益buff
--
-- @return 是否是有益buff
--]]
function PropertyDictionary:get_isPositiveBuff(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isPositiveBuff")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET是否是有益buff
--
-- @param isPositiveBuff 是否是有益buff
--]]
function PropertyDictionary:set_isPositiveBuff(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isPositiveBuff", value)
end
--[[
-- GETbuffRefId
--
-- @return buffRefId
--]]
function PropertyDictionary:get_buffRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "buffRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SETbuffRefId
--
-- @param buffRefId buffRefId
--]]
function PropertyDictionary:set_buffRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "buffRefId", value)
end
--[[
-- GETbuff动画Id
--
-- @return buff动画Id
--]]
function PropertyDictionary:get_buffAni(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "buffAni")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SETbuff动画Id
--
-- @param buffAni buff动画Id
--]]
function PropertyDictionary:set_buffAni(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "buffAni", value)
end
--[[
-- GETbuff重复叠加次数
--
-- @return buff重复叠加次数
--]]
function PropertyDictionary:get_attachRepeatCount(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "attachRepeatCount")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SETbuff重复叠加次数
--
-- @param attachRepeatCount buff重复叠加次数
--]]
function PropertyDictionary:set_attachRepeatCount(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "attachRepeatCount", value)
end
--[[
-- GET技能伤害比率1
--
-- @return 技能伤害比率1
--]]
function PropertyDictionary:get_skillDamageRate1(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillDamageRate1")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能伤害比率1
--
-- @param skillDamageRate1 技能伤害比率1
--]]
function PropertyDictionary:set_skillDamageRate1(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillDamageRate1", value)
end
--[[
-- GET技能伤害比率2
--
-- @return 技能伤害比率2
--]]
function PropertyDictionary:get_skillDamageRate2(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillDamageRate2")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能伤害比率2
--
-- @param skillDamageRate2 技能伤害比率2
--]]
function PropertyDictionary:set_skillDamageRate2(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillDamageRate2", value)
end
--[[
-- GETbuff来源
--
-- @return buff来源
--]]
function PropertyDictionary:get_buffSourece(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "buffSourece")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SETbuff来源
--
-- @param buffSourece buff来源
--]]
function PropertyDictionary:set_buffSourece(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "buffSourece", value)
end
--[[
-- GET是否是改变战斗属性值得buff
--
-- @return 是否是改变战斗属性值得buff
--]]
function PropertyDictionary:get_isChangeFightValueBuff(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isChangeFightValueBuff")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET是否是改变战斗属性值得buff
--
-- @param isChangeFightValueBuff 是否是改变战斗属性值得buff
--]]
function PropertyDictionary:set_isChangeFightValueBuff(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isChangeFightValueBuff", value)
end
--[[
-- GET技能CD时间
--
-- @return 技能CD时间
--]]
function PropertyDictionary:get_skillCDTime(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "skillCDTime")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET技能CD时间
--
-- @param skillCDTime 技能CD时间
--]]
function PropertyDictionary:set_skillCDTime(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "skillCDTime", value)
end
--[[
-- GET宽
--
-- @return 宽
--]]
function PropertyDictionary:get_width(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "width")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET宽
--
-- @param width 宽
--]]
function PropertyDictionary:set_width(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "width", value)
end
--[[
-- GET高
--
-- @return 高
--]]
function PropertyDictionary:get_height(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "height")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET高
--
-- @param height 高
--]]
function PropertyDictionary:set_height(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "height", value)
end
--[[
-- GET格子宽
--
-- @return 格子宽
--]]
function PropertyDictionary:get_girdWidth(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "girdWidth")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET格子宽
--
-- @param girdWidth 格子宽
--]]
function PropertyDictionary:set_girdWidth(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "girdWidth", value)
end
--[[
-- GET格子高
--
-- @return 格子高
--]]
function PropertyDictionary:get_gridHeight(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "gridHeight")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET格子高
--
-- @param gridHeight 格子高
--]]
function PropertyDictionary:set_gridHeight(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "gridHeight", value)
end
--[[
-- GETx坐标位置
--
-- @return x坐标位置
--]]
function PropertyDictionary:get_positionX(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "positionX")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SETx坐标位置
--
-- @param positionX x坐标位置
--]]
function PropertyDictionary:set_positionX(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "positionX", value)
end
--[[
-- GETy坐标位置
--
-- @return y坐标位置
--]]
function PropertyDictionary:get_positionY(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "positionY")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SETy坐标位置
--
-- @param positionY y坐标位置
--]]
function PropertyDictionary:set_positionY(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "positionY", value)
end
--[[
-- GET音乐Id
--
-- @return 音乐Id
--]]
function PropertyDictionary:get_musicId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "musicId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET音乐Id
--
-- @param musicId 音乐Id
--]]
function PropertyDictionary:set_musicId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "musicId", value)
end
--[[
-- GET场景对立状态
--
-- @return 场景对立状态
--]]
function PropertyDictionary:get_opposeState(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "opposeState")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET场景对立状态
--
-- @param opposeState 场景对立状态
--]]
function PropertyDictionary:set_opposeState(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "opposeState", value)
end
--[[
-- GET开放等级
--
-- @return 开放等级
--]]
function PropertyDictionary:get_openLevel(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "openLevel")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET开放等级
--
-- @param openLevel 开放等级
--]]
function PropertyDictionary:set_openLevel(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "openLevel", value)
end
--[[
-- GET开放时间
--
-- @return 开放时间
--]]
function PropertyDictionary:get_openTime(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "openTime")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET开放时间
--
-- @param openTime 开放时间
--]]
function PropertyDictionary:set_openTime(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "openTime", value)
end
--[[
-- GET开放任务
--
-- @return 开放任务
--]]
function PropertyDictionary:get_openQuest(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "openQuest")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET开放任务
--
-- @param openQuest 开放任务
--]]
function PropertyDictionary:set_openQuest(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "openQuest", value)
end
--[[
-- GET场景引用编号
--
-- @return 场景引用编号
--]]
function PropertyDictionary:get_sceneRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "sceneRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET场景引用编号
--
-- @param sceneRefId 场景引用编号
--]]
function PropertyDictionary:set_sceneRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "sceneRefId", value)
end
--[[
-- GET怪物refId
--
-- @return 怪物refId
--]]
function PropertyDictionary:get_monsterRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "monsterRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET怪物refId
--
-- @param monsterRefId 怪物refId
--]]
function PropertyDictionary:set_monsterRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "monsterRefId", value)
end
--[[
-- GET怪物刷新规则类型
--
-- @return 怪物刷新规则类型
--]]
function PropertyDictionary:get_refreshType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "refreshType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET怪物刷新规则类型
--
-- @param refreshType 怪物刷新规则类型
--]]
function PropertyDictionary:set_refreshType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "refreshType", value)
end
--[[
-- GET怪物刷新规则类型具体数据
--
-- @return 怪物刷新规则类型具体数据
--]]
function PropertyDictionary:get_refreshTypeData(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "refreshTypeData")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET怪物刷新规则类型具体数据
--
-- @param refreshTypeData 怪物刷新规则类型具体数据
--]]
function PropertyDictionary:set_refreshTypeData(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "refreshTypeData", value)
end
--[[
-- GET刷新数量
--
-- @return 刷新数量
--]]
function PropertyDictionary:get_refreshCount(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "refreshCount")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET刷新数量
--
-- @param refreshCount 刷新数量
--]]
function PropertyDictionary:set_refreshCount(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "refreshCount", value)
end
--[[
-- GET刷新延迟时间
--
-- @return 刷新延迟时间
--]]
function PropertyDictionary:get_refreshDelayTime(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "refreshDelayTime")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET刷新延迟时间
--
-- @param refreshDelayTime 刷新延迟时间
--]]
function PropertyDictionary:set_refreshDelayTime(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "refreshDelayTime", value)
end
--[[
-- GET出生区类型
--
-- @return 出生区类型
--]]
function PropertyDictionary:get_birthRegionType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "birthRegionType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET出生区类型
--
-- @param birthRegionType 出生区类型
--]]
function PropertyDictionary:set_birthRegionType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "birthRegionType", value)
end
--[[
-- GET挂机点
--
-- @return 挂机点
--]]
function PropertyDictionary:get_handupPoint(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "handupPoint")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET挂机点
--
-- @param handupPoint 挂机点
--]]
function PropertyDictionary:set_handupPoint(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "handupPoint", value)
end
--[[
-- GET玩家之前的场景
--
-- @return 玩家之前的场景
--]]
function PropertyDictionary:get_beforeSceneRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "beforeSceneRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET玩家之前的场景
--
-- @param beforeSceneRefId 玩家之前的场景
--]]
function PropertyDictionary:set_beforeSceneRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "beforeSceneRefId", value)
end
--[[
-- GET玩家之前x坐标
--
-- @return 玩家之前x坐标
--]]
function PropertyDictionary:get_beforeX(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "beforeX")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET玩家之前x坐标
--
-- @param beforeX 玩家之前x坐标
--]]
function PropertyDictionary:set_beforeX(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "beforeX", value)
end
--[[
-- GET玩家之前y坐标
--
-- @return 玩家之前y坐标
--]]
function PropertyDictionary:get_beforeY(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "beforeY")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET玩家之前y坐标
--
-- @param beforeY 玩家之前y坐标
--]]
function PropertyDictionary:set_beforeY(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "beforeY", value)
end
--[[
-- GET归属玩家ID
--
-- @return 归属玩家ID
--]]
function PropertyDictionary:get_ownerId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "ownerId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET归属玩家ID
--
-- @param ownerId 归属玩家ID
--]]
function PropertyDictionary:set_ownerId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "ownerId", value)
end
--[[
-- GET离线背包状态
--
-- @return 离线背包状态
--]]
function PropertyDictionary:get_offlineBagState(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "offlineBagState")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET离线背包状态
--
-- @param offlineBagState 离线背包状态
--]]
function PropertyDictionary:set_offlineBagState(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "offlineBagState", value)
end
--[[
-- GET玩家在线天数
--
-- @return 玩家在线天数
--]]
function PropertyDictionary:get_playerOnlineDays(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "playerOnlineDays")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET玩家在线天数
--
-- @param playerOnlineDays 玩家在线天数
--]]
function PropertyDictionary:set_playerOnlineDays(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "playerOnlineDays", value)
end
--[[
-- GET玩家登陆次数
--
-- @return 玩家登陆次数
--]]
function PropertyDictionary:get_playerLoginTimes(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "playerLoginTimes")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET玩家登陆次数
--
-- @param playerLoginTimes 玩家登陆次数
--]]
function PropertyDictionary:set_playerLoginTimes(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "playerLoginTimes", value)
end
--[[
-- GET刷新间隔时间
--
-- @return 刷新间隔时间
--]]
function PropertyDictionary:get_refreshTime(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "refreshTime")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET刷新间隔时间
--
-- @param refreshTime 刷新间隔时间
--]]
function PropertyDictionary:set_refreshTime(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "refreshTime", value)
end
--[[
-- GET阶级
--
-- @return 阶级
--]]
function PropertyDictionary:get_stageLevel(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "stageLevel")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET阶级
--
-- @param stageLevel 阶级
--]]
function PropertyDictionary:set_stageLevel(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "stageLevel", value)
end
--[[
-- GET星级
--
-- @return 星级
--]]
function PropertyDictionary:get_startLevel(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "startLevel")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET星级
--
-- @param startLevel 星级
--]]
function PropertyDictionary:set_startLevel(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "startLevel", value)
end
--[[
-- GET上级编号
--
-- @return 上级编号
--]]
function PropertyDictionary:get_ridePreRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "ridePreRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET上级编号
--
-- @param ridePreRefId 上级编号
--]]
function PropertyDictionary:set_ridePreRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "ridePreRefId", value)
end
--[[
-- GET下级编号
--
-- @return 下级编号
--]]
function PropertyDictionary:get_rideNextRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "rideNextRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET下级编号
--
-- @param rideNextRefId 下级编号
--]]
function PropertyDictionary:set_rideNextRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "rideNextRefId", value)
end
--[[
-- GET坐骑丹最大消耗
--
-- @return 坐骑丹最大消耗
--]]
function PropertyDictionary:get_rideMedicineMaxConsume(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "rideMedicineMaxConsume")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET坐骑丹最大消耗
--
-- @param rideMedicineMaxConsume 坐骑丹最大消耗
--]]
function PropertyDictionary:set_rideMedicineMaxConsume(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "rideMedicineMaxConsume", value)
end
--[[
-- GET升级资源消耗
--
-- @return 升级资源消耗
--]]
function PropertyDictionary:get_rideUpgradeSrcConsume(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "rideUpgradeSrcConsume")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET升级资源消耗
--
-- @param rideUpgradeSrcConsume 升级资源消耗
--]]
function PropertyDictionary:set_rideUpgradeSrcConsume(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "rideUpgradeSrcConsume", value)
end
--[[
-- GET翅膀等级
--
-- @return 翅膀等级
--]]
function PropertyDictionary:get_wingLevel(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "wingLevel")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET翅膀等级
--
-- @param wingLevel 翅膀等级
--]]
function PropertyDictionary:set_wingLevel(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "wingLevel", value)
end
--[[
-- GET坐骑状态
--
-- @return 坐骑状态
--]]
function PropertyDictionary:get_rideState(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "rideState")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET坐骑状态
--
-- @param rideState 坐骑状态
--]]
function PropertyDictionary:set_rideState(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "rideState", value)
end
--[[
-- GET翅膀上级编号
--
-- @return 翅膀上级编号
--]]
function PropertyDictionary:get_wingPreRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "wingPreRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET翅膀上级编号
--
-- @param wingPreRefId 翅膀上级编号
--]]
function PropertyDictionary:set_wingPreRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "wingPreRefId", value)
end
--[[
-- GET翅膀下级编号
--
-- @return 翅膀下级编号
--]]
function PropertyDictionary:get_wingNextRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "wingNextRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET翅膀下级编号
--
-- @param wingNextRefId 翅膀下级编号
--]]
function PropertyDictionary:set_wingNextRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "wingNextRefId", value)
end
--[[
-- GET法宝等级
--
-- @return 法宝等级
--]]
function PropertyDictionary:get_talisManLevel(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "talisManLevel")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET法宝等级
--
-- @param talisManLevel 法宝等级
--]]
function PropertyDictionary:set_talisManLevel(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "talisManLevel", value)
end
--[[
-- GET法宝refId
--
-- @return 法宝refId
--]]
function PropertyDictionary:get_talisRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "talisRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET法宝refId
--
-- @param talisRefId 法宝refId
--]]
function PropertyDictionary:set_talisRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "talisRefId", value)
end
--[[
-- GET法宝类型
--
-- @return 法宝类型
--]]
function PropertyDictionary:get_tailsmanType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "tailsmanType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET法宝类型
--
-- @param tailsmanType 法宝类型
--]]
function PropertyDictionary:set_tailsmanType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "tailsmanType", value)
end
--[[
-- GET等级
--
-- @return 等级
--]]
function PropertyDictionary:get_level(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "level")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET等级
--
-- @param level 等级
--]]
function PropertyDictionary:set_level(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "level", value)
end
--[[
-- GET经验
--
-- @return 经验
--]]
function PropertyDictionary:get_exp(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "exp")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET经验
--
-- @param exp 经验
--]]
function PropertyDictionary:set_exp(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "exp", value)
end
--[[
-- GET性别
--
-- @return 性别
--]]
function PropertyDictionary:get_gender(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "gender")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET性别
--
-- @param gender 性别
--]]
function PropertyDictionary:set_gender(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "gender", value)
end
--[[
-- GET种类
--
-- @return 种类
--]]
function PropertyDictionary:get_kind(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "kind")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET种类
--
-- @param kind 种类
--]]
function PropertyDictionary:set_kind(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "kind", value)
end
--[[
-- GET年龄
--
-- @return 年龄
--]]
function PropertyDictionary:get_age(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "age")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET年龄
--
-- @param age 年龄
--]]
function PropertyDictionary:set_age(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "age", value)
end
--[[
-- GET金币
--
-- @return 金币
--]]
function PropertyDictionary:get_gold(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "gold")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET金币
--
-- @param gold 金币
--]]
function PropertyDictionary:set_gold(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "gold", value)
end
--[[
-- GET绑定金
--
-- @return 绑定金
--]]
function PropertyDictionary:get_bindedGold(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "bindedGold")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET绑定金
--
-- @param bindedGold 绑定金
--]]
function PropertyDictionary:set_bindedGold(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "bindedGold", value)
end
--[[
-- GET非绑定金
--
-- @return 非绑定金
--]]
function PropertyDictionary:get_unbindedGold(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "unbindedGold")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET非绑定金
--
-- @param unbindedGold 非绑定金
--]]
function PropertyDictionary:set_unbindedGold(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "unbindedGold", value)
end
--[[
-- GET铜币
--
-- @return 铜币
--]]
function PropertyDictionary:get_copper(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "copper")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET铜币
--
-- @param copper 铜币
--]]
function PropertyDictionary:set_copper(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "copper", value)
end
--[[
-- GET绑定铜币
--
-- @return 绑定铜币
--]]
function PropertyDictionary:get_bindedCopper(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "bindedCopper")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET绑定铜币
--
-- @param bindedCopper 绑定铜币
--]]
function PropertyDictionary:set_bindedCopper(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "bindedCopper", value)
end
--[[
-- GET非绑定铜币
--
-- @return 非绑定铜币
--]]
function PropertyDictionary:get_unbindedCopper(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "unbindedCopper")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET非绑定铜币
--
-- @param unbindedCopper 非绑定铜币
--]]
function PropertyDictionary:set_unbindedCopper(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "unbindedCopper", value)
end
--[[
-- GET礼券金
--
-- @return 礼券金
--]]
function PropertyDictionary:get_giftGold(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "giftGold")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET礼券金
--
-- @param giftGold 礼券金
--]]
function PropertyDictionary:set_giftGold(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "giftGold", value)
end
--[[
-- GETCD时间
--
-- @return CD时间
--]]
function PropertyDictionary:get_CDTime(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "CDTime")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SETCD时间
--
-- @param CDTime CD时间
--]]
function PropertyDictionary:set_CDTime(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "CDTime", value)
end
--[[
-- GET图标Id
--
-- @return 图标Id
--]]
function PropertyDictionary:get_iconId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "iconId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET图标Id
--
-- @param iconId 图标Id
--]]
function PropertyDictionary:set_iconId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "iconId", value)
end
--[[
-- GET模型Id
--
-- @return 模型Id
--]]
function PropertyDictionary:get_modelId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "modelId")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET模型Id
--
-- @param modelId 模型Id
--]]
function PropertyDictionary:set_modelId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "modelId", value)
end
--[[
-- GET保持距离
--
-- @return 保持距离
--]]
function PropertyDictionary:get_keepSpace(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "keepSpace")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET保持距离
--
-- @param keepSpace 保持距离
--]]
function PropertyDictionary:set_keepSpace(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "keepSpace", value)
end
--[[
-- GET品质
--
-- @return 品质
--]]
function PropertyDictionary:get_quality(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "quality")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET品质
--
-- @param quality 品质
--]]
function PropertyDictionary:set_quality(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "quality", value)
end
--[[
-- GET爵位
--
-- @return 爵位
--]]
function PropertyDictionary:get_knight(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "knight")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET爵位
--
-- @param knight 爵位
--]]
function PropertyDictionary:set_knight(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "knight", value)
end
--[[
-- GET职业Id
--
-- @return 职业Id
--]]
function PropertyDictionary:get_professionId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "professionId")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET职业Id
--
-- @param professionId 职业Id
--]]
function PropertyDictionary:set_professionId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "professionId", value)
end
--[[
-- GET最大经验
--
-- @return 最大经验
--]]
function PropertyDictionary:get_maxExp(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "maxExp")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET最大经验
--
-- @param maxExp 最大经验
--]]
function PropertyDictionary:set_maxExp(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "maxExp", value)
end
--[[
-- GET概率
--
-- @return 概率
--]]
function PropertyDictionary:get_probability(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "probability")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET概率
--
-- @param probability 概率
--]]
function PropertyDictionary:set_probability(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "probability", value)
end
--[[
-- GET数量
--
-- @return 数量
--]]
function PropertyDictionary:get_number(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "number")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET数量
--
-- @param number 数量
--]]
function PropertyDictionary:set_number(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "number", value)
end
--[[
-- GET公会名称
--
-- @return 公会名称
--]]
function PropertyDictionary:get_unionName(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "unionName")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET公会名称
--
-- @param unionName 公会名称
--]]
function PropertyDictionary:set_unionName(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "unionName", value)
end
--[[
-- GET人物等级
--
-- @return 人物等级
--]]
function PropertyDictionary:get_roleGrade(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "roleGrade")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET人物等级
--
-- @param roleGrade 人物等级
--]]
function PropertyDictionary:set_roleGrade(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "roleGrade", value)
end
--[[
-- GET上级编号
--
-- @return 上级编号
--]]
function PropertyDictionary:get_knightPreRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "knightPreRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET上级编号
--
-- @param knightPreRefId 上级编号
--]]
function PropertyDictionary:set_knightPreRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "knightPreRefId", value)
end
--[[
-- GET下级编号
--
-- @return 下级编号
--]]
function PropertyDictionary:get_knightNextRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "knightNextRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET下级编号
--
-- @param knightNextRefId 下级编号
--]]
function PropertyDictionary:set_knightNextRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "knightNextRefId", value)
end
--[[
-- GET任务refId
--
-- @return 任务refId
--]]
function PropertyDictionary:get_questRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "questRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET任务refId
--
-- @param questRefId 任务refId
--]]
function PropertyDictionary:set_questRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "questRefId", value)
end
--[[
-- GET天次数
--
-- @return 天次数
--]]
function PropertyDictionary:get_timesADay(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "timesADay")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET天次数
--
-- @param timesADay 天次数
--]]
function PropertyDictionary:set_timesADay(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "timesADay", value)
end
--[[
-- GET周次数
--
-- @return 周次数
--]]
function PropertyDictionary:get_timesAWeek(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "timesAWeek")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET周次数
--
-- @param timesAWeek 周次数
--]]
function PropertyDictionary:set_timesAWeek(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "timesAWeek", value)
end
--[[
-- GET副本组成
--
-- @return 副本组成
--]]
function PropertyDictionary:get_structureDetails(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "structureDetails")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET副本组成
--
-- @param structureDetails 副本组成
--]]
function PropertyDictionary:set_structureDetails(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "structureDetails", value)
end
--[[
-- GET是否组队
--
-- @return 是否组队
--]]
function PropertyDictionary:get_isTeam(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isTeam")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET是否组队
--
-- @param isTeam 是否组队
--]]
function PropertyDictionary:set_isTeam(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isTeam", value)
end
--[[
-- GET怪物组编号
--
-- @return 怪物组编号
--]]
function PropertyDictionary:get_monsterGroupRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "monsterGroupRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET怪物组编号
--
-- @param monsterGroupRefId 怪物组编号
--]]
function PropertyDictionary:set_monsterGroupRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "monsterGroupRefId", value)
end
--[[
-- GET出生条件类型
--
-- @return 出生条件类型
--]]
function PropertyDictionary:get_ariseType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "ariseType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET出生条件类型
--
-- @param ariseType 出生条件类型
--]]
function PropertyDictionary:set_ariseType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "ariseType", value)
end
--[[
-- GET重生条件类型
--
-- @return 重生条件类型
--]]
function PropertyDictionary:get_reappearType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "reappearType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET重生条件类型
--
-- @param reappearType 重生条件类型
--]]
function PropertyDictionary:set_reappearType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "reappearType", value)
end
--[[
-- GET刷新区域X坐标(左上角)
--
-- @return 刷新区域X坐标(左上角)
--]]
function PropertyDictionary:get_x_left_up(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "x_left_up")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET刷新区域X坐标(左上角)
--
-- @param x_left_up 刷新区域X坐标(左上角)
--]]
function PropertyDictionary:set_x_left_up(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "x_left_up", value)
end
--[[
-- GET刷新区域X坐标(左上角)
--
-- @return 刷新区域X坐标(左上角)
--]]
function PropertyDictionary:get_y_left_up(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "y_left_up")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET刷新区域X坐标(左上角)
--
-- @param y_left_up 刷新区域X坐标(左上角)
--]]
function PropertyDictionary:set_y_left_up(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "y_left_up", value)
end
--[[
-- GET刷新区域X坐标(右下角)
--
-- @return 刷新区域X坐标(右下角)
--]]
function PropertyDictionary:get_x_right_down(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "x_right_down")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET刷新区域X坐标(右下角)
--
-- @param x_right_down 刷新区域X坐标(右下角)
--]]
function PropertyDictionary:set_x_right_down(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "x_right_down", value)
end
--[[
-- GET刷新区域X坐标(右下角)
--
-- @return 刷新区域X坐标(右下角)
--]]
function PropertyDictionary:get_y_right_down(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "y_right_down")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET刷新区域X坐标(右下角)
--
-- @param y_right_down 刷新区域X坐标(右下角)
--]]
function PropertyDictionary:set_y_right_down(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "y_right_down", value)
end
--[[
-- GET成功完成类型
--
-- @return 成功完成类型
--]]
function PropertyDictionary:get_succeedType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "succeedType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET成功完成类型
--
-- @param succeedType 成功完成类型
--]]
function PropertyDictionary:set_succeedType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "succeedType", value)
end
--[[
-- GET持续时间
--
-- @return 持续时间
--]]
function PropertyDictionary:get_duration(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "duration")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET持续时间
--
-- @param duration 持续时间
--]]
function PropertyDictionary:set_duration(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "duration", value)
end
--[[
-- GET副本数据
--
-- @return 副本数据
--]]
function PropertyDictionary:get_gameInstanceData(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "gameInstanceData")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET副本数据
--
-- @param gameInstanceData 副本数据
--]]
function PropertyDictionary:set_gameInstanceData(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "gameInstanceData", value)
end
--[[
-- GET公会官职Id
--
-- @return 公会官职Id
--]]
function PropertyDictionary:get_unionOfficialId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "unionOfficialId")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET公会官职Id
--
-- @param unionOfficialId 公会官职Id
--]]
function PropertyDictionary:set_unionOfficialId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "unionOfficialId", value)
end
--[[
-- GET金牌
--
-- @return 金牌
--]]
function PropertyDictionary:get_goldMedal(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "goldMedal")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET金牌
--
-- @param goldMedal 金牌
--]]
function PropertyDictionary:set_goldMedal(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "goldMedal", value)
end
--[[
-- GET银牌
--
-- @return 银牌
--]]
function PropertyDictionary:get_silverMedal(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "silverMedal")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET银牌
--
-- @param silverMedal 银牌
--]]
function PropertyDictionary:set_silverMedal(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "silverMedal", value)
end
--[[
-- GET铜牌
--
-- @return 铜牌
--]]
function PropertyDictionary:get_copperMedal(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "copperMedal")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET铜牌
--
-- @param copperMedal 铜牌
--]]
function PropertyDictionary:set_copperMedal(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "copperMedal", value)
end
--[[
-- GET铁牌
--
-- @return 铁牌
--]]
function PropertyDictionary:get_ironMedal(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "ironMedal")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET铁牌
--
-- @param ironMedal 铁牌
--]]
function PropertyDictionary:set_ironMedal(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "ironMedal", value)
end
--[[
-- GET移动速度百分比
--
-- @return 移动速度百分比
--]]
function PropertyDictionary:get_moveSpeedPer(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "moveSpeedPer")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET移动速度百分比
--
-- @param moveSpeedPer 移动速度百分比
--]]
function PropertyDictionary:set_moveSpeedPer(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "moveSpeedPer", value)
end
--[[
-- GET武器模型ID
--
-- @return 武器模型ID
--]]
function PropertyDictionary:get_weaponModleId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "weaponModleId")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET武器模型ID
--
-- @param weaponModleId 武器模型ID
--]]
function PropertyDictionary:set_weaponModleId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "weaponModleId", value)
end
--[[
-- GET铠甲模型ID
--
-- @return 铠甲模型ID
--]]
function PropertyDictionary:get_armorModleId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "armorModleId")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET铠甲模型ID
--
-- @param armorModleId 铠甲模型ID
--]]
function PropertyDictionary:set_armorModleId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "armorModleId", value)
end
--[[
-- GET翅膀模型ID
--
-- @return 翅膀模型ID
--]]
function PropertyDictionary:get_wingModleId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "wingModleId")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET翅膀模型ID
--
-- @param wingModleId 翅膀模型ID
--]]
function PropertyDictionary:set_wingModleId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "wingModleId", value)
end
--[[
-- GET坐骑模型ID
--
-- @return 坐骑模型ID
--]]
function PropertyDictionary:get_mountModleId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "mountModleId")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET坐骑模型ID
--
-- @param mountModleId 坐骑模型ID
--]]
function PropertyDictionary:set_mountModleId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "mountModleId", value)
end
--[[
-- GET上次登录时间
--
-- @return 上次登录时间
--]]
function PropertyDictionary:get_lastLoginTime(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "lastLoginTime")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET上次登录时间
--
-- @param lastLoginTime 上次登录时间
--]]
function PropertyDictionary:set_lastLoginTime(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "lastLoginTime", value)
end
--[[
-- GET累计在线时间
--
-- @return 累计在线时间
--]]
function PropertyDictionary:get_onlineTime(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "onlineTime")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET累计在线时间
--
-- @param onlineTime 累计在线时间
--]]
function PropertyDictionary:set_onlineTime(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "onlineTime", value)
end
--[[
-- GET杀怪经验倍数
--
-- @return 杀怪经验倍数
--]]
function PropertyDictionary:get_expMultiple(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "expMultiple")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET杀怪经验倍数
--
-- @param expMultiple 杀怪经验倍数
--]]
function PropertyDictionary:set_expMultiple(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "expMultiple", value)
end
--[[
-- GET上次登出时间
--
-- @return 上次登出时间
--]]
function PropertyDictionary:get_lastLogoutTime(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "lastLogoutTime")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET上次登出时间
--
-- @param lastLogoutTime 上次登出时间
--]]
function PropertyDictionary:set_lastLogoutTime(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "lastLogoutTime", value)
end
--[[
-- GET登录次数
--
-- @return 登录次数
--]]
function PropertyDictionary:get_loginCount(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "loginCount")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET登录次数
--
-- @param loginCount 登录次数
--]]
function PropertyDictionary:set_loginCount(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "loginCount", value)
end
--[[
-- GET名称
--
-- @return 名称
--]]
function PropertyDictionary:get_name(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "name")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET名称
--
-- @param name 名称
--]]
function PropertyDictionary:set_name(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "name", value)
end
--[[
-- GET描述
--
-- @return 描述
--]]
function PropertyDictionary:get_description(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "description")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET描述
--
-- @param description 描述
--]]
function PropertyDictionary:set_description(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "description", value)
end
--[[
-- GET提示语
--
-- @return 提示语
--]]
function PropertyDictionary:get_tips(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "tips")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET提示语
--
-- @param tips 提示语
--]]
function PropertyDictionary:set_tips(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "tips", value)
end
--[[
-- GET简称
--
-- @return 简称
--]]
function PropertyDictionary:get_smallName(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "smallName")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET简称
--
-- @param smallName 简称
--]]
function PropertyDictionary:set_smallName(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "smallName", value)
end
--[[
-- GET集合
--
-- @return 集合
--]]
function PropertyDictionary:get_collection(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "collection")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET集合
--
-- @param collection 集合
--]]
function PropertyDictionary:set_collection(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "collection", value)
end
--[[
-- GET数据字典
--
-- @return 数据字典
--]]
function PropertyDictionary:get_dictionary(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "dictionary")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET数据字典
--
-- @param dictionary 数据字典
--]]
function PropertyDictionary:set_dictionary(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "dictionary", value)
end
--[[
-- GET是否是采集NPC
--
-- @return 是否是采集NPC
--]]
function PropertyDictionary:get_isPluckNpc(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isPluckNpc")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET是否是采集NPC
--
-- @param isPluckNpc 是否是采集NPC
--]]
function PropertyDictionary:set_isPluckNpc(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isPluckNpc", value)
end
--[[
-- GET采集物是否入包
--
-- @return 采集物是否入包
--]]
function PropertyDictionary:get_isPluckRealItem(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isPluckRealItem")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET采集物是否入包
--
-- @param isPluckRealItem 采集物是否入包
--]]
function PropertyDictionary:set_isPluckRealItem(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isPluckRealItem", value)
end
--[[
-- GET采集等级
--
-- @return 采集等级
--]]
function PropertyDictionary:get_pluckLevel(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "pluckLevel")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET采集等级
--
-- @param pluckLevel 采集等级
--]]
function PropertyDictionary:set_pluckLevel(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "pluckLevel", value)
end
--[[
-- GET采集时间
--
-- @return 采集时间
--]]
function PropertyDictionary:get_pluckTime(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "pluckTime")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET采集时间
--
-- @param pluckTime 采集时间
--]]
function PropertyDictionary:set_pluckTime(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "pluckTime", value)
end
--[[
-- GET采集模式
--
-- @return 采集模式
--]]
function PropertyDictionary:get_pluckMode(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "pluckMode")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET采集模式
--
-- @param pluckMode 采集模式
--]]
function PropertyDictionary:set_pluckMode(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "pluckMode", value)
end
--[[
-- GET采集是否消失
--
-- @return 采集是否消失
--]]
function PropertyDictionary:get_isPluckDisappear(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isPluckDisappear")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET采集是否消失
--
-- @param isPluckDisappear 采集是否消失
--]]
function PropertyDictionary:set_isPluckDisappear(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isPluckDisappear", value)
end
--[[
-- GET采集数量归属
--
-- @return 采集数量归属
--]]
function PropertyDictionary:get_pluckItemAdscription(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "pluckItemAdscription")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET采集数量归属
--
-- @param pluckItemAdscription 采集数量归属
--]]
function PropertyDictionary:set_pluckItemAdscription(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "pluckItemAdscription", value)
end
--[[
-- GET采集表现
--
-- @return 采集表现
--]]
function PropertyDictionary:get_pluckBehavior(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "pluckBehavior")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET采集表现
--
-- @param pluckBehavior 采集表现
--]]
function PropertyDictionary:set_pluckBehavior(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "pluckBehavior", value)
end
--[[
-- GET采集物消失后刷新时间
--
-- @return 采集物消失后刷新时间
--]]
function PropertyDictionary:get_pluckRefreshTime(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "pluckRefreshTime")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET采集物消失后刷新时间
--
-- @param pluckRefreshTime 采集物消失后刷新时间
--]]
function PropertyDictionary:set_pluckRefreshTime(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "pluckRefreshTime", value)
end
--[[
-- GET商店类型
--
-- @return 商店类型
--]]
function PropertyDictionary:get_storeType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "storeType")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET商店类型
--
-- @param storeType 商店类型
--]]
function PropertyDictionary:set_storeType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "storeType", value)
end
--[[
-- GET商店表格引用编号
--
-- @return 商店表格引用编号
--]]
function PropertyDictionary:get_storeTableRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "storeTableRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET商店表格引用编号
--
-- @param storeTableRefId 商店表格引用编号
--]]
function PropertyDictionary:set_storeTableRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "storeTableRefId", value)
end
--[[
-- GET商店名称
--
-- @return 商店名称
--]]
function PropertyDictionary:get_storeName(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "storeName")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET商店名称
--
-- @param storeName 商店名称
--]]
function PropertyDictionary:set_storeName(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "storeName", value)
end
--[[
-- GET商店道具限购类型
--
-- @return 商店道具限购类型
--]]
function PropertyDictionary:get_itemLimitType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "itemLimitType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET商店道具限购类型
--
-- @param itemLimitType 商店道具限购类型
--]]
function PropertyDictionary:set_itemLimitType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "itemLimitType", value)
end
--[[
-- GET商店道具限购数量
--
-- @return 商店道具限购数量
--]]
function PropertyDictionary:get_itemLimitNum(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "itemLimitNum")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET商店道具限购数量
--
-- @param itemLimitNum 商店道具限购数量
--]]
function PropertyDictionary:set_itemLimitNum(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "itemLimitNum", value)
end
--[[
-- GET商店限购时间
--
-- @return 商店限购时间
--]]
function PropertyDictionary:get_storeLimitTime(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "storeLimitTime")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET商店限购时间
--
-- @param storeLimitTime 商店限购时间
--]]
function PropertyDictionary:set_storeLimitTime(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "storeLimitTime", value)
end
--[[
-- GET商品类型
--
-- @return 商品类型
--]]
function PropertyDictionary:get_itemSellType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "itemSellType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET商品类型
--
-- @param itemSellType 商品类型
--]]
function PropertyDictionary:set_itemSellType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "itemSellType", value)
end
--[[
-- GET原价元宝
--
-- @return 原价元宝
--]]
function PropertyDictionary:get_unbindOriginalPrice(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "unbindOriginalPrice")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET原价元宝
--
-- @param unbindOriginalPrice 原价元宝
--]]
function PropertyDictionary:set_unbindOriginalPrice(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "unbindOriginalPrice", value)
end
--[[
-- GET原价绑定元宝
--
-- @return 原价绑定元宝
--]]
function PropertyDictionary:get_bindOriginalPrice(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "bindOriginalPrice")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET原价绑定元宝
--
-- @param bindOriginalPrice 原价绑定元宝
--]]
function PropertyDictionary:set_bindOriginalPrice(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "bindOriginalPrice", value)
end
--[[
-- GET是否正在采集
--
-- @return 是否正在采集
--]]
function PropertyDictionary:get_isPlucking(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isPlucking")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET是否正在采集
--
-- @param isPlucking 是否正在采集
--]]
function PropertyDictionary:set_isPlucking(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isPlucking", value)
end
--[[
-- GET采集物类型
--
-- @return 采集物类型
--]]
function PropertyDictionary:get_pluckType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "pluckType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET采集物类型
--
-- @param pluckType 采集物类型
--]]
function PropertyDictionary:set_pluckType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "pluckType", value)
end
--[[
-- GET任务类型
--
-- @return 任务类型
--]]
function PropertyDictionary:get_questType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "questType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET任务类型
--
-- @param questType 任务类型
--]]
function PropertyDictionary:set_questType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "questType", value)
end
--[[
-- GET下一个任务
--
-- @return 下一个任务
--]]
function PropertyDictionary:get_nextQuestId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "nextQuestId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET下一个任务
--
-- @param nextQuestId 下一个任务
--]]
function PropertyDictionary:set_nextQuestId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "nextQuestId", value)
end
--[[
-- GET前一个任务
--
-- @return 前一个任务
--]]
function PropertyDictionary:get_preQuestId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "preQuestId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET前一个任务
--
-- @param preQuestId 前一个任务
--]]
function PropertyDictionary:set_preQuestId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "preQuestId", value)
end
--[[
-- GET日常任务类型
--
-- @return 日常任务类型
--]]
function PropertyDictionary:get_dailyQuestType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "dailyQuestType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET日常任务类型
--
-- @param dailyQuestType 日常任务类型
--]]
function PropertyDictionary:set_dailyQuestType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "dailyQuestType", value)
end
--[[
-- GET推荐环数
--
-- @return 推荐环数
--]]
function PropertyDictionary:get_dailyProposeRing(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "dailyProposeRing")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET推荐环数
--
-- @param dailyProposeRing 推荐环数
--]]
function PropertyDictionary:set_dailyProposeRing(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "dailyProposeRing", value)
end
--[[
-- GET物品唯一Id
--
-- @return 物品唯一Id
--]]
function PropertyDictionary:get_itemId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "itemId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET物品唯一Id
--
-- @param itemId 物品唯一Id
--]]
function PropertyDictionary:set_itemId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "itemId", value)
end
--[[
-- GET总值
--
-- @return 总值
--]]
function PropertyDictionary:get_totalValue(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "totalValue")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET总值
--
-- @param totalValue 总值
--]]
function PropertyDictionary:set_totalValue(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "totalValue", value)
end
--[[
-- GET优先级
--
-- @return 优先级
--]]
function PropertyDictionary:get_priority(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "priority")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET优先级
--
-- @param priority 优先级
--]]
function PropertyDictionary:set_priority(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "priority", value)
end
--[[
-- GET模型缩放值
--
-- @return 模型缩放值
--]]
function PropertyDictionary:get_moduleScale(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "moduleScale")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET模型缩放值
--
-- @param moduleScale 模型缩放值
--]]
function PropertyDictionary:set_moduleScale(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "moduleScale", value)
end
--[[
-- GET能否进入vipBoss地图
--
-- @return 能否进入vipBoss地图
--]]
function PropertyDictionary:get_canVipBoss(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "canVipBoss")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET能否进入vipBoss地图
--
-- @param canVipBoss 能否进入vipBoss地图
--]]
function PropertyDictionary:set_canVipBoss(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "canVipBoss", value)
end
--[[
-- GET能否在我要变强界面，传送到boss界面
--
-- @return 能否在我要变强界面，传送到boss界面
--]]
function PropertyDictionary:get_canVipStrong(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "canVipStrong")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET能否在我要变强界面，传送到boss界面
--
-- @param canVipStrong 能否在我要变强界面，传送到boss界面
--]]
function PropertyDictionary:set_canVipStrong(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "canVipStrong", value)
end
--[[
-- GET使用飞鞋不消耗物品
--
-- @return 使用飞鞋不消耗物品
--]]
function PropertyDictionary:get_canShoeNoItem(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "canShoeNoItem")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET使用飞鞋不消耗物品
--
-- @param canShoeNoItem 使用飞鞋不消耗物品
--]]
function PropertyDictionary:set_canShoeNoItem(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "canShoeNoItem", value)
end
--[[
-- GETvip武器奖励等级
--
-- @return vip武器奖励等级
--]]
function PropertyDictionary:get_vipRewardLevel(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "vipRewardLevel")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SETvip武器奖励等级
--
-- @param vipRewardLevel vip武器奖励等级
--]]
function PropertyDictionary:set_vipRewardLevel(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "vipRewardLevel", value)
end
--[[
-- GETvip类型
--
-- @return vip类型
--]]
function PropertyDictionary:get_vipType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "vipType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SETvip类型
--
-- @param vipType vip类型
--]]
function PropertyDictionary:set_vipType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "vipType", value)
end
--[[
-- GET系统提示信息模板
--
-- @return 系统提示信息模板
--]]
function PropertyDictionary:get_bricks(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "bricks")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET系统提示信息模板
--
-- @param bricks 系统提示信息模板
--]]
function PropertyDictionary:set_bricks(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "bricks", value)
end
--[[
-- GET签到次数
--
-- @return 签到次数
--]]
function PropertyDictionary:get_signCount(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "signCount")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET签到次数
--
-- @param signCount 签到次数
--]]
function PropertyDictionary:set_signCount(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "signCount", value)
end
--[[
-- GET在线时间前置奖励refId
--
-- @return 在线时间前置奖励refId
--]]
function PropertyDictionary:get_onlinePreRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "onlinePreRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET在线时间前置奖励refId
--
-- @param onlinePreRefId 在线时间前置奖励refId
--]]
function PropertyDictionary:set_onlinePreRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "onlinePreRefId", value)
end
--[[
-- GET在线时间后置奖励refId
--
-- @return 在线时间后置奖励refId
--]]
function PropertyDictionary:get_onlineNextRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "onlineNextRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET在线时间后置奖励refId
--
-- @param onlineNextRefId 在线时间后置奖励refId
--]]
function PropertyDictionary:set_onlineNextRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "onlineNextRefId", value)
end
--[[
-- GET在线累计秒数
--
-- @return 在线累计秒数
--]]
function PropertyDictionary:get_onlineSecond(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "onlineSecond")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET在线累计秒数
--
-- @param onlineSecond 在线累计秒数
--]]
function PropertyDictionary:set_onlineSecond(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "onlineSecond", value)
end
--[[
-- GET获取奖励的方式
--
-- @return 获取奖励的方式
--]]
function PropertyDictionary:get_rewardImmediately(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "rewardImmediately")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET获取奖励的方式
--
-- @param rewardImmediately 获取奖励的方式
--]]
function PropertyDictionary:set_rewardImmediately(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "rewardImmediately", value)
end
--[[
-- GET坐骑前置奖励ID
--
-- @return 坐骑前置奖励ID
--]]
function PropertyDictionary:get_rideRewardPreRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "rideRewardPreRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET坐骑前置奖励ID
--
-- @param rideRewardPreRefId 坐骑前置奖励ID
--]]
function PropertyDictionary:set_rideRewardPreRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "rideRewardPreRefId", value)
end
--[[
-- GET坐骑后置奖励ID
--
-- @return 坐骑后置奖励ID
--]]
function PropertyDictionary:get_rideRewardNextRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "rideRewardNextRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET坐骑后置奖励ID
--
-- @param rideRewardNextRefId 坐骑后置奖励ID
--]]
function PropertyDictionary:set_rideRewardNextRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "rideRewardNextRefId", value)
end
--[[
-- GET翅膀前置奖励ID
--
-- @return 翅膀前置奖励ID
--]]
function PropertyDictionary:get_wingRewardPreRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "wingRewardPreRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET翅膀前置奖励ID
--
-- @param wingRewardPreRefId 翅膀前置奖励ID
--]]
function PropertyDictionary:set_wingRewardPreRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "wingRewardPreRefId", value)
end
--[[
-- GET翅膀后置奖励ID
--
-- @return 翅膀后置奖励ID
--]]
function PropertyDictionary:get_wingRewardNextRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "wingRewardNextRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET翅膀后置奖励ID
--
-- @param wingRewardNextRefId 翅膀后置奖励ID
--]]
function PropertyDictionary:set_wingRewardNextRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "wingRewardNextRefId", value)
end
--[[
-- GET法宝前置奖励ID
--
-- @return 法宝前置奖励ID
--]]
function PropertyDictionary:get_talismanRewardPreRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "talismanRewardPreRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET法宝前置奖励ID
--
-- @param talismanRewardPreRefId 法宝前置奖励ID
--]]
function PropertyDictionary:set_talismanRewardPreRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "talismanRewardPreRefId", value)
end
--[[
-- GET法宝后置奖励ID
--
-- @return 法宝后置奖励ID
--]]
function PropertyDictionary:get_talismanRewardNextRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "talismanRewardNextRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET法宝后置奖励ID
--
-- @param talismanRewardNextRefId 法宝后置奖励ID
--]]
function PropertyDictionary:set_talismanRewardNextRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "talismanRewardNextRefId", value)
end
--[[
-- GET法宝数量
--
-- @return 法宝数量
--]]
function PropertyDictionary:get_talisManNumber(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "talisManNumber")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET法宝数量
--
-- @param talisManNumber 法宝数量
--]]
function PropertyDictionary:set_talisManNumber(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "talisManNumber", value)
end
--[[
-- GET等级奖励前置ID
--
-- @return 等级奖励前置ID
--]]
function PropertyDictionary:get_levelUpRewardPreRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "levelUpRewardPreRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET等级奖励前置ID
--
-- @param levelUpRewardPreRefId 等级奖励前置ID
--]]
function PropertyDictionary:set_levelUpRewardPreRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "levelUpRewardPreRefId", value)
end
--[[
-- GET等级奖励后置ID
--
-- @return 等级奖励后置ID
--]]
function PropertyDictionary:get_levelUpRewardNextRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "levelUpRewardNextRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET等级奖励后置ID
--
-- @param levelUpRewardNextRefId 等级奖励后置ID
--]]
function PropertyDictionary:set_levelUpRewardNextRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "levelUpRewardNextRefId", value)
end
--[[
-- GET普通挖宝次数
--
-- @return 普通挖宝次数
--]]
function PropertyDictionary:get_generalDigsCount(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "generalDigsCount")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET普通挖宝次数
--
-- @param generalDigsCount 普通挖宝次数
--]]
function PropertyDictionary:set_generalDigsCount(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "generalDigsCount", value)
end
--[[
-- GET极品挖宝次数
--
-- @return 极品挖宝次数
--]]
function PropertyDictionary:get_bestDigsCount(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "bestDigsCount")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET极品挖宝次数
--
-- @param bestDigsCount 极品挖宝次数
--]]
function PropertyDictionary:set_bestDigsCount(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "bestDigsCount", value)
end
--[[
-- GET挖宝类型
--
-- @return 挖宝类型
--]]
function PropertyDictionary:get_digsType(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "digsType")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET挖宝类型
--
-- @param digsType 挖宝类型
--]]
function PropertyDictionary:set_digsType(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "digsType", value)
end
--[[
-- GET活动排序id
--
-- @return 活动排序id
--]]
function PropertyDictionary:get_activitySortId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "activitySortId")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET活动排序id
--
-- @param activitySortId 活动排序id
--]]
function PropertyDictionary:set_activitySortId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "activitySortId", value)
end
--[[
-- GET通用推送顺序号
--
-- @return 通用推送顺序号
--]]
function PropertyDictionary:get_commonNumber(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "commonNumber")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET通用推送顺序号
--
-- @param commonNumber 通用推送顺序号
--]]
function PropertyDictionary:set_commonNumber(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "commonNumber", value)
end
--[[
-- GET小R推送顺序号
--
-- @return 小R推送顺序号
--]]
function PropertyDictionary:get_littleRNumber(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "littleRNumber")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET小R推送顺序号
--
-- @param littleRNumber 小R推送顺序号
--]]
function PropertyDictionary:set_littleRNumber(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "littleRNumber", value)
end
--[[
-- GET中R推送顺序号
--
-- @return 中R推送顺序号
--]]
function PropertyDictionary:get_mediumRNumber(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "mediumRNumber")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET中R推送顺序号
--
-- @param mediumRNumber 中R推送顺序号
--]]
function PropertyDictionary:set_mediumRNumber(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "mediumRNumber", value)
end
--[[
-- GET大R推送顺序号
--
-- @return 大R推送顺序号
--]]
function PropertyDictionary:get_bigRNumber(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "bigRNumber")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET大R推送顺序号
--
-- @param bigRNumber 大R推送顺序号
--]]
function PropertyDictionary:set_bigRNumber(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "bigRNumber", value)
end
--[[
-- GET解锁顺序号
--
-- @return 解锁顺序号
--]]
function PropertyDictionary:get_openActivityNumber(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "openActivityNumber")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET解锁顺序号
--
-- @param openActivityNumber 解锁顺序号
--]]
function PropertyDictionary:set_openActivityNumber(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "openActivityNumber", value)
end
--[[
-- GET是否是王城
--
-- @return 是否是王城
--]]
function PropertyDictionary:get_isKingCity(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isKingCity")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET是否是王城
--
-- @param isKingCity 是否是王城
--]]
function PropertyDictionary:set_isKingCity(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isKingCity", value)
end
--[[
-- GET被附加buff的时候是否作pk模式检查
--
-- @return 被附加buff的时候是否作pk模式检查
--]]
function PropertyDictionary:get_isPkModelCheck(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isPkModelCheck")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET被附加buff的时候是否作pk模式检查
--
-- @param isPkModelCheck 被附加buff的时候是否作pk模式检查
--]]
function PropertyDictionary:set_isPkModelCheck(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isPkModelCheck", value)
end
--[[
-- GET杀人时增加的pk值
--
-- @return 杀人时增加的pk值
--]]
function PropertyDictionary:get_killAddPKValue(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "killAddPKValue")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET杀人时增加的pk值
--
-- @param killAddPKValue 杀人时增加的pk值
--]]
function PropertyDictionary:set_killAddPKValue(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "killAddPKValue", value)
end
--[[
-- GET攻击人时增加的pk值
--
-- @return 攻击人时增加的pk值
--]]
function PropertyDictionary:get_attackAddPkValue(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "attackAddPkValue")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET攻击人时增加的pk值
--
-- @param attackAddPkValue 攻击人时增加的pk值
--]]
function PropertyDictionary:set_attackAddPkValue(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "attackAddPkValue", value)
end
--[[
-- GET该场景下pk是否进入pk状态
--
-- @return 该场景下pk是否进入pk状态
--]]
function PropertyDictionary:get_isEnterPKState(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isEnterPKState")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET该场景下pk是否进入pk状态
--
-- @param isEnterPKState 该场景下pk是否进入pk状态
--]]
function PropertyDictionary:set_isEnterPKState(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isEnterPKState", value)
end
--[[
-- GET是否使用默认掉落
--
-- @return 是否使用默认掉落
--]]
function PropertyDictionary:get_isUseDefaultDrop(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isUseDefaultDrop")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET是否使用默认掉落
--
-- @param isUseDefaultDrop 是否使用默认掉落
--]]
function PropertyDictionary:set_isUseDefaultDrop(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isUseDefaultDrop", value)
end
--[[
-- GET怪物入侵活动飘字
--
-- @return 怪物入侵活动飘字
--]]
function PropertyDictionary:get_monsterInvasionFont(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "monsterInvasionFont")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET怪物入侵活动飘字
--
-- @param monsterInvasionFont 怪物入侵活动飘字
--]]
function PropertyDictionary:set_monsterInvasionFont(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "monsterInvasionFont", value)
end
--[[
-- GET首充类活动领奖id|
--
-- @return 首充类活动领奖id|
--]]
function PropertyDictionary:get_operatActivityId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "operatActivityId")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET首充类活动领奖id|
--
-- @param operatActivityId 首充类活动领奖id|
--]]
function PropertyDictionary:set_operatActivityId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "operatActivityId", value)
end
--[[
-- GET首充类活动额外数据
--
-- @return 首充类活动额外数据
--]]
function PropertyDictionary:get_operatOtherData(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "operatOtherData")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET首充类活动额外数据
--
-- @param operatOtherData 首充类活动额外数据
--]]
function PropertyDictionary:set_operatOtherData(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "operatOtherData", value)
end
--[[
-- GETVIP等级武器奖励
--
-- @return VIP等级武器奖励
--]]
function PropertyDictionary:get_vipWeaponReward(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "vipWeaponReward")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SETVIP等级武器奖励
--
-- @param vipWeaponReward VIP等级武器奖励
--]]
function PropertyDictionary:set_vipWeaponReward(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "vipWeaponReward", value)
end
--[[
-- GET累计充值元宝
--
-- @return 累计充值元宝
--]]
function PropertyDictionary:get_totalRecharge(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "totalRecharge")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET累计充值元宝
--
-- @param totalRecharge 累计充值元宝
--]]
function PropertyDictionary:set_totalRecharge(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "totalRecharge", value)
end
--[[
-- GET累计充值次数
--
-- @return 累计充值次数
--]]
function PropertyDictionary:get_totalRechargeCount(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "totalRechargeCount")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET累计充值次数
--
-- @param totalRechargeCount 累计充值次数
--]]
function PropertyDictionary:set_totalRechargeCount(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "totalRechargeCount", value)
end
--[[
-- GET累计消费元宝
--
-- @return 累计消费元宝
--]]
function PropertyDictionary:get_totalConsumeUnBindedGold(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "totalConsumeUnBindedGold")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET累计消费元宝
--
-- @param totalConsumeUnBindedGold 累计消费元宝
--]]
function PropertyDictionary:set_totalConsumeUnBindedGold(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "totalConsumeUnBindedGold", value)
end
--[[
-- GET累计消费邦元
--
-- @return 累计消费邦元
--]]
function PropertyDictionary:get_totalConsumeBindedGold(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "totalConsumeBindedGold")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET累计消费邦元
--
-- @param totalConsumeBindedGold 累计消费邦元
--]]
function PropertyDictionary:set_totalConsumeBindedGold(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "totalConsumeBindedGold", value)
end
--[[
-- GET首充时间
--
-- @return 首充时间
--]]
function PropertyDictionary:get_firstRechargeTime(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "firstRechargeTime")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET首充时间
--
-- @param firstRechargeTime 首充时间
--]]
function PropertyDictionary:set_firstRechargeTime(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "firstRechargeTime", value)
end
--[[
-- GET最近充值时间
--
-- @return 最近充值时间
--]]
function PropertyDictionary:get_lastRechargeTime(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "lastRechargeTime")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET最近充值时间
--
-- @param lastRechargeTime 最近充值时间
--]]
function PropertyDictionary:set_lastRechargeTime(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "lastRechargeTime", value)
end
--[[
-- GET是否已首冲
--
-- @return 是否已首冲
--]]
function PropertyDictionary:get_isFirstRecharge(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isFirstRecharge")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET是否已首冲
--
-- @param isFirstRecharge 是否已首冲
--]]
function PropertyDictionary:set_isFirstRecharge(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isFirstRecharge", value)
end
--[[
-- GET本周消费累计
--
-- @return 本周消费累计
--]]
function PropertyDictionary:get_crtWeekConsume(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "crtWeekConsume")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET本周消费累计
--
-- @param crtWeekConsume 本周消费累计
--]]
function PropertyDictionary:set_crtWeekConsume(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "crtWeekConsume", value)
end
--[[
-- GET是否闪烁
--
-- @return 是否闪烁
--]]
function PropertyDictionary:get_isTwinkle(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isTwinkle")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET是否闪烁
--
-- @param isTwinkle 是否闪烁
--]]
function PropertyDictionary:set_isTwinkle(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isTwinkle", value)
end
--[[
-- GET是否走马灯通知
--
-- @return 是否走马灯通知
--]]
function PropertyDictionary:get_isScrollNotice(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isScrollNotice")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET是否走马灯通知
--
-- @param isScrollNotice 是否走马灯通知
--]]
function PropertyDictionary:set_isScrollNotice(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isScrollNotice", value)
end
--[[
-- GET翅膀升级当前等级一次性可使用最大羽毛数
--
-- @return 翅膀升级当前等级一次性可使用最大羽毛数
--]]
function PropertyDictionary:get_featherMaxConsume(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "featherMaxConsume")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET翅膀升级当前等级一次性可使用最大羽毛数
--
-- @param featherMaxConsume 翅膀升级当前等级一次性可使用最大羽毛数
--]]
function PropertyDictionary:set_featherMaxConsume(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "featherMaxConsume", value)
end
--[[
-- GET心法上一级编号
--
-- @return 心法上一级编号
--]]
function PropertyDictionary:get_cittaPreRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "cittaPreRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET心法上一级编号
--
-- @param cittaPreRefId 心法上一级编号
--]]
function PropertyDictionary:set_cittaPreRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "cittaPreRefId", value)
end
--[[
-- GET心法下一级编号
--
-- @return 心法下一级编号
--]]
function PropertyDictionary:get_cittaNextRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "cittaNextRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET心法下一级编号
--
-- @param cittaNextRefId 心法下一级编号
--]]
function PropertyDictionary:set_cittaNextRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "cittaNextRefId", value)
end
--[[
-- GET翅膀refId
--
-- @return 翅膀refId
--]]
function PropertyDictionary:get_wingRefId(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "wingRefId")
	if value == nil then
		value = ""
	end
	return value
end
--[[
-- SET翅膀refId
--
-- @param wingRefId 翅膀refId
--]]
function PropertyDictionary:set_wingRefId(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "wingRefId", value)
end
--[[
-- GETpk模式
--
-- @return pk模式
--]]
function PropertyDictionary:get_pkModel(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "pkModel")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SETpk模式
--
-- @param pkModel pk模式
--]]
function PropertyDictionary:set_pkModel(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "pkModel", value)
end
--[[
-- GET最大拍卖数量
--
-- @return 最大拍卖数量
--]]
function PropertyDictionary:get_maxAuctionCount(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "maxAuctionCount")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET最大拍卖数量
--
-- @param maxAuctionCount 最大拍卖数量
--]]
function PropertyDictionary:set_maxAuctionCount(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "maxAuctionCount", value)
end
--[[
-- GET新手保护等级
--
-- @return 新手保护等级
--]]
function PropertyDictionary:get_rookieProtectionLevel(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "rookieProtectionLevel")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET新手保护等级
--
-- @param rookieProtectionLevel 新手保护等级
--]]
function PropertyDictionary:set_rookieProtectionLevel(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "rookieProtectionLevel", value)
end
--[[
-- GET是否是极品装备
--
-- @return 是否是极品装备
--]]
function PropertyDictionary:get_isHighestEquipment(propertyTable)
	local value = PropertyDictionary:getProperty(propertyTable, "isHighestEquipment")
	if value == nil then
		value = 0
	end
	return value
end
--[[
-- SET是否是极品装备
--
-- @param isHighestEquipment 是否是极品装备
--]]
function PropertyDictionary:set_isHighestEquipment(propertyTable, value)
	PropertyDictionary:setProperty(propertyTable, "isHighestEquipment", value)
end
