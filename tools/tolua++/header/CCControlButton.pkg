
class CCControlButton : public CCControl
{        

	CCControlButton();
	virtual ~CCControlButton();
	virtual void needsLayout(void);

	virtual void setEnabled(bool enabled);
	virtual void setSelected(bool enabled);
	virtual void setHighlighted(bool enabled);

 virtual CCString* getCurrentTitle(void) const ;
		/** The current color used to display the title. */

 virtual const ccColor3B& getCurrentTitleColor(void) const ;
		/** Adjust the background image. YES by default. If the property is set to NO, the 
		background will use the prefered size of the background image. */
		bool doesAdjustBackgroundImage();
		void setAdjustBackgroundImage(bool adjustBackgroundImage);

		/** The current title label. */

 virtual CCNode* getTitleLabel(void) const ;
 virtual void setTitleLabel(CCNode* var) ;

		/** The current background sprite. */
 virtual CCScale9Sprite* getBackgroundSprite(void) const ;
 virtual void setBackgroundSprite(CCScale9Sprite* var);

		/** The prefered size of the button, if label is larger it will be expanded. */

 virtual CCSize getPreferredSize(void);
 virtual void setPreferredSize(CCSize var);
		/** Adjust the button zooming on touchdown. Default value is YES. */

 virtual bool getZoomOnTouchDown(void);
 virtual void setZoomOnTouchDown(bool var);


 virtual CCPoint getLabelAnchorPoint(void);
 virtual void setLabelAnchorPoint(CCPoint var);
		/* Override setter to affect a background sprite too */
		virtual GLubyte getOpacity(void);
		virtual void setOpacity(GLubyte var);

		/** Flag to know if the button is currently pushed.  */


	bool isPushed() ;

	// <CCControlState, CCString*>

 
 virtual CCDictionary* getTitleDispatchTable(void) const ;
 virtual void setTitleDispatchTable(CCDictionary* var);   

		// <CCControlState, CCColor3bObject*>

 virtual CCDictionary* getTitleColorDispatchTable(void) const ;
 virtual void setTitleColorDispatchTable(CCDictionary* var) ;

		// <CCControlState, CCNode*>

 virtual CCDictionary* getTitleLabelDispatchTable(void) const ;
 virtual void setTitleLabelDispatchTable(CCDictionary* var)  ; 

		// <CCControlState, CCScale9Sprite*>


 virtual CCDictionary* getBackgroundSpriteDispatchTable(void) const ;
 virtual void setBackgroundSpriteDispatchTable(CCDictionary* var) ;


		/* Define the button margin for Top/Bottom edge */

 virtual int getVerticalMargin(void) const ;
		 /* Define the button margin for Left/Right edge */


 virtual int getHorizontalOrigin(void) const ;
		 //set the margins at once (so we only have to do one call of needsLayout)
		 virtual void setMargins(int marginH, int marginV);



	virtual bool init();
	virtual bool initWithLabelAndBackgroundSprite(CCNode* label, CCScale9Sprite* backgroundSprite);

	static CCControlButton* create(CCNode* label, CCScale9Sprite* backgroundSprite);

	virtual bool initWithTitleAndFontNameAndFontSize(std::string title, const char * fontName, float fontSize);

	static CCControlButton* create(std::string title, const char * fontName, float fontSize);

	virtual bool initWithBackgroundSprite(CCScale9Sprite* sprite);

	static CCControlButton* create(CCScale9Sprite* sprite);

	//events
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent);

	void setTitleString(CCNode *titleNode,CCControlState state  = CCControlStateNormal);
	void setEnable(bool enabled);
	void setScaleDef(float f);
	void setOpacityDef(float var);

	/**
	* Returns the title used for a state.
	*
	* @param state The state that uses the title. Possible values are described in
	* "CCControlState".
	*
	* @return The title for the specified state.
	*/
	virtual CCString* getTitleForState(CCControlState state);

	/**
	* Sets the title string to use for the specified state.
	* If a property is not specified for a state, the default is to use
	* the CCButtonStateNormal value.
	*
	* @param title The title string to use for the specified state.
	* @param state The state that uses the specified title. The values are described
	* in "CCControlState".
	*/
	virtual void setTitleForState(CCString* title, CCControlState state);

	/**
	* Returns the title color used for a state.
	*
	* @param state The state that uses the specified color. The values are described
	* in "CCControlState".
	*
	* @return The color of the title for the specified state.
	*/

	virtual const ccColor3B getTitleColorForState(CCControlState state);

	/**
	* Sets the color of the title to use for the specified state.
	*
	* @param color The color of the title to use for the specified state.
	* @param state The state that uses the specified color. The values are described
	* in "CCControlState".
	*/
	virtual void setTitleColorForState(ccColor3B color, CCControlState state);

	/**
	* Returns the title label used for a state.
	*
	* @param state The state that uses the title label. Possible values are described
	* in "CCControlState".
	*/
	virtual CCNode* getTitleLabelForState(CCControlState state);

	/**
	* Sets the title label to use for the specified state.
	* If a property is not specified for a state, the default is to use
	* the CCButtonStateNormal value.
	*
	* @param title The title label to use for the specified state.
	* @param state The state that uses the specified title. The values are described
	* in "CCControlState".
	*/
	virtual void setTitleLabelForState(CCNode* label, CCControlState state);

	virtual void setTitleTTFForState(const char * fntFile, CCControlState state);
	virtual const char * getTitleTTFForState(CCControlState state);

	virtual void setTitleTTFSizeForState(float size, CCControlState state);
	virtual float getTitleTTFSizeForState(CCControlState state);

	/**
	* Sets the font of the label, changes the label to a CCLabelBMFont if neccessary.
	* @param fntFile The name of the font to change to
	* @param state The state that uses the specified fntFile. The values are described
	* in "CCControlState".
	*/
	virtual void setTitleBMFontForState(const char * fntFile, CCControlState state);
	virtual const char * getTitleBMFontForState(CCControlState state);

	/**
	* Returns the background sprite used for a state.
	*
	* @param state The state that uses the background sprite. Possible values are
	* described in "CCControlState".
	*/
	virtual CCScale9Sprite* getBackgroundSpriteForState(CCControlState state);

	/**
	* Sets the background sprite to use for the specified button state.
	*
	* @param sprite The background sprite to use for the specified state.
	* @param state The state that uses the specified image. The values are described
	* in "CCControlState".
	*/
	virtual void setBackgroundSpriteForState(CCScale9Sprite* sprite, CCControlState state);

	/**
	* Sets the background spriteFrame to use for the specified button state.
	*
	* @param spriteFrame The background spriteFrame to use for the specified state.
	* @param state The state that uses the specified image. The values are described
	* in "CCControlState".
	*/
	virtual void setBackgroundSpriteFrameForState(CCSpriteFrame * spriteFrame, CCControlState state);

	static CCControlButton* create();
};

