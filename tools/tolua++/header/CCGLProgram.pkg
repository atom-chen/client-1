enum {
    kCCVertexAttrib_Position,
    kCCVertexAttrib_Color,
    kCCVertexAttrib_TexCoords,

    kCCVertexAttrib_MAX,
};

enum {
	kCCUniformPMatrix,
	kCCUniformMVMatrix,
	kCCUniformMVPMatrix,
	kCCUniformTime,
	kCCUniformSinTime,
	kCCUniformCosTime,
	kCCUniformRandom01,
	kCCUniformSampler,
    kCCUniformSampler1,

	kCCUniform_MAX,
};



class CCGLProgram : public CCObject
{
    CCGLProgram();
    virtual ~CCGLProgram();
    bool initWithVertexShaderByteArray(const char* vShaderByteArray, const char* fShaderByteArray);
    bool initWithVertexShaderFilename(const char* vShaderFilename, const char* fShaderFilename);
    void addAttribute(const char* attributeName, int index);
    bool link();
    void use();
    void updateUniforms();
    
    int getUniformLocationForName(const char* name);
    
    void setUniformLocationWith1i(int location, int i1);
    
    void setUniformLocationWith2i(int location, int i1, int i2);
    
    void setUniformLocationWith3i(int location, int i1, int i2, int i3);
    
    void setUniformLocationWith4i(int location, int i1, int i2, int i3, int i4);
    
    void setUniformLocationWith2iv(int location, int* ints, unsigned int numberOfArrays);
    
    void setUniformLocationWith3iv(int location, int* ints, unsigned int numberOfArrays);
    
    void setUniformLocationWith4iv(int location, int* ints, unsigned int numberOfArrays);

    void setUniformLocationWith1f(int location, float f1);

    void setUniformLocationWith2f(int location, float f1, float f2);

    void setUniformLocationWith3f(int location, float f1, float f2, float f3);

    void setUniformLocationWith4f(int location, float f1, float f2, float f3, float f4);

    void setUniformLocationWith2fv(int location, float* floats, unsigned int numberOfArrays);

    void setUniformLocationWith3fv(int location, float* floats, unsigned int numberOfArrays);

    void setUniformLocationWith4fv(int location, float* floats, unsigned int numberOfArrays);

    void setUniformLocationWithMatrix4fv(int location, float* matrixArray, unsigned int numberOfMatrices);
    
    void setUniformsForBuiltins();

    const char* vertexShaderLog();
    const char* fragmentShaderLog();
    const char* programLog();
    
    void reset();
    
    const int getProgram();

};